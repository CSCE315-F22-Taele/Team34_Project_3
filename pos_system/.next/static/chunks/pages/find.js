/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["pages/find"],{

/***/ "./node_modules/@react-google-maps/api/dist/esm.js":
/*!*********************************************************!*\
  !*** ./node_modules/@react-google-maps/api/dist/esm.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Autocomplete\": function() { return /* binding */ Autocomplete; },\n/* harmony export */   \"BicyclingLayer\": function() { return /* binding */ BicyclingLayer; },\n/* harmony export */   \"BicyclingLayerF\": function() { return /* binding */ BicyclingLayerF; },\n/* harmony export */   \"Circle\": function() { return /* binding */ Circle; },\n/* harmony export */   \"CircleF\": function() { return /* binding */ CircleF; },\n/* harmony export */   \"Data\": function() { return /* binding */ Data; },\n/* harmony export */   \"DataF\": function() { return /* binding */ DataF; },\n/* harmony export */   \"DirectionsRenderer\": function() { return /* binding */ DirectionsRenderer; },\n/* harmony export */   \"DirectionsService\": function() { return /* binding */ DirectionsService; },\n/* harmony export */   \"DistanceMatrixService\": function() { return /* binding */ DistanceMatrixService; },\n/* harmony export */   \"DrawingManager\": function() { return /* binding */ DrawingManager; },\n/* harmony export */   \"DrawingManagerF\": function() { return /* binding */ DrawingManagerF; },\n/* harmony export */   \"FLOAT_PANE\": function() { return /* binding */ FLOAT_PANE; },\n/* harmony export */   \"GoogleMap\": function() { return /* binding */ GoogleMap; },\n/* harmony export */   \"GoogleMapsMarkerClusterer\": function() { return /* binding */ index_esm; },\n/* harmony export */   \"GoogleMarkerClusterer\": function() { return /* binding */ GoogleMarkerClusterer$1; },\n/* harmony export */   \"GroundOverlay\": function() { return /* binding */ GroundOverlay; },\n/* harmony export */   \"HeatmapLayer\": function() { return /* binding */ HeatmapLayer; },\n/* harmony export */   \"InfoBox\": function() { return /* binding */ InfoBoxComponent; },\n/* harmony export */   \"InfoBoxF\": function() { return /* binding */ InfoBoxF; },\n/* harmony export */   \"InfoWindow\": function() { return /* binding */ InfoWindow; },\n/* harmony export */   \"InfoWindowF\": function() { return /* binding */ InfoWindowF; },\n/* harmony export */   \"KmlLayer\": function() { return /* binding */ KmlLayer; },\n/* harmony export */   \"LoadScript\": function() { return /* binding */ LoadScript; },\n/* harmony export */   \"LoadScriptNext\": function() { return /* binding */ LoadScriptNext$1; },\n/* harmony export */   \"MAP_PANE\": function() { return /* binding */ MAP_PANE; },\n/* harmony export */   \"MARKER_LAYER\": function() { return /* binding */ MARKER_LAYER; },\n/* harmony export */   \"MapContext\": function() { return /* binding */ MapContext; },\n/* harmony export */   \"Marker\": function() { return /* binding */ Marker; },\n/* harmony export */   \"MarkerClusterer\": function() { return /* binding */ ClustererComponent; },\n/* harmony export */   \"MarkerClustererF\": function() { return /* binding */ MarkerClustererF; },\n/* harmony export */   \"MarkerF\": function() { return /* binding */ MarkerF; },\n/* harmony export */   \"OVERLAY_LAYER\": function() { return /* binding */ OVERLAY_LAYER; },\n/* harmony export */   \"OVERLAY_MOUSE_TARGET\": function() { return /* binding */ OVERLAY_MOUSE_TARGET; },\n/* harmony export */   \"OverlayView\": function() { return /* binding */ OverlayView; },\n/* harmony export */   \"OverlayViewF\": function() { return /* binding */ OverlayViewF; },\n/* harmony export */   \"Polygon\": function() { return /* binding */ Polygon; },\n/* harmony export */   \"PolygonF\": function() { return /* binding */ PolygonF; },\n/* harmony export */   \"Polyline\": function() { return /* binding */ Polyline; },\n/* harmony export */   \"PolylineF\": function() { return /* binding */ PolylineF; },\n/* harmony export */   \"Rectangle\": function() { return /* binding */ Rectangle; },\n/* harmony export */   \"RectangleF\": function() { return /* binding */ RectangleF; },\n/* harmony export */   \"StandaloneSearchBox\": function() { return /* binding */ StandaloneSearchBox; },\n/* harmony export */   \"StreetViewPanorama\": function() { return /* binding */ StreetViewPanorama; },\n/* harmony export */   \"StreetViewService\": function() { return /* binding */ StreetViewService; },\n/* harmony export */   \"TrafficLayer\": function() { return /* binding */ TrafficLayer; },\n/* harmony export */   \"TrafficLayerF\": function() { return /* binding */ TrafficLayerF; },\n/* harmony export */   \"TransitLayer\": function() { return /* binding */ TransitLayer; },\n/* harmony export */   \"TransitLayerF\": function() { return /* binding */ TransitLayerF; },\n/* harmony export */   \"useGoogleMap\": function() { return /* binding */ useGoogleMap; },\n/* harmony export */   \"useJsApiLoader\": function() { return /* binding */ useJsApiLoader; },\n/* harmony export */   \"useLoadScript\": function() { return /* binding */ useLoadScript; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"./node_modules/react-dom/index.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\n\n\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof __webpack_require__.g !== 'undefined' ? __webpack_require__.g : typeof self !== 'undefined' ? self : {};\n\nvar jsxRuntime = {exports: {}};\n\nvar reactJsxRuntime_production_min = {};\n\n/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar hasRequiredReactJsxRuntime_production_min;\n\nfunction requireReactJsxRuntime_production_min () {\n\tif (hasRequiredReactJsxRuntime_production_min) return reactJsxRuntime_production_min;\n\thasRequiredReactJsxRuntime_production_min = 1;\nvar f=(react__WEBPACK_IMPORTED_MODULE_0___default()),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\n\tfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return {$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}reactJsxRuntime_production_min.Fragment=l;reactJsxRuntime_production_min.jsx=q;reactJsxRuntime_production_min.jsxs=q;\n\treturn reactJsxRuntime_production_min;\n}\n\nvar reactJsxRuntime_development = {};\n\n/**\n * @license React\n * react-jsx-runtime.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar hasRequiredReactJsxRuntime_development;\n\nfunction requireReactJsxRuntime_development () {\n\tif (hasRequiredReactJsxRuntime_development) return reactJsxRuntime_development;\n\thasRequiredReactJsxRuntime_development = 1;\n\n\tif (true) {\n\t  (function() {\n\n\tvar React = (react__WEBPACK_IMPORTED_MODULE_0___default());\n\n\t// ATTENTION\n\t// When adding new symbols to this file,\n\t// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n\t// The Symbol used to tag the ReactElement-like types.\n\tvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\n\tvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\n\tvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\n\tvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\n\tvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\n\tvar REACT_PROVIDER_TYPE = Symbol.for('react.provider');\n\tvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\n\tvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\n\tvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\n\tvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\n\tvar REACT_MEMO_TYPE = Symbol.for('react.memo');\n\tvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\n\tvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\n\tvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\n\tvar FAUX_ITERATOR_SYMBOL = '@@iterator';\n\tfunction getIteratorFn(maybeIterable) {\n\t  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n\t    return null;\n\t  }\n\n\t  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n\t  if (typeof maybeIterator === 'function') {\n\t    return maybeIterator;\n\t  }\n\n\t  return null;\n\t}\n\n\tvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\n\tfunction error(format) {\n\t  {\n\t    {\n\t      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n\t        args[_key2 - 1] = arguments[_key2];\n\t      }\n\n\t      printWarning('error', format, args);\n\t    }\n\t  }\n\t}\n\n\tfunction printWarning(level, format, args) {\n\t  // When changing this logic, you might want to also\n\t  // update consoleWithStackDev.www.js as well.\n\t  {\n\t    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\t    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n\t    if (stack !== '') {\n\t      format += '%s';\n\t      args = args.concat([stack]);\n\t    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n\t    var argsWithFormat = args.map(function (item) {\n\t      return String(item);\n\t    }); // Careful: RN currently depends on this prefix\n\n\t    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n\t    // breaks IE9: https://github.com/facebook/react/issues/13610\n\t    // eslint-disable-next-line react-internal/no-production-logging\n\n\t    Function.prototype.apply.call(console[level], console, argsWithFormat);\n\t  }\n\t}\n\n\t// -----------------------------------------------------------------------------\n\n\tvar enableScopeAPI = false; // Experimental Create Event Handle API.\n\tvar enableCacheElement = false;\n\tvar enableTransitionTracing = false; // No known bugs, but needs performance testing\n\n\tvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n\t// stuff. Intended to enable React core members to more easily debug scheduling\n\t// issues in DEV builds.\n\n\tvar enableDebugTracing = false; // Track which Fiber(s) schedule render work.\n\n\tvar REACT_MODULE_REFERENCE;\n\n\t{\n\t  REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');\n\t}\n\n\tfunction isValidElementType(type) {\n\t  if (typeof type === 'string' || typeof type === 'function') {\n\t    return true;\n\t  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n\t  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {\n\t    return true;\n\t  }\n\n\t  if (typeof type === 'object' && type !== null) {\n\t    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n\t    // types supported by any Flight configuration anywhere since\n\t    // we don't know which Flight build this will end up being used\n\t    // with.\n\t    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {\n\t      return true;\n\t    }\n\t  }\n\n\t  return false;\n\t}\n\n\tfunction getWrappedName(outerType, innerType, wrapperName) {\n\t  var displayName = outerType.displayName;\n\n\t  if (displayName) {\n\t    return displayName;\n\t  }\n\n\t  var functionName = innerType.displayName || innerType.name || '';\n\t  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n\t} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\n\tfunction getContextName(type) {\n\t  return type.displayName || 'Context';\n\t} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\n\n\tfunction getComponentNameFromType(type) {\n\t  if (type == null) {\n\t    // Host root, text node or just invalid type.\n\t    return null;\n\t  }\n\n\t  {\n\t    if (typeof type.tag === 'number') {\n\t      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n\t    }\n\t  }\n\n\t  if (typeof type === 'function') {\n\t    return type.displayName || type.name || null;\n\t  }\n\n\t  if (typeof type === 'string') {\n\t    return type;\n\t  }\n\n\t  switch (type) {\n\t    case REACT_FRAGMENT_TYPE:\n\t      return 'Fragment';\n\n\t    case REACT_PORTAL_TYPE:\n\t      return 'Portal';\n\n\t    case REACT_PROFILER_TYPE:\n\t      return 'Profiler';\n\n\t    case REACT_STRICT_MODE_TYPE:\n\t      return 'StrictMode';\n\n\t    case REACT_SUSPENSE_TYPE:\n\t      return 'Suspense';\n\n\t    case REACT_SUSPENSE_LIST_TYPE:\n\t      return 'SuspenseList';\n\n\t  }\n\n\t  if (typeof type === 'object') {\n\t    switch (type.$$typeof) {\n\t      case REACT_CONTEXT_TYPE:\n\t        var context = type;\n\t        return getContextName(context) + '.Consumer';\n\n\t      case REACT_PROVIDER_TYPE:\n\t        var provider = type;\n\t        return getContextName(provider._context) + '.Provider';\n\n\t      case REACT_FORWARD_REF_TYPE:\n\t        return getWrappedName(type, type.render, 'ForwardRef');\n\n\t      case REACT_MEMO_TYPE:\n\t        var outerName = type.displayName || null;\n\n\t        if (outerName !== null) {\n\t          return outerName;\n\t        }\n\n\t        return getComponentNameFromType(type.type) || 'Memo';\n\n\t      case REACT_LAZY_TYPE:\n\t        {\n\t          var lazyComponent = type;\n\t          var payload = lazyComponent._payload;\n\t          var init = lazyComponent._init;\n\n\t          try {\n\t            return getComponentNameFromType(init(payload));\n\t          } catch (x) {\n\t            return null;\n\t          }\n\t        }\n\n\t      // eslint-disable-next-line no-fallthrough\n\t    }\n\t  }\n\n\t  return null;\n\t}\n\n\tvar assign = Object.assign;\n\n\t// Helpers to patch console.logs to avoid logging during side-effect free\n\t// replaying on render function. This currently only patches the object\n\t// lazily which won't cover if the log function was extracted eagerly.\n\t// We could also eagerly patch the method.\n\tvar disabledDepth = 0;\n\tvar prevLog;\n\tvar prevInfo;\n\tvar prevWarn;\n\tvar prevError;\n\tvar prevGroup;\n\tvar prevGroupCollapsed;\n\tvar prevGroupEnd;\n\n\tfunction disabledLog() {}\n\n\tdisabledLog.__reactDisabledLog = true;\n\tfunction disableLogs() {\n\t  {\n\t    if (disabledDepth === 0) {\n\t      /* eslint-disable react-internal/no-production-logging */\n\t      prevLog = console.log;\n\t      prevInfo = console.info;\n\t      prevWarn = console.warn;\n\t      prevError = console.error;\n\t      prevGroup = console.group;\n\t      prevGroupCollapsed = console.groupCollapsed;\n\t      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n\t      var props = {\n\t        configurable: true,\n\t        enumerable: true,\n\t        value: disabledLog,\n\t        writable: true\n\t      }; // $FlowFixMe Flow thinks console is immutable.\n\n\t      Object.defineProperties(console, {\n\t        info: props,\n\t        log: props,\n\t        warn: props,\n\t        error: props,\n\t        group: props,\n\t        groupCollapsed: props,\n\t        groupEnd: props\n\t      });\n\t      /* eslint-enable react-internal/no-production-logging */\n\t    }\n\n\t    disabledDepth++;\n\t  }\n\t}\n\tfunction reenableLogs() {\n\t  {\n\t    disabledDepth--;\n\n\t    if (disabledDepth === 0) {\n\t      /* eslint-disable react-internal/no-production-logging */\n\t      var props = {\n\t        configurable: true,\n\t        enumerable: true,\n\t        writable: true\n\t      }; // $FlowFixMe Flow thinks console is immutable.\n\n\t      Object.defineProperties(console, {\n\t        log: assign({}, props, {\n\t          value: prevLog\n\t        }),\n\t        info: assign({}, props, {\n\t          value: prevInfo\n\t        }),\n\t        warn: assign({}, props, {\n\t          value: prevWarn\n\t        }),\n\t        error: assign({}, props, {\n\t          value: prevError\n\t        }),\n\t        group: assign({}, props, {\n\t          value: prevGroup\n\t        }),\n\t        groupCollapsed: assign({}, props, {\n\t          value: prevGroupCollapsed\n\t        }),\n\t        groupEnd: assign({}, props, {\n\t          value: prevGroupEnd\n\t        })\n\t      });\n\t      /* eslint-enable react-internal/no-production-logging */\n\t    }\n\n\t    if (disabledDepth < 0) {\n\t      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n\t    }\n\t  }\n\t}\n\n\tvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n\tvar prefix;\n\tfunction describeBuiltInComponentFrame(name, source, ownerFn) {\n\t  {\n\t    if (prefix === undefined) {\n\t      // Extract the VM specific prefix used by each line.\n\t      try {\n\t        throw Error();\n\t      } catch (x) {\n\t        var match = x.stack.trim().match(/\\n( *(at )?)/);\n\t        prefix = match && match[1] || '';\n\t      }\n\t    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n\t    return '\\n' + prefix + name;\n\t  }\n\t}\n\tvar reentry = false;\n\tvar componentFrameCache;\n\n\t{\n\t  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n\t  componentFrameCache = new PossiblyWeakMap();\n\t}\n\n\tfunction describeNativeComponentFrame(fn, construct) {\n\t  // If something asked for a stack inside a fake render, it should get ignored.\n\t  if ( !fn || reentry) {\n\t    return '';\n\t  }\n\n\t  {\n\t    var frame = componentFrameCache.get(fn);\n\n\t    if (frame !== undefined) {\n\t      return frame;\n\t    }\n\t  }\n\n\t  var control;\n\t  reentry = true;\n\t  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.\n\n\t  Error.prepareStackTrace = undefined;\n\t  var previousDispatcher;\n\n\t  {\n\t    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n\t    // for warnings.\n\n\t    ReactCurrentDispatcher.current = null;\n\t    disableLogs();\n\t  }\n\n\t  try {\n\t    // This should throw.\n\t    if (construct) {\n\t      // Something should be setting the props in the constructor.\n\t      var Fake = function () {\n\t        throw Error();\n\t      }; // $FlowFixMe\n\n\n\t      Object.defineProperty(Fake.prototype, 'props', {\n\t        set: function () {\n\t          // We use a throwing setter instead of frozen or non-writable props\n\t          // because that won't throw in a non-strict mode function.\n\t          throw Error();\n\t        }\n\t      });\n\n\t      if (typeof Reflect === 'object' && Reflect.construct) {\n\t        // We construct a different control for this case to include any extra\n\t        // frames added by the construct call.\n\t        try {\n\t          Reflect.construct(Fake, []);\n\t        } catch (x) {\n\t          control = x;\n\t        }\n\n\t        Reflect.construct(fn, [], Fake);\n\t      } else {\n\t        try {\n\t          Fake.call();\n\t        } catch (x) {\n\t          control = x;\n\t        }\n\n\t        fn.call(Fake.prototype);\n\t      }\n\t    } else {\n\t      try {\n\t        throw Error();\n\t      } catch (x) {\n\t        control = x;\n\t      }\n\n\t      fn();\n\t    }\n\t  } catch (sample) {\n\t    // This is inlined manually because closure doesn't do it for us.\n\t    if (sample && control && typeof sample.stack === 'string') {\n\t      // This extracts the first frame from the sample that isn't also in the control.\n\t      // Skipping one frame that we assume is the frame that calls the two.\n\t      var sampleLines = sample.stack.split('\\n');\n\t      var controlLines = control.stack.split('\\n');\n\t      var s = sampleLines.length - 1;\n\t      var c = controlLines.length - 1;\n\n\t      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n\t        // We expect at least one stack frame to be shared.\n\t        // Typically this will be the root most one. However, stack frames may be\n\t        // cut off due to maximum stack limits. In this case, one maybe cut off\n\t        // earlier than the other. We assume that the sample is longer or the same\n\t        // and there for cut off earlier. So we should find the root most frame in\n\t        // the sample somewhere in the control.\n\t        c--;\n\t      }\n\n\t      for (; s >= 1 && c >= 0; s--, c--) {\n\t        // Next we find the first one that isn't the same which should be the\n\t        // frame that called our sample function and the control.\n\t        if (sampleLines[s] !== controlLines[c]) {\n\t          // In V8, the first line is describing the message but other VMs don't.\n\t          // If we're about to return the first line, and the control is also on the same\n\t          // line, that's a pretty good indicator that our sample threw at same line as\n\t          // the control. I.e. before we entered the sample frame. So we ignore this result.\n\t          // This can happen if you passed a class to function component, or non-function.\n\t          if (s !== 1 || c !== 1) {\n\t            do {\n\t              s--;\n\t              c--; // We may still have similar intermediate frames from the construct call.\n\t              // The next one that isn't the same should be our match though.\n\n\t              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n\t                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n\t                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n\t                // but we have a user-provided \"displayName\"\n\t                // splice it in to make the stack more readable.\n\n\n\t                if (fn.displayName && _frame.includes('<anonymous>')) {\n\t                  _frame = _frame.replace('<anonymous>', fn.displayName);\n\t                }\n\n\t                {\n\t                  if (typeof fn === 'function') {\n\t                    componentFrameCache.set(fn, _frame);\n\t                  }\n\t                } // Return the line we found.\n\n\n\t                return _frame;\n\t              }\n\t            } while (s >= 1 && c >= 0);\n\t          }\n\n\t          break;\n\t        }\n\t      }\n\t    }\n\t  } finally {\n\t    reentry = false;\n\n\t    {\n\t      ReactCurrentDispatcher.current = previousDispatcher;\n\t      reenableLogs();\n\t    }\n\n\t    Error.prepareStackTrace = previousPrepareStackTrace;\n\t  } // Fallback to just using the name if we couldn't make it throw.\n\n\n\t  var name = fn ? fn.displayName || fn.name : '';\n\t  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n\t  {\n\t    if (typeof fn === 'function') {\n\t      componentFrameCache.set(fn, syntheticFrame);\n\t    }\n\t  }\n\n\t  return syntheticFrame;\n\t}\n\tfunction describeFunctionComponentFrame(fn, source, ownerFn) {\n\t  {\n\t    return describeNativeComponentFrame(fn, false);\n\t  }\n\t}\n\n\tfunction shouldConstruct(Component) {\n\t  var prototype = Component.prototype;\n\t  return !!(prototype && prototype.isReactComponent);\n\t}\n\n\tfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n\n\t  if (type == null) {\n\t    return '';\n\t  }\n\n\t  if (typeof type === 'function') {\n\t    {\n\t      return describeNativeComponentFrame(type, shouldConstruct(type));\n\t    }\n\t  }\n\n\t  if (typeof type === 'string') {\n\t    return describeBuiltInComponentFrame(type);\n\t  }\n\n\t  switch (type) {\n\t    case REACT_SUSPENSE_TYPE:\n\t      return describeBuiltInComponentFrame('Suspense');\n\n\t    case REACT_SUSPENSE_LIST_TYPE:\n\t      return describeBuiltInComponentFrame('SuspenseList');\n\t  }\n\n\t  if (typeof type === 'object') {\n\t    switch (type.$$typeof) {\n\t      case REACT_FORWARD_REF_TYPE:\n\t        return describeFunctionComponentFrame(type.render);\n\n\t      case REACT_MEMO_TYPE:\n\t        // Memo may contain any component type so we recursively resolve it.\n\t        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n\n\t      case REACT_LAZY_TYPE:\n\t        {\n\t          var lazyComponent = type;\n\t          var payload = lazyComponent._payload;\n\t          var init = lazyComponent._init;\n\n\t          try {\n\t            // Lazy may contain any component type so we recursively resolve it.\n\t            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n\t          } catch (x) {}\n\t        }\n\t    }\n\t  }\n\n\t  return '';\n\t}\n\n\tvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\n\tvar loggedTypeFailures = {};\n\tvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\n\tfunction setCurrentlyValidatingElement(element) {\n\t  {\n\t    if (element) {\n\t      var owner = element._owner;\n\t      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n\t      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n\t    } else {\n\t      ReactDebugCurrentFrame.setExtraStackFrame(null);\n\t    }\n\t  }\n\t}\n\n\tfunction checkPropTypes(typeSpecs, values, location, componentName, element) {\n\t  {\n\t    // $FlowFixMe This is okay but Flow doesn't know it.\n\t    var has = Function.call.bind(hasOwnProperty);\n\n\t    for (var typeSpecName in typeSpecs) {\n\t      if (has(typeSpecs, typeSpecName)) {\n\t        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n\t        // fail the render phase where it didn't fail before. So we log it.\n\t        // After these have been cleaned up, we'll let them throw.\n\n\t        try {\n\t          // This is intentionally an invariant that gets caught. It's the same\n\t          // behavior as without this statement except with a better message.\n\t          if (typeof typeSpecs[typeSpecName] !== 'function') {\n\t            // eslint-disable-next-line react-internal/prod-error-codes\n\t            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n\t            err.name = 'Invariant Violation';\n\t            throw err;\n\t          }\n\n\t          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n\t        } catch (ex) {\n\t          error$1 = ex;\n\t        }\n\n\t        if (error$1 && !(error$1 instanceof Error)) {\n\t          setCurrentlyValidatingElement(element);\n\n\t          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n\n\t          setCurrentlyValidatingElement(null);\n\t        }\n\n\t        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n\t          // Only monitor this failure once because there tends to be a lot of the\n\t          // same error.\n\t          loggedTypeFailures[error$1.message] = true;\n\t          setCurrentlyValidatingElement(element);\n\n\t          error('Failed %s type: %s', location, error$1.message);\n\n\t          setCurrentlyValidatingElement(null);\n\t        }\n\t      }\n\t    }\n\t  }\n\t}\n\n\tvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\n\tfunction isArray(a) {\n\t  return isArrayImpl(a);\n\t}\n\n\t/*\n\t * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol\n\t * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n\t *\n\t * The functions in this module will throw an easier-to-understand,\n\t * easier-to-debug exception with a clear errors message message explaining the\n\t * problem. (Instead of a confusing exception thrown inside the implementation\n\t * of the `value` object).\n\t */\n\t// $FlowFixMe only called in DEV, so void return is not possible.\n\tfunction typeName(value) {\n\t  {\n\t    // toStringTag is needed for namespaced types like Temporal.Instant\n\t    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n\t    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';\n\t    return type;\n\t  }\n\t} // $FlowFixMe only called in DEV, so void return is not possible.\n\n\n\tfunction willCoercionThrow(value) {\n\t  {\n\t    try {\n\t      testStringCoercion(value);\n\t      return false;\n\t    } catch (e) {\n\t      return true;\n\t    }\n\t  }\n\t}\n\n\tfunction testStringCoercion(value) {\n\t  // If you ended up here by following an exception call stack, here's what's\n\t  // happened: you supplied an object or symbol value to React (as a prop, key,\n\t  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n\t  // coerce it to a string using `'' + value`, an exception was thrown.\n\t  //\n\t  // The most common types that will cause this exception are `Symbol` instances\n\t  // and Temporal objects like `Temporal.Instant`. But any object that has a\n\t  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n\t  // exception. (Library authors do this to prevent users from using built-in\n\t  // numeric operators like `+` or comparison operators like `>=` because custom\n\t  // methods are needed to perform accurate arithmetic or comparison.)\n\t  //\n\t  // To fix the problem, coerce this object or symbol value to a string before\n\t  // passing it to React. The most reliable way is usually `String(value)`.\n\t  //\n\t  // To find which value is throwing, check the browser or debugger console.\n\t  // Before this exception was thrown, there should be `console.error` output\n\t  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n\t  // problem and how that type was used: key, atrribute, input value prop, etc.\n\t  // In most cases, this console output also shows the component and its\n\t  // ancestor components where the exception happened.\n\t  //\n\t  // eslint-disable-next-line react-internal/safe-string-coercion\n\t  return '' + value;\n\t}\n\tfunction checkKeyStringCoercion(value) {\n\t  {\n\t    if (willCoercionThrow(value)) {\n\t      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));\n\n\t      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n\t    }\n\t  }\n\t}\n\n\tvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n\tvar RESERVED_PROPS = {\n\t  key: true,\n\t  ref: true,\n\t  __self: true,\n\t  __source: true\n\t};\n\tvar specialPropKeyWarningShown;\n\tvar specialPropRefWarningShown;\n\tvar didWarnAboutStringRefs;\n\n\t{\n\t  didWarnAboutStringRefs = {};\n\t}\n\n\tfunction hasValidRef(config) {\n\t  {\n\t    if (hasOwnProperty.call(config, 'ref')) {\n\t      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n\t      if (getter && getter.isReactWarning) {\n\t        return false;\n\t      }\n\t    }\n\t  }\n\n\t  return config.ref !== undefined;\n\t}\n\n\tfunction hasValidKey(config) {\n\t  {\n\t    if (hasOwnProperty.call(config, 'key')) {\n\t      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n\t      if (getter && getter.isReactWarning) {\n\t        return false;\n\t      }\n\t    }\n\t  }\n\n\t  return config.key !== undefined;\n\t}\n\n\tfunction warnIfStringRefCannotBeAutoConverted(config, self) {\n\t  {\n\t    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {\n\t      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n\t      if (!didWarnAboutStringRefs[componentName]) {\n\t        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);\n\n\t        didWarnAboutStringRefs[componentName] = true;\n\t      }\n\t    }\n\t  }\n\t}\n\n\tfunction defineKeyPropWarningGetter(props, displayName) {\n\t  {\n\t    var warnAboutAccessingKey = function () {\n\t      if (!specialPropKeyWarningShown) {\n\t        specialPropKeyWarningShown = true;\n\n\t        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n\t      }\n\t    };\n\n\t    warnAboutAccessingKey.isReactWarning = true;\n\t    Object.defineProperty(props, 'key', {\n\t      get: warnAboutAccessingKey,\n\t      configurable: true\n\t    });\n\t  }\n\t}\n\n\tfunction defineRefPropWarningGetter(props, displayName) {\n\t  {\n\t    var warnAboutAccessingRef = function () {\n\t      if (!specialPropRefWarningShown) {\n\t        specialPropRefWarningShown = true;\n\n\t        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n\t      }\n\t    };\n\n\t    warnAboutAccessingRef.isReactWarning = true;\n\t    Object.defineProperty(props, 'ref', {\n\t      get: warnAboutAccessingRef,\n\t      configurable: true\n\t    });\n\t  }\n\t}\n\t/**\n\t * Factory method to create a new React element. This no longer adheres to\n\t * the class pattern, so do not use new to call it. Also, instanceof check\n\t * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n\t * if something is a React Element.\n\t *\n\t * @param {*} type\n\t * @param {*} props\n\t * @param {*} key\n\t * @param {string|object} ref\n\t * @param {*} owner\n\t * @param {*} self A *temporary* helper to detect places where `this` is\n\t * different from the `owner` when React.createElement is called, so that we\n\t * can warn. We want to get rid of owner and replace string `ref`s with arrow\n\t * functions, and as long as `this` and owner are the same, there will be no\n\t * change in behavior.\n\t * @param {*} source An annotation object (added by a transpiler or otherwise)\n\t * indicating filename, line number, and/or other information.\n\t * @internal\n\t */\n\n\n\tvar ReactElement = function (type, key, ref, self, source, owner, props) {\n\t  var element = {\n\t    // This tag allows us to uniquely identify this as a React Element\n\t    $$typeof: REACT_ELEMENT_TYPE,\n\t    // Built-in properties that belong on the element\n\t    type: type,\n\t    key: key,\n\t    ref: ref,\n\t    props: props,\n\t    // Record the component responsible for creating this element.\n\t    _owner: owner\n\t  };\n\n\t  {\n\t    // The validation flag is currently mutative. We put it on\n\t    // an external backing store so that we can freeze the whole object.\n\t    // This can be replaced with a WeakMap once they are implemented in\n\t    // commonly used development environments.\n\t    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n\t    // the validation flag non-enumerable (where possible, which should\n\t    // include every environment we run tests in), so the test framework\n\t    // ignores it.\n\n\t    Object.defineProperty(element._store, 'validated', {\n\t      configurable: false,\n\t      enumerable: false,\n\t      writable: true,\n\t      value: false\n\t    }); // self and source are DEV only properties.\n\n\t    Object.defineProperty(element, '_self', {\n\t      configurable: false,\n\t      enumerable: false,\n\t      writable: false,\n\t      value: self\n\t    }); // Two elements created in two different places should be considered\n\t    // equal for testing purposes and therefore we hide it from enumeration.\n\n\t    Object.defineProperty(element, '_source', {\n\t      configurable: false,\n\t      enumerable: false,\n\t      writable: false,\n\t      value: source\n\t    });\n\n\t    if (Object.freeze) {\n\t      Object.freeze(element.props);\n\t      Object.freeze(element);\n\t    }\n\t  }\n\n\t  return element;\n\t};\n\t/**\n\t * https://github.com/reactjs/rfcs/pull/107\n\t * @param {*} type\n\t * @param {object} props\n\t * @param {string} key\n\t */\n\n\tfunction jsxDEV(type, config, maybeKey, source, self) {\n\t  {\n\t    var propName; // Reserved names are extracted\n\n\t    var props = {};\n\t    var key = null;\n\t    var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n\t    // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n\t    // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n\t    // but as an intermediary step, we will use jsxDEV for everything except\n\t    // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n\t    // key is explicitly declared to be undefined or not.\n\n\t    if (maybeKey !== undefined) {\n\t      {\n\t        checkKeyStringCoercion(maybeKey);\n\t      }\n\n\t      key = '' + maybeKey;\n\t    }\n\n\t    if (hasValidKey(config)) {\n\t      {\n\t        checkKeyStringCoercion(config.key);\n\t      }\n\n\t      key = '' + config.key;\n\t    }\n\n\t    if (hasValidRef(config)) {\n\t      ref = config.ref;\n\t      warnIfStringRefCannotBeAutoConverted(config, self);\n\t    } // Remaining properties are added to a new props object\n\n\n\t    for (propName in config) {\n\t      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n\t        props[propName] = config[propName];\n\t      }\n\t    } // Resolve default props\n\n\n\t    if (type && type.defaultProps) {\n\t      var defaultProps = type.defaultProps;\n\n\t      for (propName in defaultProps) {\n\t        if (props[propName] === undefined) {\n\t          props[propName] = defaultProps[propName];\n\t        }\n\t      }\n\t    }\n\n\t    if (key || ref) {\n\t      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n\t      if (key) {\n\t        defineKeyPropWarningGetter(props, displayName);\n\t      }\n\n\t      if (ref) {\n\t        defineRefPropWarningGetter(props, displayName);\n\t      }\n\t    }\n\n\t    return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n\t  }\n\t}\n\n\tvar ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\n\tvar ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n\n\tfunction setCurrentlyValidatingElement$1(element) {\n\t  {\n\t    if (element) {\n\t      var owner = element._owner;\n\t      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n\t      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n\t    } else {\n\t      ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n\t    }\n\t  }\n\t}\n\n\tvar propTypesMisspellWarningShown;\n\n\t{\n\t  propTypesMisspellWarningShown = false;\n\t}\n\t/**\n\t * Verifies the object is a ReactElement.\n\t * See https://reactjs.org/docs/react-api.html#isvalidelement\n\t * @param {?object} object\n\t * @return {boolean} True if `object` is a ReactElement.\n\t * @final\n\t */\n\n\n\tfunction isValidElement(object) {\n\t  {\n\t    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n\t  }\n\t}\n\n\tfunction getDeclarationErrorAddendum() {\n\t  {\n\t    if (ReactCurrentOwner$1.current) {\n\t      var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);\n\n\t      if (name) {\n\t        return '\\n\\nCheck the render method of `' + name + '`.';\n\t      }\n\t    }\n\n\t    return '';\n\t  }\n\t}\n\n\tfunction getSourceInfoErrorAddendum(source) {\n\t  {\n\t    if (source !== undefined) {\n\t      var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n\t      var lineNumber = source.lineNumber;\n\t      return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n\t    }\n\n\t    return '';\n\t  }\n\t}\n\t/**\n\t * Warn if there's no key explicitly set on dynamic arrays of children or\n\t * object keys are not valid. This allows us to keep track of children between\n\t * updates.\n\t */\n\n\n\tvar ownerHasKeyUseWarning = {};\n\n\tfunction getCurrentComponentErrorInfo(parentType) {\n\t  {\n\t    var info = getDeclarationErrorAddendum();\n\n\t    if (!info) {\n\t      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n\n\t      if (parentName) {\n\t        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n\t      }\n\t    }\n\n\t    return info;\n\t  }\n\t}\n\t/**\n\t * Warn if the element doesn't have an explicit key assigned to it.\n\t * This element is in an array. The array could grow and shrink or be\n\t * reordered. All children that haven't already been validated are required to\n\t * have a \"key\" property assigned to it. Error statuses are cached so a warning\n\t * will only be shown once.\n\t *\n\t * @internal\n\t * @param {ReactElement} element Element that requires a key.\n\t * @param {*} parentType element's parent's type.\n\t */\n\n\n\tfunction validateExplicitKey(element, parentType) {\n\t  {\n\t    if (!element._store || element._store.validated || element.key != null) {\n\t      return;\n\t    }\n\n\t    element._store.validated = true;\n\t    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n\t    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n\t      return;\n\t    }\n\n\t    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n\t    // property, it may be the creator of the child that's responsible for\n\t    // assigning it a key.\n\n\t    var childOwner = '';\n\n\t    if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {\n\t      // Give the component that originally created this child.\n\t      childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n\t    }\n\n\t    setCurrentlyValidatingElement$1(element);\n\n\t    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n\n\t    setCurrentlyValidatingElement$1(null);\n\t  }\n\t}\n\t/**\n\t * Ensure that every element either is passed in a static location, in an\n\t * array with an explicit keys property defined, or in an object literal\n\t * with valid key property.\n\t *\n\t * @internal\n\t * @param {ReactNode} node Statically passed child of any type.\n\t * @param {*} parentType node's parent's type.\n\t */\n\n\n\tfunction validateChildKeys(node, parentType) {\n\t  {\n\t    if (typeof node !== 'object') {\n\t      return;\n\t    }\n\n\t    if (isArray(node)) {\n\t      for (var i = 0; i < node.length; i++) {\n\t        var child = node[i];\n\n\t        if (isValidElement(child)) {\n\t          validateExplicitKey(child, parentType);\n\t        }\n\t      }\n\t    } else if (isValidElement(node)) {\n\t      // This element was passed in a valid location.\n\t      if (node._store) {\n\t        node._store.validated = true;\n\t      }\n\t    } else if (node) {\n\t      var iteratorFn = getIteratorFn(node);\n\n\t      if (typeof iteratorFn === 'function') {\n\t        // Entry iterators used to provide implicit keys,\n\t        // but now we print a separate warning for them later.\n\t        if (iteratorFn !== node.entries) {\n\t          var iterator = iteratorFn.call(node);\n\t          var step;\n\n\t          while (!(step = iterator.next()).done) {\n\t            if (isValidElement(step.value)) {\n\t              validateExplicitKey(step.value, parentType);\n\t            }\n\t          }\n\t        }\n\t      }\n\t    }\n\t  }\n\t}\n\t/**\n\t * Given an element, validate that its props follow the propTypes definition,\n\t * provided by the type.\n\t *\n\t * @param {ReactElement} element\n\t */\n\n\n\tfunction validatePropTypes(element) {\n\t  {\n\t    var type = element.type;\n\n\t    if (type === null || type === undefined || typeof type === 'string') {\n\t      return;\n\t    }\n\n\t    var propTypes;\n\n\t    if (typeof type === 'function') {\n\t      propTypes = type.propTypes;\n\t    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n\t    // Inner props are checked in the reconciler.\n\t    type.$$typeof === REACT_MEMO_TYPE)) {\n\t      propTypes = type.propTypes;\n\t    } else {\n\t      return;\n\t    }\n\n\t    if (propTypes) {\n\t      // Intentionally inside to avoid triggering lazy initializers:\n\t      var name = getComponentNameFromType(type);\n\t      checkPropTypes(propTypes, element.props, 'prop', name, element);\n\t    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n\t      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n\n\t      var _name = getComponentNameFromType(type);\n\n\t      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');\n\t    }\n\n\t    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {\n\t      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\n\t    }\n\t  }\n\t}\n\t/**\n\t * Given a fragment, validate that it can only be provided with fragment props\n\t * @param {ReactElement} fragment\n\t */\n\n\n\tfunction validateFragmentProps(fragment) {\n\t  {\n\t    var keys = Object.keys(fragment.props);\n\n\t    for (var i = 0; i < keys.length; i++) {\n\t      var key = keys[i];\n\n\t      if (key !== 'children' && key !== 'key') {\n\t        setCurrentlyValidatingElement$1(fragment);\n\n\t        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n\t        setCurrentlyValidatingElement$1(null);\n\t        break;\n\t      }\n\t    }\n\n\t    if (fragment.ref !== null) {\n\t      setCurrentlyValidatingElement$1(fragment);\n\n\t      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n\n\t      setCurrentlyValidatingElement$1(null);\n\t    }\n\t  }\n\t}\n\n\tfunction jsxWithValidation(type, props, key, isStaticChildren, source, self) {\n\t  {\n\t    var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n\t    // succeed and there will likely be errors in render.\n\n\t    if (!validType) {\n\t      var info = '';\n\n\t      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n\t        info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n\t      }\n\n\t      var sourceInfo = getSourceInfoErrorAddendum(source);\n\n\t      if (sourceInfo) {\n\t        info += sourceInfo;\n\t      } else {\n\t        info += getDeclarationErrorAddendum();\n\t      }\n\n\t      var typeString;\n\n\t      if (type === null) {\n\t        typeString = 'null';\n\t      } else if (isArray(type)) {\n\t        typeString = 'array';\n\t      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n\t        typeString = \"<\" + (getComponentNameFromType(type.type) || 'Unknown') + \" />\";\n\t        info = ' Did you accidentally export a JSX literal instead of a component?';\n\t      } else {\n\t        typeString = typeof type;\n\t      }\n\n\t      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n\t    }\n\n\t    var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\n\t    // TODO: Drop this when these are no longer allowed as the type argument.\n\n\t    if (element == null) {\n\t      return element;\n\t    } // Skip key warning if the type isn't valid since our key validation logic\n\t    // doesn't expect a non-string/function type and can throw confusing errors.\n\t    // We don't want exception behavior to differ between dev and prod.\n\t    // (Rendering will throw with a helpful message and as soon as the type is\n\t    // fixed, the key warnings will appear.)\n\n\n\t    if (validType) {\n\t      var children = props.children;\n\n\t      if (children !== undefined) {\n\t        if (isStaticChildren) {\n\t          if (isArray(children)) {\n\t            for (var i = 0; i < children.length; i++) {\n\t              validateChildKeys(children[i], type);\n\t            }\n\n\t            if (Object.freeze) {\n\t              Object.freeze(children);\n\t            }\n\t          } else {\n\t            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\n\t          }\n\t        } else {\n\t          validateChildKeys(children, type);\n\t        }\n\t      }\n\t    }\n\n\t    if (type === REACT_FRAGMENT_TYPE) {\n\t      validateFragmentProps(element);\n\t    } else {\n\t      validatePropTypes(element);\n\t    }\n\n\t    return element;\n\t  }\n\t} // These two functions exist to still get child warnings in dev\n\t// even with the prod transform. This means that jsxDEV is purely\n\t// opt-in behavior for better messages but that we won't stop\n\t// giving you warnings if you use production apis.\n\n\tfunction jsxWithValidationStatic(type, props, key) {\n\t  {\n\t    return jsxWithValidation(type, props, key, true);\n\t  }\n\t}\n\tfunction jsxWithValidationDynamic(type, props, key) {\n\t  {\n\t    return jsxWithValidation(type, props, key, false);\n\t  }\n\t}\n\n\tvar jsx =  jsxWithValidationDynamic ; // we may want to special case jsxs internally to take advantage of static children.\n\t// for now we can ship identical prod functions\n\n\tvar jsxs =  jsxWithValidationStatic ;\n\n\treactJsxRuntime_development.Fragment = REACT_FRAGMENT_TYPE;\n\treactJsxRuntime_development.jsx = jsx;\n\treactJsxRuntime_development.jsxs = jsxs;\n\t  })();\n\t}\n\treturn reactJsxRuntime_development;\n}\n\n(function (module) {\n\n\tif (false) {} else {\n\t  module.exports = requireReactJsxRuntime_development();\n\t}\n} (jsxRuntime));\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar NODE_ENV = \"development\";\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nvar invariant_1 = invariant;\n\nconst MapContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nfunction useGoogleMap() {\n    invariant_1(!!react__WEBPACK_IMPORTED_MODULE_0__.useContext, 'useGoogleMap is React hook and requires React version 16.8+');\n    const map = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(MapContext);\n    invariant_1(!!map, 'useGoogleMap needs a GoogleMap available up in the tree');\n    return map;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction reduce(obj, fn, acc) {\n    return Object.keys(obj).reduce(function reducer(newAcc, key) {\n        return fn(newAcc, obj[key], key);\n    }, acc);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction forEach(obj, fn) {\n    Object.keys(obj).forEach((key) => {\n        return fn(obj[key], key);\n    });\n}\n\n/* global google */\nfunction applyUpdaterToNextProps(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nupdaterMap, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nprevProps, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nnextProps, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ninstance\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const map = {};\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const iter = (fn, key) => {\n        const nextValue = nextProps[key];\n        if (nextValue !== prevProps[key]) {\n            map[key] = nextValue;\n            fn(instance, nextValue);\n        }\n    };\n    forEach(updaterMap, iter);\n    return map;\n}\nfunction registerEvents(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nprops, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ninstance, eventMap) {\n    const registeredList = reduce(eventMap, function reducer(acc, googleEventName, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    onEventName) {\n        if (typeof props[onEventName] === 'function') {\n            acc.push(google.maps.event.addListener(instance, googleEventName, props[onEventName]));\n        }\n        return acc;\n    }, []);\n    return registeredList;\n}\nfunction unregisterEvent(registered) {\n    google.maps.event.removeListener(registered);\n}\nfunction unregisterEvents(events = []) {\n    events.forEach(unregisterEvent);\n}\nfunction applyUpdatersToPropsAndRegisterEvents({ updaterMap, eventMap, prevProps, nextProps, instance, }) {\n    const registeredEvents = registerEvents(nextProps, instance, eventMap);\n    applyUpdaterToNextProps(updaterMap, prevProps, nextProps, instance);\n    return registeredEvents;\n}\n\nconst eventMap$i = {\n    onDblClick: 'dblclick',\n    onDragEnd: 'dragend',\n    onDragStart: 'dragstart',\n    onMapTypeIdChanged: 'maptypeid_changed',\n    onMouseMove: 'mousemove',\n    onMouseOut: 'mouseout',\n    onMouseOver: 'mouseover',\n    onMouseDown: 'mousedown',\n    onMouseUp: 'mouseup',\n    onRightClick: 'rightclick',\n    onTilesLoaded: 'tilesloaded',\n    onBoundsChanged: 'bounds_changed',\n    onCenterChanged: 'center_changed',\n    onClick: 'click',\n    onDrag: 'drag',\n    onHeadingChanged: 'heading_changed',\n    onIdle: 'idle',\n    onProjectionChanged: 'projection_changed',\n    onResize: 'resize',\n    onTiltChanged: 'tilt_changed',\n    onZoomChanged: 'zoom_changed',\n};\nconst updaterMap$i = {\n    extraMapTypes(map, extra) {\n        extra.forEach(function forEachExtra(it, i) {\n            map.mapTypes.set(String(i), it);\n        });\n    },\n    center(map, center) {\n        map.setCenter(center);\n    },\n    clickableIcons(map, clickable) {\n        map.setClickableIcons(clickable);\n    },\n    heading(map, heading) {\n        map.setHeading(heading);\n    },\n    mapTypeId(map, mapTypeId) {\n        map.setMapTypeId(mapTypeId);\n    },\n    options(map, options) {\n        map.setOptions(options);\n    },\n    streetView(map, streetView) {\n        map.setStreetView(streetView);\n    },\n    tilt(map, tilt) {\n        map.setTilt(tilt);\n    },\n    zoom(map, zoom) {\n        map.setZoom(zoom);\n    },\n};\n// TODO: unfinished!\nfunction GoogleMapFunctional({ children, options, id, mapContainerStyle, mapContainerClassName, center, \n// clickableIcons,\n// extraMapTypes,\n// heading,\n// mapTypeId,\nonClick, onDblClick, onDrag, onDragEnd, onDragStart, onMouseMove, onMouseOut, onMouseOver, onMouseDown, onMouseUp, onRightClick, \n// onMapTypeIdChanged,\n// onTilesLoaded,\n// onBoundsChanged,\nonCenterChanged, \n// onHeadingChanged,\n// onIdle,\n// onProjectionChanged,\n// onResize,\n// onTiltChanged,\n// onZoomChanged,\nonLoad, onUnmount, }) {\n    const [map, setMap] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    // const [extraMapTypesListener, setExtraMapTypesListener] = useState<google.maps.MapsEventListener | null>(null)\n    const [centerChangedListener, setCenterChangedListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [dblclickListener, setDblclickListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [dragendListener, setDragendListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [dragstartListener, setDragstartListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [mousedownListener, setMousedownListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [mousemoveListener, setMousemoveListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [mouseoutListener, setMouseoutListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [mouseoverListener, setMouseoverListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [mouseupListener, setMouseupListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [rightclickListener, setRightclickListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [clickListener, setClickListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [dragListener, setDragListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    // Order does matter\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (options && map !== null) {\n            map.setOptions(options);\n        }\n    }, [map, options]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (map !== null && typeof center !== 'undefined') {\n            map.setCenter(center);\n        }\n    }, [map, center]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (map && onDblClick) {\n            if (dblclickListener !== null) {\n                google.maps.event.removeListener(dblclickListener);\n            }\n            setDblclickListener(google.maps.event.addListener(map, 'dblclick', onDblClick));\n        }\n    }, [onDblClick]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (map && onDragEnd) {\n            if (dragendListener !== null) {\n                google.maps.event.removeListener(dragendListener);\n            }\n            setDragendListener(google.maps.event.addListener(map, 'dragend', onDragEnd));\n        }\n    }, [onDragEnd]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (map && onDragStart) {\n            if (dragstartListener !== null) {\n                google.maps.event.removeListener(dragstartListener);\n            }\n            setDragstartListener(google.maps.event.addListener(map, 'dragstart', onDragStart));\n        }\n    }, [onDragStart]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (map && onMouseDown) {\n            if (mousedownListener !== null) {\n                google.maps.event.removeListener(mousedownListener);\n            }\n            setMousedownListener(google.maps.event.addListener(map, 'mousedown', onMouseDown));\n        }\n    }, [onMouseDown]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (map && onMouseMove) {\n            if (mousemoveListener !== null) {\n                google.maps.event.removeListener(mousemoveListener);\n            }\n            setMousemoveListener(google.maps.event.addListener(map, 'mousemove', onMouseMove));\n        }\n    }, [onMouseMove]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (map && onMouseOut) {\n            if (mouseoutListener !== null) {\n                google.maps.event.removeListener(mouseoutListener);\n            }\n            setMouseoutListener(google.maps.event.addListener(map, 'mouseout', onMouseOut));\n        }\n    }, [onMouseOut]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (map && onMouseOver) {\n            if (mouseoverListener !== null) {\n                google.maps.event.removeListener(mouseoverListener);\n            }\n            setMouseoverListener(google.maps.event.addListener(map, 'mouseover', onMouseOver));\n        }\n    }, [onMouseOver]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (map && onMouseUp) {\n            if (mouseupListener !== null) {\n                google.maps.event.removeListener(mouseupListener);\n            }\n            setMouseupListener(google.maps.event.addListener(map, 'mouseup', onMouseUp));\n        }\n    }, [onMouseUp]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (map && onRightClick) {\n            if (rightclickListener !== null) {\n                google.maps.event.removeListener(rightclickListener);\n            }\n            setRightclickListener(google.maps.event.addListener(map, 'rightclick', onRightClick));\n        }\n    }, [onRightClick]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (map && onClick) {\n            if (clickListener !== null) {\n                google.maps.event.removeListener(clickListener);\n            }\n            setClickListener(google.maps.event.addListener(map, 'click', onClick));\n        }\n    }, [onClick]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (map && onDrag) {\n            if (dragListener !== null) {\n                google.maps.event.removeListener(dragListener);\n            }\n            setDragListener(google.maps.event.addListener(map, 'drag', onDrag));\n        }\n    }, [onDrag]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (map && onCenterChanged) {\n            if (centerChangedListener !== null) {\n                google.maps.event.removeListener(centerChangedListener);\n            }\n            setCenterChangedListener(google.maps.event.addListener(map, 'center_changed', onCenterChanged));\n        }\n    }, [onClick]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        const map = ref.current === null\n            ? null\n            : new google.maps.Map(ref.current, options);\n        setMap(map);\n        if (map !== null && onLoad) {\n            onLoad(map);\n        }\n        return () => {\n            if (map !== null) {\n                if (onUnmount) {\n                    onUnmount(map);\n                }\n            }\n        };\n    }, []);\n    return (jsxRuntime.exports.jsx(\"div\", Object.assign({ id: id, ref: ref, style: mapContainerStyle, className: mapContainerClassName }, { children: jsxRuntime.exports.jsx(MapContext.Provider, Object.assign({ value: map }, { children: map !== null ? children : jsxRuntime.exports.jsx(jsxRuntime.exports.Fragment, {}) })) })));\n}\n(0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(GoogleMapFunctional);\nclass GoogleMap extends react__WEBPACK_IMPORTED_MODULE_0__.PureComponent {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            map: null,\n        };\n        this.registeredEvents = [];\n        this.mapRef = null;\n        this.getInstance = () => {\n            if (this.mapRef === null) {\n                return null;\n            }\n            return new google.maps.Map(this.mapRef, this.props.options);\n        };\n        this.panTo = (latLng) => {\n            const map = this.getInstance();\n            if (map) {\n                map.panTo(latLng);\n            }\n        };\n        this.setMapCallback = () => {\n            if (this.state.map !== null) {\n                if (this.props.onLoad) {\n                    this.props.onLoad(this.state.map);\n                }\n            }\n        };\n        this.getRef = (ref) => {\n            this.mapRef = ref;\n        };\n    }\n    componentDidMount() {\n        const map = this.getInstance();\n        this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({\n            updaterMap: updaterMap$i,\n            eventMap: eventMap$i,\n            prevProps: {},\n            nextProps: this.props,\n            instance: map,\n        });\n        this.setState(function setMap() {\n            return {\n                map,\n            };\n        }, this.setMapCallback);\n    }\n    componentDidUpdate(prevProps) {\n        if (this.state.map !== null) {\n            unregisterEvents(this.registeredEvents);\n            this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({\n                updaterMap: updaterMap$i,\n                eventMap: eventMap$i,\n                prevProps,\n                nextProps: this.props,\n                instance: this.state.map,\n            });\n        }\n    }\n    componentWillUnmount() {\n        if (this.state.map !== null) {\n            if (this.props.onUnmount) {\n                this.props.onUnmount(this.state.map);\n            }\n            unregisterEvents(this.registeredEvents);\n        }\n    }\n    render() {\n        return (jsxRuntime.exports.jsx(\"div\", Object.assign({ id: this.props.id, ref: this.getRef, style: this.props.mapContainerStyle, className: this.props.mapContainerClassName }, { children: jsxRuntime.exports.jsx(MapContext.Provider, Object.assign({ value: this.state.map }, { children: this.state.map !== null ? this.props.children : jsxRuntime.exports.jsx(jsxRuntime.exports.Fragment, {}) })) })));\n    }\n}\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __rest$1(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\n\nconst isBrowser = typeof document !== 'undefined';\n\nfunction injectScript({ url, id, nonce }) {\n    if (!isBrowser) {\n        return Promise.reject(new Error('document is undefined'));\n    }\n    return new Promise(function injectScriptCallback(resolve, reject) {\n        const existingScript = document.getElementById(id);\n        const windowWithGoogleMap = window;\n        if (existingScript) {\n            // Same script id/url: keep same script\n            const dataStateAttribute = existingScript.getAttribute('data-state');\n            if (existingScript.src === url && dataStateAttribute !== 'error') {\n                if (dataStateAttribute === 'ready') {\n                    return resolve(id);\n                }\n                else {\n                    const originalInitMap = windowWithGoogleMap.initMap;\n                    const originalErrorCallback = existingScript.onerror;\n                    windowWithGoogleMap.initMap = function initMap() {\n                        if (originalInitMap) {\n                            originalInitMap();\n                        }\n                        resolve(id);\n                    };\n                    existingScript.onerror = function (err) {\n                        if (originalErrorCallback) {\n                            originalErrorCallback(err);\n                        }\n                        reject(err);\n                    };\n                    return;\n                }\n            }\n            // Same script id, but either\n            // 1. requested URL is different\n            // 2. script failed to load\n            else {\n                existingScript.remove();\n            }\n        }\n        const script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.src = url;\n        script.id = id;\n        script.async = true;\n        script.nonce = nonce;\n        script.onerror = function onerror(err) {\n            script.setAttribute('data-state', 'error');\n            reject(err);\n        };\n        windowWithGoogleMap.initMap = function onload() {\n            script.setAttribute('data-state', 'ready');\n            resolve(id);\n        };\n        document.head.appendChild(script);\n    }).catch(err => {\n        console.error('injectScript error: ', err);\n        throw err;\n    });\n}\n\nfunction isGoogleFontStyle(element) {\n    // 'Roboto' or 'Google Sans Text' font download\n    const href = element.href;\n    if (href && (href.indexOf('https://fonts.googleapis.com/css?family=Roboto') === 0 ||\n        href.indexOf('https://fonts.googleapis.com/css?family=Google+Sans+Text') === 0)) {\n        return true;\n    }\n    // font style elements\n    if (element.tagName.toLowerCase() === 'style' &&\n        // @ts-ignore\n        element.styleSheet &&\n        // @ts-ignore\n        element.styleSheet.cssText &&\n        // @ts-ignore\n        element.styleSheet.cssText.replace('\\r\\n', '').indexOf('.gm-style') === 0) {\n        // @ts-ignore\n        element.styleSheet.cssText = '';\n        return true;\n    }\n    // font style elements for other browsers\n    if (element.tagName.toLowerCase() === 'style' &&\n        element.innerHTML &&\n        element.innerHTML.replace('\\r\\n', '').indexOf('.gm-style') === 0) {\n        element.innerHTML = '';\n        return true;\n    }\n    // when google tries to add empty style\n    if (element.tagName.toLowerCase() === 'style' &&\n        // @ts-ignore\n        !element.styleSheet &&\n        !element.innerHTML) {\n        return true;\n    }\n    return false;\n}\n// Preventing the Google Maps library from downloading an extra font\nfunction preventGoogleFonts() {\n    // we override these methods only for one particular head element\n    // default methods for other elements are not affected\n    const head = document.getElementsByTagName('head')[0];\n    const trueInsertBefore = head.insertBefore.bind(head);\n    // TODO: adding return before reflect solves the TS issue\n    // @ts-ignore\n    head.insertBefore = function insertBefore(newElement, referenceElement) {\n        if (!isGoogleFontStyle(newElement)) {\n            Reflect.apply(trueInsertBefore, head, [newElement, referenceElement]);\n        }\n    };\n    const trueAppend = head.appendChild.bind(head);\n    // TODO: adding return before reflect solves the TS issue\n    // @ts-ignore\n    head.appendChild = function appendChild(textNode) {\n        if (!isGoogleFontStyle(textNode)) {\n            Reflect.apply(trueAppend, head, [textNode]);\n        }\n    };\n}\n\nfunction makeLoadScriptUrl({ googleMapsApiKey, googleMapsClientId, version = 'weekly', language, region, libraries, channel, mapIds, authReferrerPolicy }) {\n    const params = [];\n    invariant_1((googleMapsApiKey && googleMapsClientId) || !(googleMapsApiKey && googleMapsClientId), 'You need to specify either googleMapsApiKey or googleMapsClientId for @react-google-maps/api load script to work. You cannot use both at the same time.');\n    if (googleMapsApiKey) {\n        params.push(`key=${googleMapsApiKey}`);\n    }\n    else if (googleMapsClientId) {\n        params.push(`client=${googleMapsClientId}`);\n    }\n    if (version) {\n        params.push(`v=${version}`);\n    }\n    if (language) {\n        params.push(`language=${language}`);\n    }\n    if (region) {\n        params.push(`region=${region}`);\n    }\n    if (libraries && libraries.length) {\n        params.push(`libraries=${libraries.sort().join(',')}`);\n    }\n    if (channel) {\n        params.push(`channel=${channel}`);\n    }\n    if (mapIds && mapIds.length) {\n        params.push(`map_ids=${mapIds.join(',')}`);\n    }\n    if (authReferrerPolicy) {\n        params.push(`auth_referrer_policy=${authReferrerPolicy}`);\n    }\n    params.push('callback=initMap');\n    return `https://maps.googleapis.com/maps/api/js?${params.join('&')}`;\n}\n\nlet cleaningUp = false;\nfunction DefaultLoadingElement() {\n    return jsxRuntime.exports.jsx(\"div\", { children: `Loading...` });\n}\nconst defaultLoadScriptProps = {\n    id: 'script-loader',\n    version: 'weekly',\n};\nclass LoadScript extends react__WEBPACK_IMPORTED_MODULE_0__.PureComponent {\n    constructor() {\n        super(...arguments);\n        this.check = (0,react__WEBPACK_IMPORTED_MODULE_0__.createRef)();\n        this.state = {\n            loaded: false,\n        };\n        this.cleanupCallback = () => {\n            // @ts-ignore\n            delete window.google.maps;\n            this.injectScript();\n        };\n        this.isCleaningUp = () => __awaiter(this, void 0, void 0, function* () {\n            function promiseCallback(resolve) {\n                if (!cleaningUp) {\n                    resolve();\n                }\n                else {\n                    if (isBrowser) {\n                        const timer = window.setInterval(function interval() {\n                            if (!cleaningUp) {\n                                window.clearInterval(timer);\n                                resolve();\n                            }\n                        }, 1);\n                    }\n                }\n                return;\n            }\n            return new Promise(promiseCallback);\n        });\n        this.cleanup = () => {\n            cleaningUp = true;\n            const script = document.getElementById(this.props.id);\n            if (script && script.parentNode) {\n                script.parentNode.removeChild(script);\n            }\n            Array.prototype.slice\n                .call(document.getElementsByTagName('script'))\n                .filter(function filter(script) {\n                return typeof script.src === 'string' && script.src.includes('maps.googleapis');\n            })\n                .forEach(function forEach(script) {\n                if (script.parentNode) {\n                    script.parentNode.removeChild(script);\n                }\n            });\n            Array.prototype.slice\n                .call(document.getElementsByTagName('link'))\n                .filter(function filter(link) {\n                return (link.href === 'https://fonts.googleapis.com/css?family=Roboto:300,400,500,700|Google+Sans');\n            })\n                .forEach(function forEach(link) {\n                if (link.parentNode) {\n                    link.parentNode.removeChild(link);\n                }\n            });\n            Array.prototype.slice\n                .call(document.getElementsByTagName('style'))\n                .filter(function filter(style) {\n                return (style.innerText !== undefined &&\n                    style.innerText.length > 0 &&\n                    style.innerText.includes('.gm-'));\n            })\n                .forEach(function forEach(style) {\n                if (style.parentNode) {\n                    style.parentNode.removeChild(style);\n                }\n            });\n        };\n        this.injectScript = () => {\n            if (this.props.preventGoogleFontsLoading) {\n                preventGoogleFonts();\n            }\n            invariant_1(!!this.props.id, 'LoadScript requires \"id\" prop to be a string: %s', this.props.id);\n            const injectScriptOptions = {\n                id: this.props.id,\n                nonce: this.props.nonce,\n                url: makeLoadScriptUrl(this.props),\n            };\n            injectScript(injectScriptOptions)\n                .then(() => {\n                if (this.props.onLoad) {\n                    this.props.onLoad();\n                }\n                this.setState(function setLoaded() {\n                    return {\n                        loaded: true,\n                    };\n                });\n                return;\n            })\n                .catch(err => {\n                if (this.props.onError) {\n                    this.props.onError(err);\n                }\n                console.error(`\n          There has been an Error with loading Google Maps API script, please check that you provided correct google API key (${this\n                    .props.googleMapsApiKey || '-'}) or Client ID (${this.props.googleMapsClientId ||\n                    '-'}) to <LoadScript />\n          Otherwise it is a Network issue.\n        `);\n            });\n        };\n    }\n    componentDidMount() {\n        if (isBrowser) {\n            if (window.google && window.google.maps && !cleaningUp) {\n                console.error('google api is already presented');\n                return;\n            }\n            this.isCleaningUp()\n                .then(this.injectScript)\n                .catch(function error(err) {\n                console.error('Error at injecting script after cleaning up: ', err);\n            });\n        }\n    }\n    componentDidUpdate(prevProps) {\n        if (this.props.libraries !== prevProps.libraries) {\n            console.warn('Performance warning! LoadScript has been reloaded unintentionally! You should not pass `libraries` prop as new array. Please keep an array of libraries as static class property for Components and PureComponents, or just a const variable outside of component, or somewhere in config files or ENV variables');\n        }\n        if (isBrowser && prevProps.language !== this.props.language) {\n            this.cleanup();\n            // TODO: refactor to use gDSFP maybe... wait for hooks refactoring.\n            // eslint-disable-next-line react/no-did-update-set-state\n            this.setState(function setLoaded() {\n                return {\n                    loaded: false,\n                };\n            }, this.cleanupCallback);\n        }\n    }\n    componentWillUnmount() {\n        if (isBrowser) {\n            this.cleanup();\n            const timeoutCallback = () => {\n                if (!this.check.current) {\n                    // @ts-ignore\n                    delete window.google;\n                    cleaningUp = false;\n                }\n            };\n            window.setTimeout(timeoutCallback, 1);\n            if (this.props.onUnmount) {\n                this.props.onUnmount();\n            }\n        }\n    }\n    render() {\n        return (jsxRuntime.exports.jsxs(jsxRuntime.exports.Fragment, { children: [jsxRuntime.exports.jsx(\"div\", { ref: this.check }), this.state.loaded\n                    ? this.props.children\n                    : this.props.loadingElement || jsxRuntime.exports.jsx(DefaultLoadingElement, {})] }));\n    }\n}\nLoadScript.defaultProps = defaultLoadScriptProps;\n\n/* eslint-disable filenames/match-regex */\nlet previouslyLoadedUrl;\nfunction useLoadScript({ id = defaultLoadScriptProps.id, version = defaultLoadScriptProps.version, nonce, googleMapsApiKey, googleMapsClientId, language, region, libraries, preventGoogleFontsLoading, channel, mapIds, authReferrerPolicy, }) {\n    const isMounted = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    const [isLoaded, setLoaded] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [loadError, setLoadError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(undefined);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function trackMountedState() {\n        isMounted.current = true;\n        return () => {\n            isMounted.current = false;\n        };\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function applyPreventGoogleFonts() {\n        if (isBrowser && preventGoogleFontsLoading) {\n            preventGoogleFonts();\n        }\n    }, [preventGoogleFontsLoading]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function validateLoadedState() {\n        if (isLoaded) {\n            invariant_1(!!window.google, 'useLoadScript was marked as loaded, but window.google is not present. Something went wrong.');\n        }\n    }, [isLoaded]);\n    const url = makeLoadScriptUrl({\n        version,\n        googleMapsApiKey,\n        googleMapsClientId,\n        language,\n        region,\n        libraries,\n        channel,\n        mapIds,\n        authReferrerPolicy\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function loadScriptAndModifyLoadedState() {\n        if (!isBrowser) {\n            return;\n        }\n        function setLoadedIfMounted() {\n            if (isMounted.current) {\n                setLoaded(true);\n                previouslyLoadedUrl = url;\n            }\n        }\n        if (window.google && window.google.maps && previouslyLoadedUrl === url) {\n            setLoadedIfMounted();\n            return;\n        }\n        injectScript({ id, url, nonce })\n            .then(setLoadedIfMounted)\n            .catch(function handleInjectError(err) {\n            if (isMounted.current) {\n                setLoadError(err);\n            }\n            console.warn(`\n        There has been an Error with loading Google Maps API script, please check that you provided correct google API key (${googleMapsApiKey ||\n                '-'}) or Client ID (${googleMapsClientId || '-'})\n        Otherwise it is a Network issue.\n      `);\n            console.error(err);\n        });\n    }, [id, url, nonce]);\n    const prevLibraries = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function checkPerformance() {\n        if (prevLibraries.current && libraries !== prevLibraries.current) {\n            console.warn('Performance warning! LoadScript has been reloaded unintentionally! You should not pass `libraries` prop as new array. Please keep an array of libraries as static class property for Components and PureComponents, or just a const variable outside of component, or somewhere in config files or ENV variables');\n        }\n        prevLibraries.current = libraries;\n    }, [libraries]);\n    return { isLoaded, loadError, url };\n}\n\nconst defaultLoadingElement = jsxRuntime.exports.jsx(DefaultLoadingElement, {});\nfunction LoadScriptNext(_a) {\n    var { loadingElement, onLoad, onError, onUnmount, children } = _a, hookOptions = __rest$1(_a, [\"loadingElement\", \"onLoad\", \"onError\", \"onUnmount\", \"children\"]);\n    const { isLoaded, loadError } = useLoadScript(hookOptions);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function handleOnLoad() {\n        if (isLoaded && typeof onLoad === 'function') {\n            onLoad();\n        }\n    }, [isLoaded, onLoad]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function handleOnError() {\n        if (loadError && typeof onError === 'function') {\n            onError(loadError);\n        }\n    }, [loadError, onError]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function handleOnUnmount() {\n        return () => {\n            if (onUnmount) {\n                onUnmount();\n            }\n        };\n    }, [onUnmount]);\n    return isLoaded ? children : loadingElement || defaultLoadingElement;\n}\nvar LoadScriptNext$1 = (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(LoadScriptNext);\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nvar fastDeepEqual$1 = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n\n/**\n * Copyright 2019 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at.\n *\n *      Http://www.apache.org/licenses/LICENSE-2.0.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst DEFAULT_ID = \"__googleMapsScriptId\";\n/**\n * The status of the [[Loader]].\n */\nvar LoaderStatus;\n(function (LoaderStatus) {\n    LoaderStatus[LoaderStatus[\"INITIALIZED\"] = 0] = \"INITIALIZED\";\n    LoaderStatus[LoaderStatus[\"LOADING\"] = 1] = \"LOADING\";\n    LoaderStatus[LoaderStatus[\"SUCCESS\"] = 2] = \"SUCCESS\";\n    LoaderStatus[LoaderStatus[\"FAILURE\"] = 3] = \"FAILURE\";\n})(LoaderStatus || (LoaderStatus = {}));\n/**\n * [[Loader]] makes it easier to add Google Maps JavaScript API to your application\n * dynamically using\n * [Promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\n * It works by dynamically creating and appending a script node to the the\n * document head and wrapping the callback function so as to return a promise.\n *\n * ```\n * const loader = new Loader({\n *   apiKey: \"\",\n *   version: \"weekly\",\n *   libraries: [\"places\"]\n * });\n *\n * loader.load().then((google) => {\n *   const map = new google.maps.Map(...)\n * })\n * ```\n */\nclass Loader {\n    /**\n     * Creates an instance of Loader using [[LoaderOptions]]. No defaults are set\n     * using this library, instead the defaults are set by the Google Maps\n     * JavaScript API server.\n     *\n     * ```\n     * const loader = Loader({apiKey, version: 'weekly', libraries: ['places']});\n     * ```\n     */\n    constructor({ apiKey, authReferrerPolicy, channel, client, id = DEFAULT_ID, language, libraries = [], mapIds, nonce, region, retries = 3, url = \"https://maps.googleapis.com/maps/api/js\", version, }) {\n        this.CALLBACK = \"__googleMapsCallback\";\n        this.callbacks = [];\n        this.done = false;\n        this.loading = false;\n        this.errors = [];\n        this.apiKey = apiKey;\n        this.authReferrerPolicy = authReferrerPolicy;\n        this.channel = channel;\n        this.client = client;\n        this.id = id || DEFAULT_ID; // Do not allow empty string\n        this.language = language;\n        this.libraries = libraries;\n        this.mapIds = mapIds;\n        this.nonce = nonce;\n        this.region = region;\n        this.retries = retries;\n        this.url = url;\n        this.version = version;\n        if (Loader.instance) {\n            if (!fastDeepEqual$1(this.options, Loader.instance.options)) {\n                throw new Error(`Loader must not be called again with different options. ${JSON.stringify(this.options)} !== ${JSON.stringify(Loader.instance.options)}`);\n            }\n            return Loader.instance;\n        }\n        Loader.instance = this;\n    }\n    get options() {\n        return {\n            version: this.version,\n            apiKey: this.apiKey,\n            channel: this.channel,\n            client: this.client,\n            id: this.id,\n            libraries: this.libraries,\n            language: this.language,\n            region: this.region,\n            mapIds: this.mapIds,\n            nonce: this.nonce,\n            url: this.url,\n            authReferrerPolicy: this.authReferrerPolicy,\n        };\n    }\n    get status() {\n        if (this.errors.length) {\n            return LoaderStatus.FAILURE;\n        }\n        if (this.done) {\n            return LoaderStatus.SUCCESS;\n        }\n        if (this.loading) {\n            return LoaderStatus.LOADING;\n        }\n        return LoaderStatus.INITIALIZED;\n    }\n    get failed() {\n        return this.done && !this.loading && this.errors.length >= this.retries + 1;\n    }\n    /**\n     * CreateUrl returns the Google Maps JavaScript API script url given the [[LoaderOptions]].\n     *\n     * @ignore\n     */\n    createUrl() {\n        let url = this.url;\n        url += `?callback=${this.CALLBACK}`;\n        if (this.apiKey) {\n            url += `&key=${this.apiKey}`;\n        }\n        if (this.channel) {\n            url += `&channel=${this.channel}`;\n        }\n        if (this.client) {\n            url += `&client=${this.client}`;\n        }\n        if (this.libraries.length > 0) {\n            url += `&libraries=${this.libraries.join(\",\")}`;\n        }\n        if (this.language) {\n            url += `&language=${this.language}`;\n        }\n        if (this.region) {\n            url += `&region=${this.region}`;\n        }\n        if (this.version) {\n            url += `&v=${this.version}`;\n        }\n        if (this.mapIds) {\n            url += `&map_ids=${this.mapIds.join(\",\")}`;\n        }\n        if (this.authReferrerPolicy) {\n            url += `&auth_referrer_policy=${this.authReferrerPolicy}`;\n        }\n        return url;\n    }\n    deleteScript() {\n        const script = document.getElementById(this.id);\n        if (script) {\n            script.remove();\n        }\n    }\n    /**\n     * Load the Google Maps JavaScript API script and return a Promise.\n     */\n    load() {\n        return this.loadPromise();\n    }\n    /**\n     * Load the Google Maps JavaScript API script and return a Promise.\n     *\n     * @ignore\n     */\n    loadPromise() {\n        return new Promise((resolve, reject) => {\n            this.loadCallback((err) => {\n                if (!err) {\n                    resolve(window.google);\n                }\n                else {\n                    reject(err.error);\n                }\n            });\n        });\n    }\n    /**\n     * Load the Google Maps JavaScript API script with a callback.\n     */\n    loadCallback(fn) {\n        this.callbacks.push(fn);\n        this.execute();\n    }\n    /**\n     * Set the script on document.\n     */\n    setScript() {\n        if (document.getElementById(this.id)) {\n            // TODO wrap onerror callback for cases where the script was loaded elsewhere\n            this.callback();\n            return;\n        }\n        const url = this.createUrl();\n        const script = document.createElement(\"script\");\n        script.id = this.id;\n        script.type = \"text/javascript\";\n        script.src = url;\n        script.onerror = this.loadErrorCallback.bind(this);\n        script.defer = true;\n        script.async = true;\n        if (this.nonce) {\n            script.nonce = this.nonce;\n        }\n        document.head.appendChild(script);\n    }\n    /**\n     * Reset the loader state.\n     */\n    reset() {\n        this.deleteScript();\n        this.done = false;\n        this.loading = false;\n        this.errors = [];\n        this.onerrorEvent = null;\n    }\n    resetIfRetryingFailed() {\n        if (this.failed) {\n            this.reset();\n        }\n    }\n    loadErrorCallback(e) {\n        this.errors.push(e);\n        if (this.errors.length <= this.retries) {\n            const delay = this.errors.length * Math.pow(2, this.errors.length);\n            console.log(`Failed to load Google Maps script, retrying in ${delay} ms.`);\n            setTimeout(() => {\n                this.deleteScript();\n                this.setScript();\n            }, delay);\n        }\n        else {\n            this.onerrorEvent = e;\n            this.callback();\n        }\n    }\n    setCallback() {\n        window.__googleMapsCallback = this.callback.bind(this);\n    }\n    callback() {\n        this.done = true;\n        this.loading = false;\n        this.callbacks.forEach((cb) => {\n            cb(this.onerrorEvent);\n        });\n        this.callbacks = [];\n    }\n    execute() {\n        this.resetIfRetryingFailed();\n        if (this.done) {\n            this.callback();\n        }\n        else {\n            // short circuit and warn if google.maps is already loaded\n            if (window.google && window.google.maps && window.google.maps.version) {\n                console.warn(\"Google Maps already loaded outside @googlemaps/js-api-loader.\" +\n                    \"This may result in undesirable behavior as options and script parameters may not match.\");\n                this.callback();\n                return;\n            }\n            if (this.loading) ;\n            else {\n                this.loading = true;\n                this.setCallback();\n                this.setScript();\n            }\n        }\n    }\n}\n\nfunction useJsApiLoader({ id = defaultLoadScriptProps.id, version = defaultLoadScriptProps.version, nonce, googleMapsApiKey, \n// googleMapsClientId,\nlanguage, region, libraries, preventGoogleFontsLoading, \n// channel,\nmapIds, authReferrerPolicy, }) {\n    const isMounted = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    const [isLoaded, setLoaded] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [loadError, setLoadError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(undefined);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function trackMountedState() {\n        isMounted.current = true;\n        return () => {\n            isMounted.current = false;\n        };\n    }, []);\n    const loader = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function memo() {\n        return new Loader({\n            id,\n            apiKey: googleMapsApiKey,\n            version,\n            libraries,\n            language,\n            region,\n            mapIds,\n            nonce,\n            authReferrerPolicy,\n        });\n    }, [id, googleMapsApiKey, version, libraries, language, region, mapIds, nonce, authReferrerPolicy]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function effect() {\n        if (isLoaded) {\n            return;\n        }\n        else {\n            loader.load().then(function then() {\n                if (isMounted.current)\n                    setLoaded(true);\n            })\n                .catch(function onrejected(error) {\n                setLoadError(error);\n            });\n        }\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function applyPreventGoogleFonts() {\n        if (isBrowser && preventGoogleFontsLoading) {\n            preventGoogleFonts();\n        }\n    }, [preventGoogleFontsLoading]);\n    const prevLibraries = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function effect() {\n        if (prevLibraries.current && libraries !== prevLibraries.current) {\n            console.warn('Performance warning! LoadScript has been reloaded unintentionally! You should not pass `libraries` prop as new array. Please keep an array of libraries as static class property for Components and PureComponents, or just a const variable outside of component, or somewhere in config files or ENV variables');\n        }\n        prevLibraries.current = libraries;\n    }, [libraries]);\n    return { isLoaded, loadError };\n}\n\nconst eventMap$h = {};\nconst updaterMap$h = {\n    options(instance, options) {\n        instance.setOptions(options);\n    },\n};\nfunction TrafficLayerFunctional({ options, onLoad, onUnmount }) {\n    const map = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(MapContext);\n    const [instance, setInstance] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    // Order does matter\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance !== null) {\n            instance.setMap(map);\n        }\n    }, [map]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (options && instance !== null) {\n            instance.setOptions(options);\n        }\n    }, [instance, options]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        const trafficLayer = new google.maps.TrafficLayer(Object.assign(Object.assign({}, (options || {})), { map }));\n        setInstance(trafficLayer);\n        if (onLoad) {\n            onLoad(trafficLayer);\n        }\n        return () => {\n            if (instance !== null) {\n                if (onUnmount) {\n                    onUnmount(instance);\n                }\n                instance.setMap(null);\n            }\n        };\n    }, []);\n    return null;\n}\nconst TrafficLayerF = (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(TrafficLayerFunctional);\nclass TrafficLayer extends react__WEBPACK_IMPORTED_MODULE_0__.PureComponent {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            trafficLayer: null,\n        };\n        this.setTrafficLayerCallback = () => {\n            if (this.state.trafficLayer !== null && this.props.onLoad) {\n                this.props.onLoad(this.state.trafficLayer);\n            }\n        };\n        this.registeredEvents = [];\n    }\n    componentDidMount() {\n        const trafficLayer = new google.maps.TrafficLayer(Object.assign(Object.assign({}, (this.props.options || {})), { map: this.context }));\n        this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({\n            updaterMap: updaterMap$h,\n            eventMap: eventMap$h,\n            prevProps: {},\n            nextProps: this.props,\n            instance: trafficLayer,\n        });\n        this.setState(function setTrafficLayer() {\n            return {\n                trafficLayer,\n            };\n        }, this.setTrafficLayerCallback);\n    }\n    componentDidUpdate(prevProps) {\n        if (this.state.trafficLayer !== null) {\n            unregisterEvents(this.registeredEvents);\n            this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({\n                updaterMap: updaterMap$h,\n                eventMap: eventMap$h,\n                prevProps,\n                nextProps: this.props,\n                instance: this.state.trafficLayer,\n            });\n        }\n    }\n    componentWillUnmount() {\n        if (this.state.trafficLayer !== null) {\n            if (this.props.onUnmount) {\n                this.props.onUnmount(this.state.trafficLayer);\n            }\n            unregisterEvents(this.registeredEvents);\n            // @ts-ignore\n            this.state.trafficLayer.setMap(null);\n        }\n    }\n    render() {\n        return null;\n    }\n}\nTrafficLayer.contextType = MapContext;\n\nfunction BicyclingLayerFunctional({ onLoad, onUnmount }) {\n    const map = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(MapContext);\n    const [instance, setInstance] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    // Order does matter\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance !== null) {\n            instance.setMap(map);\n        }\n    }, [map]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        const bicyclingLayer = new google.maps.BicyclingLayer();\n        setInstance(bicyclingLayer);\n        bicyclingLayer.setMap(map);\n        if (onLoad) {\n            onLoad(bicyclingLayer);\n        }\n        return () => {\n            if (bicyclingLayer !== null) {\n                if (onUnmount) {\n                    onUnmount(bicyclingLayer);\n                }\n                bicyclingLayer.setMap(null);\n            }\n        };\n    }, []);\n    return null;\n}\nconst BicyclingLayerF = (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(BicyclingLayerFunctional);\nclass BicyclingLayer extends react__WEBPACK_IMPORTED_MODULE_0__.PureComponent {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            bicyclingLayer: null,\n        };\n        this.setBicyclingLayerCallback = () => {\n            if (this.state.bicyclingLayer !== null) {\n                this.state.bicyclingLayer.setMap(this.context);\n                if (this.props.onLoad) {\n                    this.props.onLoad(this.state.bicyclingLayer);\n                }\n            }\n        };\n    }\n    componentDidMount() {\n        const bicyclingLayer = new google.maps.BicyclingLayer();\n        this.setState(() => {\n            return {\n                bicyclingLayer,\n            };\n        }, this.setBicyclingLayerCallback);\n    }\n    componentWillUnmount() {\n        if (this.state.bicyclingLayer !== null) {\n            if (this.props.onUnmount) {\n                this.props.onUnmount(this.state.bicyclingLayer);\n            }\n            this.state.bicyclingLayer.setMap(null);\n        }\n    }\n    render() {\n        return null;\n    }\n}\nBicyclingLayer.contextType = MapContext;\n\nfunction TransitLayerFunctional({ onLoad, onUnmount }) {\n    const map = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(MapContext);\n    const [instance, setInstance] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    // Order does matter\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance !== null) {\n            instance.setMap(map);\n        }\n    }, [map]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        const transitLayer = new google.maps.TransitLayer();\n        setInstance(transitLayer);\n        transitLayer.setMap(map);\n        if (onLoad) {\n            onLoad(transitLayer);\n        }\n        return () => {\n            if (instance !== null) {\n                if (onUnmount) {\n                    onUnmount(instance);\n                }\n                // @ts-ignore\n                this.state.transitLayer.setMap(null);\n            }\n        };\n    }, []);\n    return null;\n}\nconst TransitLayerF = (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(TransitLayerFunctional);\nclass TransitLayer extends react__WEBPACK_IMPORTED_MODULE_0__.PureComponent {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            transitLayer: null,\n        };\n        this.setTransitLayerCallback = () => {\n            if (this.state.transitLayer !== null) {\n                // @ts-ignore\n                this.state.transitLayer.setMap(this.context);\n                if (this.props.onLoad) {\n                    // @ts-ignore\n                    this.props.onLoad(this.state.transitLayer);\n                }\n            }\n        };\n    }\n    componentDidMount() {\n        const transitLayer = new google.maps.TransitLayer();\n        this.setState(function setTransitLayer() {\n            return {\n                transitLayer,\n            };\n        }, this.setTransitLayerCallback);\n    }\n    componentWillUnmount() {\n        if (this.state.transitLayer !== null) {\n            if (this.props.onUnmount) {\n                // @ts-ignore\n                this.props.onUnmount(this.state.transitLayer);\n            }\n            // @ts-ignore\n            this.state.transitLayer.setMap(null);\n        }\n    }\n    render() {\n        return null;\n    }\n}\nTransitLayer.contextType = MapContext;\n\n/* globals google */\nconst eventMap$g = {\n    onCircleComplete: 'circlecomplete',\n    onMarkerComplete: 'markercomplete',\n    onOverlayComplete: 'overlaycomplete',\n    onPolygonComplete: 'polygoncomplete',\n    onPolylineComplete: 'polylinecomplete',\n    onRectangleComplete: 'rectanglecomplete',\n};\nconst updaterMap$g = {\n    drawingMode(instance, drawingMode) {\n        instance.setDrawingMode(drawingMode);\n    },\n    options(instance, options) {\n        instance.setOptions(options);\n    },\n};\nfunction DrawingManagerFunctional({ options, drawingMode, onCircleComplete, onMarkerComplete, onOverlayComplete, onPolygonComplete, onPolylineComplete, onRectangleComplete, onLoad, onUnmount }) {\n    const map = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(MapContext);\n    const [instance, setInstance] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [circlecompleteListener, setCircleCompleteListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [markercompleteListener, setMarkerCompleteListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [overlaycompleteListener, setOverlayCompleteListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [polygoncompleteListener, setPolygonCompleteListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [polylinecompleteListener, setPolylineCompleteListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [rectanglecompleteListener, setRectangleCompleteListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    // Order does matter\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance !== null) {\n            instance.setMap(map);\n        }\n    }, [map]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (options && instance !== null) {\n            instance.setOptions(options);\n        }\n    }, [instance, options]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (drawingMode && instance !== null) {\n            instance.setDrawingMode(drawingMode);\n        }\n    }, [instance, drawingMode]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onCircleComplete) {\n            if (circlecompleteListener !== null) {\n                google.maps.event.removeListener(circlecompleteListener);\n            }\n            setCircleCompleteListener(google.maps.event.addListener(instance, 'circlecomplete', onCircleComplete));\n        }\n    }, [instance, onCircleComplete]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onMarkerComplete) {\n            if (markercompleteListener !== null) {\n                google.maps.event.removeListener(markercompleteListener);\n            }\n            setMarkerCompleteListener(google.maps.event.addListener(instance, 'markercomplete', onMarkerComplete));\n        }\n    }, [instance, onMarkerComplete]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onOverlayComplete) {\n            if (overlaycompleteListener !== null) {\n                google.maps.event.removeListener(overlaycompleteListener);\n            }\n            setOverlayCompleteListener(google.maps.event.addListener(instance, 'overlaycomplete', onOverlayComplete));\n        }\n    }, [instance, onOverlayComplete]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onPolygonComplete) {\n            if (polygoncompleteListener !== null) {\n                google.maps.event.removeListener(polygoncompleteListener);\n            }\n            setPolygonCompleteListener(google.maps.event.addListener(instance, 'polygoncomplete', onPolygonComplete));\n        }\n    }, [instance, onPolygonComplete]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onPolylineComplete) {\n            if (polylinecompleteListener !== null) {\n                google.maps.event.removeListener(polylinecompleteListener);\n            }\n            setPolylineCompleteListener(google.maps.event.addListener(instance, 'polylinecomplete', onPolylineComplete));\n        }\n    }, [instance, onPolylineComplete]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onRectangleComplete) {\n            if (rectanglecompleteListener !== null) {\n                google.maps.event.removeListener(rectanglecompleteListener);\n            }\n            setRectangleCompleteListener(google.maps.event.addListener(instance, 'rectanglecomplete', onRectangleComplete));\n        }\n    }, [instance, onRectangleComplete]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        invariant_1(!!google.maps.drawing, `Did you include prop libraries={['drawing']} in the URL? %s`, google.maps.drawing);\n        const drawingManager = new google.maps.drawing.DrawingManager(Object.assign(Object.assign({}, (options || {})), { map }));\n        if (drawingMode) {\n            drawingManager.setDrawingMode(drawingMode);\n        }\n        if (onCircleComplete) {\n            setCircleCompleteListener(google.maps.event.addListener(drawingManager, 'circlecomplete', onCircleComplete));\n        }\n        if (onMarkerComplete) {\n            setMarkerCompleteListener(google.maps.event.addListener(drawingManager, 'markercomplete', onMarkerComplete));\n        }\n        if (onOverlayComplete) {\n            setOverlayCompleteListener(google.maps.event.addListener(drawingManager, 'overlaycomplete', onOverlayComplete));\n        }\n        if (onPolygonComplete) {\n            setPolygonCompleteListener(google.maps.event.addListener(drawingManager, 'polygoncomplete', onPolygonComplete));\n        }\n        if (onPolylineComplete) {\n            setPolylineCompleteListener(google.maps.event.addListener(drawingManager, 'polylinecomplete', onPolylineComplete));\n        }\n        if (onRectangleComplete) {\n            setRectangleCompleteListener(google.maps.event.addListener(drawingManager, 'rectanglecomplete', onRectangleComplete));\n        }\n        setInstance(drawingManager);\n        if (onLoad) {\n            onLoad(drawingManager);\n        }\n        return () => {\n            if (instance !== null) {\n                if (circlecompleteListener) {\n                    google.maps.event.removeListener(circlecompleteListener);\n                }\n                if (markercompleteListener) {\n                    google.maps.event.removeListener(markercompleteListener);\n                }\n                if (overlaycompleteListener) {\n                    google.maps.event.removeListener(overlaycompleteListener);\n                }\n                if (polygoncompleteListener) {\n                    google.maps.event.removeListener(polygoncompleteListener);\n                }\n                if (polylinecompleteListener) {\n                    google.maps.event.removeListener(polylinecompleteListener);\n                }\n                if (rectanglecompleteListener) {\n                    google.maps.event.removeListener(rectanglecompleteListener);\n                }\n                if (onUnmount) {\n                    onUnmount(instance);\n                }\n                instance.setMap(null);\n            }\n        };\n    }, []);\n    return null;\n}\nconst DrawingManagerF = (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(DrawingManagerFunctional);\nclass DrawingManager extends react__WEBPACK_IMPORTED_MODULE_0__.PureComponent {\n    constructor(props) {\n        super(props);\n        this.registeredEvents = [];\n        this.state = {\n            drawingManager: null,\n        };\n        this.setDrawingManagerCallback = () => {\n            if (this.state.drawingManager !== null && this.props.onLoad) {\n                this.props.onLoad(this.state.drawingManager);\n            }\n        };\n        invariant_1(!!google.maps.drawing, `Did you include prop libraries={['drawing']} in the URL? %s`, google.maps.drawing);\n    }\n    componentDidMount() {\n        const drawingManager = new google.maps.drawing.DrawingManager(Object.assign(Object.assign({}, (this.props.options || {})), { map: this.context }));\n        this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({\n            updaterMap: updaterMap$g,\n            eventMap: eventMap$g,\n            prevProps: {},\n            nextProps: this.props,\n            instance: drawingManager,\n        });\n        this.setState(function setDrawingManager() {\n            return {\n                drawingManager,\n            };\n        }, this.setDrawingManagerCallback);\n    }\n    componentDidUpdate(prevProps) {\n        if (this.state.drawingManager !== null) {\n            unregisterEvents(this.registeredEvents);\n            this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({\n                updaterMap: updaterMap$g,\n                eventMap: eventMap$g,\n                prevProps,\n                nextProps: this.props,\n                instance: this.state.drawingManager,\n            });\n        }\n    }\n    componentWillUnmount() {\n        if (this.state.drawingManager !== null) {\n            if (this.props.onUnmount) {\n                this.props.onUnmount(this.state.drawingManager);\n            }\n            unregisterEvents(this.registeredEvents);\n            this.state.drawingManager.setMap(null);\n        }\n    }\n    render() {\n        return null;\n    }\n}\nDrawingManager.contextType = MapContext;\n\nconst eventMap$f = {\n    onAnimationChanged: 'animation_changed',\n    onClick: 'click',\n    onClickableChanged: 'clickable_changed',\n    onCursorChanged: 'cursor_changed',\n    onDblClick: 'dblclick',\n    onDrag: 'drag',\n    onDragEnd: 'dragend',\n    onDraggableChanged: 'draggable_changed',\n    onDragStart: 'dragstart',\n    onFlatChanged: 'flat_changed',\n    onIconChanged: 'icon_changed',\n    onMouseDown: 'mousedown',\n    onMouseOut: 'mouseout',\n    onMouseOver: 'mouseover',\n    onMouseUp: 'mouseup',\n    onPositionChanged: 'position_changed',\n    onRightClick: 'rightclick',\n    onShapeChanged: 'shape_changed',\n    onTitleChanged: 'title_changed',\n    onVisibleChanged: 'visible_changed',\n    onZindexChanged: 'zindex_changed',\n};\nconst updaterMap$f = {\n    animation(instance, animation) {\n        instance.setAnimation(animation);\n    },\n    clickable(instance, clickable) {\n        instance.setClickable(clickable);\n    },\n    cursor(instance, cursor) {\n        instance.setCursor(cursor);\n    },\n    draggable(instance, draggable) {\n        instance.setDraggable(draggable);\n    },\n    icon(instance, icon) {\n        instance.setIcon(icon);\n    },\n    label(instance, label) {\n        instance.setLabel(label);\n    },\n    map(instance, map) {\n        instance.setMap(map);\n    },\n    opacity(instance, opacity) {\n        instance.setOpacity(opacity);\n    },\n    options(instance, options) {\n        instance.setOptions(options);\n    },\n    position(instance, position) {\n        instance.setPosition(position);\n    },\n    shape(instance, shape) {\n        instance.setShape(shape);\n    },\n    title(instance, title) {\n        instance.setTitle(title);\n    },\n    visible(instance, visible) {\n        instance.setVisible(visible);\n    },\n    zIndex(instance, zIndex) {\n        instance.setZIndex(zIndex);\n    },\n};\nconst defaultOptions$5 = {};\nfunction MarkerFunctional({ position, options, clusterer, noClustererRedraw, children, draggable, visible, animation, clickable, cursor, icon, label, opacity, shape, title, zIndex, onClick, onDblClick, onDrag, onDragEnd, onDragStart, onMouseOut, onMouseOver, onMouseUp, onMouseDown, onRightClick, onClickableChanged, onCursorChanged, onAnimationChanged, onDraggableChanged, onFlatChanged, onIconChanged, onPositionChanged, onShapeChanged, onTitleChanged, onVisibleChanged, onZindexChanged, onLoad, onUnmount }) {\n    const map = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(MapContext);\n    const [instance, setInstance] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [dblclickListener, setDblclickListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [dragendListener, setDragendListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [dragstartListener, setDragstartListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [mousedownListener, setMousedownListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [mouseoutListener, setMouseoutListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [mouseoverListener, setMouseoverListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [mouseupListener, setMouseupListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [rightclickListener, setRightclickListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [clickListener, setClickListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [dragListener, setDragListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [clickableChangedListener, setClickableChangedListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [cursorChangedListener, setCursorChangedListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [animationChangedListener, setAnimationChangedListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [draggableChangedListener, setDraggableChangedListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [flatChangedListener, setFlatChangedListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [iconChangedListener, setIconChangedListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [positionChangedListener, setPositionChangedListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [shapeChangedListener, setShapeChangedListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [titleChangedListener, setTitleChangedListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [visibleChangedListener, setVisibleChangedListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [zIndexChangedListener, setZindexChangedListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    // Order does matter\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance !== null) {\n            instance.setMap(map);\n        }\n    }, [map]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (typeof options !== 'undefined' && instance !== null) {\n            instance.setOptions(options);\n        }\n    }, [instance, options]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (typeof draggable !== 'undefined' && instance !== null) {\n            instance.setDraggable(draggable);\n        }\n    }, [instance, draggable]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (position && instance !== null) {\n            instance.setPosition(position);\n        }\n    }, [instance, position]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (typeof visible !== 'undefined' && instance !== null) {\n            instance.setVisible(visible);\n        }\n    }, [instance, visible]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (animation && instance !== null) {\n            instance.setAnimation(animation);\n        }\n    }, [instance, animation]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onDblClick) {\n            if (dblclickListener !== null) {\n                google.maps.event.removeListener(dblclickListener);\n            }\n            setDblclickListener(google.maps.event.addListener(instance, 'dblclick', onDblClick));\n        }\n    }, [onDblClick]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onDragEnd) {\n            if (dragendListener !== null) {\n                google.maps.event.removeListener(dragendListener);\n            }\n            setDragendListener(google.maps.event.addListener(instance, 'dragend', onDragEnd));\n        }\n    }, [onDragEnd]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onDragStart) {\n            if (dragstartListener !== null) {\n                google.maps.event.removeListener(dragstartListener);\n            }\n            setDragstartListener(google.maps.event.addListener(instance, 'dragstart', onDragStart));\n        }\n    }, [onDragStart]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onMouseDown) {\n            if (mousedownListener !== null) {\n                google.maps.event.removeListener(mousedownListener);\n            }\n            setMousedownListener(google.maps.event.addListener(instance, 'mousedown', onMouseDown));\n        }\n    }, [onMouseDown]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onMouseOut) {\n            if (mouseoutListener !== null) {\n                google.maps.event.removeListener(mouseoutListener);\n            }\n            setMouseoutListener(google.maps.event.addListener(instance, 'mouseout', onMouseOut));\n        }\n    }, [onMouseOut]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onMouseOver) {\n            if (mouseoverListener !== null) {\n                google.maps.event.removeListener(mouseoverListener);\n            }\n            setMouseoverListener(google.maps.event.addListener(instance, 'mouseover', onMouseOver));\n        }\n    }, [onMouseOver]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onMouseUp) {\n            if (mouseupListener !== null) {\n                google.maps.event.removeListener(mouseupListener);\n            }\n            setMouseupListener(google.maps.event.addListener(instance, 'mouseup', onMouseUp));\n        }\n    }, [onMouseUp]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onRightClick) {\n            if (rightclickListener !== null) {\n                google.maps.event.removeListener(rightclickListener);\n            }\n            setRightclickListener(google.maps.event.addListener(instance, 'rightclick', onRightClick));\n        }\n    }, [onRightClick]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onClick) {\n            if (clickListener !== null) {\n                google.maps.event.removeListener(clickListener);\n            }\n            setClickListener(google.maps.event.addListener(instance, 'click', onClick));\n        }\n    }, [onClick]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onDrag) {\n            if (dragListener !== null) {\n                google.maps.event.removeListener(dragListener);\n            }\n            setDragListener(google.maps.event.addListener(instance, 'drag', onDrag));\n        }\n    }, [onDrag]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onClickableChanged) {\n            if (clickableChangedListener !== null) {\n                google.maps.event.removeListener(clickableChangedListener);\n            }\n            setClickableChangedListener(google.maps.event.addListener(instance, 'clickable_changed', onClickableChanged));\n        }\n    }, [onClickableChanged]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onCursorChanged) {\n            if (cursorChangedListener !== null) {\n                google.maps.event.removeListener(cursorChangedListener);\n            }\n            setCursorChangedListener(google.maps.event.addListener(instance, 'cursor_changed', onCursorChanged));\n        }\n    }, [onCursorChanged]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onAnimationChanged) {\n            if (animationChangedListener !== null) {\n                google.maps.event.removeListener(animationChangedListener);\n            }\n            setAnimationChangedListener(google.maps.event.addListener(instance, 'animation_changed', onAnimationChanged));\n        }\n    }, [onAnimationChanged]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onDraggableChanged) {\n            if (draggableChangedListener !== null) {\n                google.maps.event.removeListener(draggableChangedListener);\n            }\n            setDraggableChangedListener(google.maps.event.addListener(instance, 'draggable_changed', onDraggableChanged));\n        }\n    }, [onDraggableChanged]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onFlatChanged) {\n            if (flatChangedListener !== null) {\n                google.maps.event.removeListener(flatChangedListener);\n            }\n            setFlatChangedListener(google.maps.event.addListener(instance, 'flat_changed', onFlatChanged));\n        }\n    }, [onFlatChanged]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onIconChanged) {\n            if (iconChangedListener !== null) {\n                google.maps.event.removeListener(iconChangedListener);\n            }\n            setIconChangedListener(google.maps.event.addListener(instance, 'icon_changed', onIconChanged));\n        }\n    }, [onIconChanged]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onPositionChanged) {\n            if (positionChangedListener !== null) {\n                google.maps.event.removeListener(positionChangedListener);\n            }\n            setPositionChangedListener(google.maps.event.addListener(instance, 'position_changed', onPositionChanged));\n        }\n    }, [onPositionChanged]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onShapeChanged) {\n            if (shapeChangedListener !== null) {\n                google.maps.event.removeListener(shapeChangedListener);\n            }\n            setShapeChangedListener(google.maps.event.addListener(instance, 'shape_changed', onShapeChanged));\n        }\n    }, [onShapeChanged]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onTitleChanged) {\n            if (titleChangedListener !== null) {\n                google.maps.event.removeListener(titleChangedListener);\n            }\n            setTitleChangedListener(google.maps.event.addListener(instance, 'title_changed', onTitleChanged));\n        }\n    }, [onTitleChanged]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onVisibleChanged) {\n            if (visibleChangedListener !== null) {\n                google.maps.event.removeListener(visibleChangedListener);\n            }\n            setVisibleChangedListener(google.maps.event.addListener(instance, 'visible_changed', onVisibleChanged));\n        }\n    }, [onVisibleChanged]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onZindexChanged) {\n            if (zIndexChangedListener !== null) {\n                google.maps.event.removeListener(zIndexChangedListener);\n            }\n            setZindexChangedListener(google.maps.event.addListener(instance, 'zindex_changed', onZindexChanged));\n        }\n    }, [onZindexChanged]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        const markerOptions = Object.assign(Object.assign(Object.assign({}, (options || defaultOptions$5)), (clusterer ? defaultOptions$5 : { map })), { position: position });\n        const marker = new google.maps.Marker(markerOptions);\n        if (clusterer) {\n            clusterer.addMarker(marker, !!noClustererRedraw);\n        }\n        else {\n            marker.setMap(map);\n        }\n        if (position) {\n            marker.setPosition(position);\n        }\n        if (typeof visible !== 'undefined') {\n            marker.setVisible(visible);\n        }\n        if (typeof draggable !== 'undefined') {\n            marker.setDraggable(draggable);\n        }\n        if (typeof clickable !== 'undefined') {\n            marker.setClickable(clickable);\n        }\n        if (typeof cursor === 'string') {\n            marker.setCursor(cursor);\n        }\n        if (icon) {\n            marker.setIcon(icon);\n        }\n        if (typeof label !== 'undefined') {\n            marker.setLabel(label);\n        }\n        if (typeof opacity !== 'undefined') {\n            marker.setOpacity(opacity);\n        }\n        if (shape) {\n            marker.setShape(shape);\n        }\n        if (typeof title === 'string') {\n            marker.setTitle(title);\n        }\n        if (typeof zIndex === 'number') {\n            marker.setZIndex(zIndex);\n        }\n        if (onDblClick) {\n            setDblclickListener(google.maps.event.addListener(marker, 'dblclick', onDblClick));\n        }\n        if (onDragEnd) {\n            setDragendListener(google.maps.event.addListener(marker, 'dragend', onDragEnd));\n        }\n        if (onDragStart) {\n            setDragstartListener(google.maps.event.addListener(marker, 'dragstart', onDragStart));\n        }\n        if (onMouseDown) {\n            setMousedownListener(google.maps.event.addListener(marker, 'mousedown', onMouseDown));\n        }\n        if (onMouseOut) {\n            setMouseoutListener(google.maps.event.addListener(marker, 'mouseout', onMouseOut));\n        }\n        if (onMouseOver) {\n            setMouseoverListener(google.maps.event.addListener(marker, 'mouseover', onMouseOver));\n        }\n        if (onMouseUp) {\n            setMouseupListener(google.maps.event.addListener(marker, 'mouseup', onMouseUp));\n        }\n        if (onRightClick) {\n            setRightclickListener(google.maps.event.addListener(marker, 'rightclick', onRightClick));\n        }\n        if (onClick) {\n            setClickListener(google.maps.event.addListener(marker, 'click', onClick));\n        }\n        if (onDrag) {\n            setDragListener(google.maps.event.addListener(marker, 'drag', onDrag));\n        }\n        if (onClickableChanged) {\n            setClickableChangedListener(google.maps.event.addListener(marker, 'clickable_changed', onClickableChanged));\n        }\n        if (onCursorChanged) {\n            setCursorChangedListener(google.maps.event.addListener(marker, 'cursor_changed', onCursorChanged));\n        }\n        if (onAnimationChanged) {\n            setAnimationChangedListener(google.maps.event.addListener(marker, 'animation_changed', onAnimationChanged));\n        }\n        if (onDraggableChanged) {\n            setDraggableChangedListener(google.maps.event.addListener(marker, 'draggable_changed', onDraggableChanged));\n        }\n        if (onFlatChanged) {\n            setFlatChangedListener(google.maps.event.addListener(marker, 'flat_changed', onFlatChanged));\n        }\n        if (onIconChanged) {\n            setIconChangedListener(google.maps.event.addListener(marker, 'icon_changed', onIconChanged));\n        }\n        if (onPositionChanged) {\n            setPositionChangedListener(google.maps.event.addListener(marker, 'position_changed', onPositionChanged));\n        }\n        if (onShapeChanged) {\n            setShapeChangedListener(google.maps.event.addListener(marker, 'shape_changed', onShapeChanged));\n        }\n        if (onTitleChanged) {\n            setTitleChangedListener(google.maps.event.addListener(marker, 'title_changed', onTitleChanged));\n        }\n        if (onVisibleChanged) {\n            setVisibleChangedListener(google.maps.event.addListener(marker, 'visible_changed', onVisibleChanged));\n        }\n        if (onZindexChanged) {\n            setZindexChangedListener(google.maps.event.addListener(marker, 'zindex_changed', onZindexChanged));\n        }\n        setInstance(marker);\n        if (onLoad) {\n            onLoad(marker);\n        }\n        return () => {\n            if (dblclickListener !== null) {\n                google.maps.event.removeListener(dblclickListener);\n            }\n            if (dragendListener !== null) {\n                google.maps.event.removeListener(dragendListener);\n            }\n            if (dragstartListener !== null) {\n                google.maps.event.removeListener(dragstartListener);\n            }\n            if (mousedownListener !== null) {\n                google.maps.event.removeListener(mousedownListener);\n            }\n            if (mouseoutListener !== null) {\n                google.maps.event.removeListener(mouseoutListener);\n            }\n            if (mouseoverListener !== null) {\n                google.maps.event.removeListener(mouseoverListener);\n            }\n            if (mouseupListener !== null) {\n                google.maps.event.removeListener(mouseupListener);\n            }\n            if (rightclickListener !== null) {\n                google.maps.event.removeListener(rightclickListener);\n            }\n            if (clickListener !== null) {\n                google.maps.event.removeListener(clickListener);\n            }\n            if (clickableChangedListener !== null) {\n                google.maps.event.removeListener(clickableChangedListener);\n            }\n            if (cursorChangedListener !== null) {\n                google.maps.event.removeListener(cursorChangedListener);\n            }\n            if (animationChangedListener !== null) {\n                google.maps.event.removeListener(animationChangedListener);\n            }\n            if (draggableChangedListener !== null) {\n                google.maps.event.removeListener(draggableChangedListener);\n            }\n            if (flatChangedListener !== null) {\n                google.maps.event.removeListener(flatChangedListener);\n            }\n            if (iconChangedListener !== null) {\n                google.maps.event.removeListener(iconChangedListener);\n            }\n            if (positionChangedListener !== null) {\n                google.maps.event.removeListener(positionChangedListener);\n            }\n            if (titleChangedListener !== null) {\n                google.maps.event.removeListener(titleChangedListener);\n            }\n            if (visibleChangedListener !== null) {\n                google.maps.event.removeListener(visibleChangedListener);\n            }\n            if (zIndexChangedListener !== null) {\n                google.maps.event.removeListener(zIndexChangedListener);\n            }\n            if (onUnmount) {\n                onUnmount(marker);\n            }\n            if (clusterer) {\n                clusterer.removeMarker(marker, !!noClustererRedraw);\n            }\n            else if (marker) {\n                marker.setMap(null);\n            }\n        };\n    }, []);\n    const chx = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return children\n            ? react__WEBPACK_IMPORTED_MODULE_0__.Children.map(children, child => {\n                if (!(0,react__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(child)) {\n                    return child;\n                }\n                const elementChild = child;\n                return (0,react__WEBPACK_IMPORTED_MODULE_0__.cloneElement)(elementChild, { anchor: instance });\n            })\n            : null;\n    }, [children, instance]);\n    return jsxRuntime.exports.jsx(jsxRuntime.exports.Fragment, { children: chx }) || null;\n}\nconst MarkerF = (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(MarkerFunctional);\nclass Marker extends react__WEBPACK_IMPORTED_MODULE_0__.PureComponent {\n    constructor() {\n        super(...arguments);\n        this.registeredEvents = [];\n    }\n    componentDidMount() {\n        const markerOptions = Object.assign(Object.assign(Object.assign({}, (this.props.options || defaultOptions$5)), (this.props.clusterer ? defaultOptions$5 : { map: this.context })), { position: this.props.position });\n        // Unfortunately we can't just do this in the contstructor, because the\n        // `MapContext` might not be filled in yet.\n        this.marker = new google.maps.Marker(markerOptions);\n        if (this.props.clusterer) {\n            this.props.clusterer.addMarker(this.marker, !!this.props.noClustererRedraw);\n        }\n        else {\n            this.marker.setMap(this.context);\n        }\n        this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({\n            updaterMap: updaterMap$f,\n            eventMap: eventMap$f,\n            prevProps: {},\n            nextProps: this.props,\n            instance: this.marker,\n        });\n        if (this.props.onLoad) {\n            this.props.onLoad(this.marker);\n        }\n    }\n    componentDidUpdate(prevProps) {\n        if (this.marker) {\n            unregisterEvents(this.registeredEvents);\n            this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({\n                updaterMap: updaterMap$f,\n                eventMap: eventMap$f,\n                prevProps,\n                nextProps: this.props,\n                instance: this.marker,\n            });\n        }\n    }\n    componentWillUnmount() {\n        if (this.marker) {\n            if (this.props.onUnmount) {\n                this.props.onUnmount(this.marker);\n            }\n            unregisterEvents(this.registeredEvents);\n            if (this.props.clusterer) {\n                this.props.clusterer.removeMarker(this.marker, !!this.props.noClustererRedraw);\n            }\n            else {\n                this.marker && this.marker.setMap(null);\n            }\n        }\n    }\n    render() {\n        let children = null;\n        if (this.props.children) {\n            children = react__WEBPACK_IMPORTED_MODULE_0__.Children.map(this.props.children, child => {\n                if (!(0,react__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(child)) {\n                    return child;\n                }\n                let elementChild = child;\n                return (0,react__WEBPACK_IMPORTED_MODULE_0__.cloneElement)(elementChild, { anchor: this.marker });\n            });\n        }\n        return children || null;\n    }\n}\nMarker.contextType = MapContext;\n\nvar ClusterIcon = /** @class */ (function () {\n    function ClusterIcon(cluster, styles) {\n        cluster.getClusterer().extend(ClusterIcon, google.maps.OverlayView);\n        this.cluster = cluster;\n        this.clusterClassName = this.cluster.getClusterer().getClusterClass();\n        this.className = this.clusterClassName;\n        this.styles = styles;\n        this.center = undefined;\n        this.div = null;\n        this.sums = null;\n        this.visible = false;\n        this.boundsChangedListener = null;\n        this.url = '';\n        this.height = 0;\n        this.width = 0;\n        this.anchorText = [0, 0];\n        this.anchorIcon = [0, 0];\n        this.textColor = 'black';\n        this.textSize = 11;\n        this.textDecoration = 'none';\n        this.fontWeight = 'bold';\n        this.fontStyle = 'normal';\n        this.fontFamily = 'Arial,sans-serif';\n        this.backgroundPosition = '0 0';\n        this.cMouseDownInCluster = null;\n        this.cDraggingMapByCluster = null;\n        this.timeOut = null;\n        this.setMap(cluster.getMap()); // Note: this causes onAdd to be called\n        this.onBoundsChanged = this.onBoundsChanged.bind(this);\n        this.onMouseDown = this.onMouseDown.bind(this);\n        this.onClick = this.onClick.bind(this);\n        this.onMouseOver = this.onMouseOver.bind(this);\n        this.onMouseOut = this.onMouseOut.bind(this);\n        this.onAdd = this.onAdd.bind(this);\n        this.onRemove = this.onRemove.bind(this);\n        this.draw = this.draw.bind(this);\n        this.hide = this.hide.bind(this);\n        this.show = this.show.bind(this);\n        this.useStyle = this.useStyle.bind(this);\n        this.setCenter = this.setCenter.bind(this);\n        this.getPosFromLatLng = this.getPosFromLatLng.bind(this);\n    }\n    ClusterIcon.prototype.onBoundsChanged = function () {\n        this.cDraggingMapByCluster = this.cMouseDownInCluster;\n    };\n    ClusterIcon.prototype.onMouseDown = function () {\n        this.cMouseDownInCluster = true;\n        this.cDraggingMapByCluster = false;\n    };\n    ClusterIcon.prototype.onClick = function (event) {\n        this.cMouseDownInCluster = false;\n        if (!this.cDraggingMapByCluster) {\n            var markerClusterer_1 = this.cluster.getClusterer();\n            /**\n             * This event is fired when a cluster marker is clicked.\n             * @name MarkerClusterer#click\n             * @param {Cluster} c The cluster that was clicked.\n             * @event\n             */\n            google.maps.event.trigger(markerClusterer_1, 'click', this.cluster);\n            google.maps.event.trigger(markerClusterer_1, 'clusterclick', this.cluster); // deprecated name\n            // The default click handler follows. Disable it by setting\n            // the zoomOnClick property to false.\n            if (markerClusterer_1.getZoomOnClick()) {\n                // Zoom into the cluster.\n                var maxZoom_1 = markerClusterer_1.getMaxZoom();\n                var bounds_1 = this.cluster.getBounds();\n                var map = markerClusterer_1.getMap();\n                if (map !== null && 'fitBounds' in map) {\n                    map.fitBounds(bounds_1);\n                }\n                // There is a fix for Issue 170 here:\n                this.timeOut = window.setTimeout(function () {\n                    var map = markerClusterer_1.getMap();\n                    if (map !== null) {\n                        if ('fitBounds' in map) {\n                            map.fitBounds(bounds_1);\n                        }\n                        var zoom = map.getZoom() || 0;\n                        // Don't zoom beyond the max zoom level\n                        if (maxZoom_1 !== null &&\n                            zoom > maxZoom_1) {\n                            map.setZoom(maxZoom_1 + 1);\n                        }\n                    }\n                }, 100);\n            }\n            // Prevent event propagation to the map:\n            event.cancelBubble = true;\n            if (event.stopPropagation) {\n                event.stopPropagation();\n            }\n        }\n    };\n    ClusterIcon.prototype.onMouseOver = function () {\n        /**\n         * This event is fired when the mouse moves over a cluster marker.\n         * @name MarkerClusterer#mouseover\n         * @param {Cluster} c The cluster that the mouse moved over.\n         * @event\n         */\n        google.maps.event.trigger(this.cluster.getClusterer(), 'mouseover', this.cluster);\n    };\n    ClusterIcon.prototype.onMouseOut = function () {\n        /**\n         * This event is fired when the mouse moves out of a cluster marker.\n         * @name MarkerClusterer#mouseout\n         * @param {Cluster} c The cluster that the mouse moved out of.\n         * @event\n         */\n        google.maps.event.trigger(this.cluster.getClusterer(), 'mouseout', this.cluster);\n    };\n    ClusterIcon.prototype.onAdd = function () {\n        var _a;\n        this.div = document.createElement('div');\n        this.div.className = this.className;\n        if (this.visible) {\n            this.show();\n        }\n        (_a = this.getPanes()) === null || _a === void 0 ? void 0 : _a.overlayMouseTarget.appendChild(this.div);\n        var map = this.getMap();\n        if (map !== null) {\n            // Fix for Issue 157\n            this.boundsChangedListener = google.maps.event.addListener(map, 'bounds_changed', this.onBoundsChanged);\n            this.div.addEventListener('mousedown', this.onMouseDown);\n            this.div.addEventListener('click', this.onClick);\n            this.div.addEventListener('mouseover', this.onMouseOver);\n            this.div.addEventListener('mouseout', this.onMouseOut);\n        }\n    };\n    ClusterIcon.prototype.onRemove = function () {\n        if (this.div && this.div.parentNode) {\n            this.hide();\n            if (this.boundsChangedListener !== null) {\n                google.maps.event.removeListener(this.boundsChangedListener);\n            }\n            this.div.removeEventListener('mousedown', this.onMouseDown);\n            this.div.removeEventListener('click', this.onClick);\n            this.div.removeEventListener('mouseover', this.onMouseOver);\n            this.div.removeEventListener('mouseout', this.onMouseOut);\n            this.div.parentNode.removeChild(this.div);\n            if (this.timeOut !== null) {\n                window.clearTimeout(this.timeOut);\n                this.timeOut = null;\n            }\n            this.div = null;\n        }\n    };\n    ClusterIcon.prototype.draw = function () {\n        if (this.visible && this.div !== null && this.center) {\n            var pos = this.getPosFromLatLng(this.center);\n            this.div.style.top = pos !== null ? \"\".concat(pos.y, \"px\") : '0';\n            this.div.style.left = pos !== null ? \"\".concat(pos.x, \"px\") : '0';\n        }\n    };\n    ClusterIcon.prototype.hide = function () {\n        if (this.div) {\n            this.div.style.display = 'none';\n        }\n        this.visible = false;\n    };\n    ClusterIcon.prototype.show = function () {\n        var _a, _b, _c, _d;\n        if (this.div && this.center) {\n            var divTitle = this.sums === null ||\n                typeof this.sums.title === 'undefined' ||\n                this.sums.title === '' ? this.cluster.getClusterer().getTitle() : this.sums.title;\n            // NOTE: values must be specified in px units\n            var bp = this.backgroundPosition.split(' ');\n            var spriteH = parseInt(bp[0].replace(/^\\s+|\\s+$/g, ''), 10);\n            var spriteV = parseInt(bp[1].replace(/^\\s+|\\s+$/g, ''), 10);\n            var pos = this.getPosFromLatLng(this.center);\n            this.div.className = this.className;\n            this.div.setAttribute('style', \"cursor: 'pointer'; position: 'absolute'; top: \".concat(pos !== null ? \"\".concat(pos.y, \"px\") : '0', \"; left: \").concat(pos !== null ? \"\".concat(pos.x, \"px\") : '0', \"; width: \").concat(this.width, \"px; height: \").concat(this.height, \"px; \"));\n            var img = document.createElement('img');\n            img.alt = divTitle;\n            img.src = this.url;\n            img.width = this.width;\n            img.height = this.height;\n            img.setAttribute('style', \"position: absolute; top: \".concat(spriteV, \"px; left: \").concat(spriteH, \"px\"));\n            if (!this.cluster.getClusterer().enableRetinaIcons) {\n                img.style.clip = \"rect(-\".concat(spriteV, \"px, -\").concat(spriteH + this.width, \"px, -\").concat(spriteV + this.height, \", -\").concat(spriteH, \")\");\n            }\n            var textElm = document.createElement('div');\n            textElm.setAttribute('style', \"position: absolute; top: \".concat(this.anchorText[0], \"px; left: \").concat(this.anchorText[1], \"px; color: \").concat(this.textColor, \"; font-size: \").concat(this.textSize, \"px; font-family: \").concat(this.fontFamily, \"; font-weight: \").concat(this.fontWeight, \"; fontStyle: \").concat(this.fontStyle, \"; text-decoration: \").concat(this.textDecoration, \"; text-align: center; width: \").concat(this.width, \"px; line-height: \").concat(this.height, \"px\"));\n            if ((_a = this.sums) === null || _a === void 0 ? void 0 : _a.text)\n                textElm.innerText = \"\".concat((_b = this.sums) === null || _b === void 0 ? void 0 : _b.text);\n            if ((_c = this.sums) === null || _c === void 0 ? void 0 : _c.html)\n                textElm.innerHTML = \"\".concat((_d = this.sums) === null || _d === void 0 ? void 0 : _d.html);\n            this.div.innerHTML = '';\n            this.div.appendChild(img);\n            this.div.appendChild(textElm);\n            this.div.title = divTitle;\n            this.div.style.display = '';\n        }\n        this.visible = true;\n    };\n    ClusterIcon.prototype.useStyle = function (sums) {\n        this.sums = sums;\n        var styles = this.cluster.getClusterer().getStyles();\n        var style = styles[Math.min(styles.length - 1, Math.max(0, sums.index - 1))];\n        this.url = style.url;\n        this.height = style.height;\n        this.width = style.width;\n        if (style.className)\n            this.className = \"\".concat(this.clusterClassName, \" \").concat(style.className);\n        this.anchorText = style.anchorText || [0, 0];\n        this.anchorIcon = style.anchorIcon || [this.height / 2, this.width / 2];\n        this.textColor = style.textColor || 'black';\n        this.textSize = style.textSize || 11;\n        this.textDecoration = style.textDecoration || 'none';\n        this.fontWeight = style.fontWeight || 'bold';\n        this.fontStyle = style.fontStyle || 'normal';\n        this.fontFamily = style.fontFamily || 'Arial,sans-serif';\n        this.backgroundPosition = style.backgroundPosition || '0 0';\n    };\n    ClusterIcon.prototype.setCenter = function (center) {\n        this.center = center;\n    };\n    ClusterIcon.prototype.getPosFromLatLng = function (latlng) {\n        var pos = this.getProjection().fromLatLngToDivPixel(latlng);\n        if (pos !== null) {\n            pos.x -= this.anchorIcon[1];\n            pos.y -= this.anchorIcon[0];\n        }\n        return pos;\n    };\n    return ClusterIcon;\n}());\n\nvar Cluster$1 = /** @class */ (function () {\n    function Cluster(markerClusterer) {\n        this.markerClusterer = markerClusterer;\n        this.map = this.markerClusterer.getMap();\n        this.gridSize = this.markerClusterer.getGridSize();\n        this.minClusterSize = this.markerClusterer.getMinimumClusterSize();\n        this.averageCenter = this.markerClusterer.getAverageCenter();\n        this.markers = [];\n        this.center = undefined;\n        this.bounds = null;\n        this.clusterIcon = new ClusterIcon(this, this.markerClusterer.getStyles());\n        this.getSize = this.getSize.bind(this);\n        this.getMarkers = this.getMarkers.bind(this);\n        this.getCenter = this.getCenter.bind(this);\n        this.getMap = this.getMap.bind(this);\n        this.getClusterer = this.getClusterer.bind(this);\n        this.getBounds = this.getBounds.bind(this);\n        this.remove = this.remove.bind(this);\n        this.addMarker = this.addMarker.bind(this);\n        this.isMarkerInClusterBounds = this.isMarkerInClusterBounds.bind(this);\n        this.calculateBounds = this.calculateBounds.bind(this);\n        this.updateIcon = this.updateIcon.bind(this);\n        this.isMarkerAlreadyAdded = this.isMarkerAlreadyAdded.bind(this);\n    }\n    Cluster.prototype.getSize = function () {\n        return this.markers.length;\n    };\n    Cluster.prototype.getMarkers = function () {\n        return this.markers;\n    };\n    Cluster.prototype.getCenter = function () {\n        return this.center;\n    };\n    Cluster.prototype.getMap = function () {\n        return this.map;\n    };\n    Cluster.prototype.getClusterer = function () {\n        return this.markerClusterer;\n    };\n    Cluster.prototype.getBounds = function () {\n        var bounds = new google.maps.LatLngBounds(this.center, this.center);\n        var markers = this.getMarkers();\n        for (var i = 0; i < markers.length; i++) {\n            var position = markers[i].getPosition();\n            if (position) {\n                bounds.extend(position);\n            }\n        }\n        return bounds;\n    };\n    Cluster.prototype.remove = function () {\n        this.clusterIcon.setMap(null);\n        this.markers = [];\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        delete this.markers;\n    };\n    Cluster.prototype.addMarker = function (marker) {\n        var _a;\n        if (this.isMarkerAlreadyAdded(marker)) {\n            return false;\n        }\n        if (!this.center) {\n            var position = marker.getPosition();\n            if (position) {\n                this.center = position;\n                this.calculateBounds();\n            }\n        }\n        else {\n            if (this.averageCenter) {\n                var position = marker.getPosition();\n                if (position) {\n                    var length_1 = this.markers.length + 1;\n                    this.center = new google.maps.LatLng((this.center.lat() * (length_1 - 1) + position.lat()) / length_1, (this.center.lng() * (length_1 - 1) + position.lng()) / length_1);\n                    this.calculateBounds();\n                }\n            }\n        }\n        marker.isAdded = true;\n        this.markers.push(marker);\n        var mCount = this.markers.length;\n        var maxZoom = this.markerClusterer.getMaxZoom();\n        var zoom = (_a = this.map) === null || _a === void 0 ? void 0 : _a.getZoom();\n        if (maxZoom !== null && typeof zoom !== 'undefined' && zoom > maxZoom) {\n            // Zoomed in past max zoom, so show the marker.\n            if (marker.getMap() !== this.map) {\n                marker.setMap(this.map);\n            }\n        }\n        else if (mCount < this.minClusterSize) {\n            // Min cluster size not reached so show the marker.\n            if (marker.getMap() !== this.map) {\n                marker.setMap(this.map);\n            }\n        }\n        else if (mCount === this.minClusterSize) {\n            // Hide the markers that were showing.\n            for (var i = 0; i < mCount; i++) {\n                this.markers[i].setMap(null);\n            }\n        }\n        else {\n            marker.setMap(null);\n        }\n        return true;\n    };\n    Cluster.prototype.isMarkerInClusterBounds = function (marker) {\n        if (this.bounds !== null) {\n            var position = marker.getPosition();\n            if (position) {\n                return this.bounds.contains(position);\n            }\n        }\n        return false;\n    };\n    Cluster.prototype.calculateBounds = function () {\n        this.bounds = this.markerClusterer.getExtendedBounds(new google.maps.LatLngBounds(this.center, this.center));\n    };\n    Cluster.prototype.updateIcon = function () {\n        var _a;\n        var mCount = this.markers.length;\n        var maxZoom = this.markerClusterer.getMaxZoom();\n        var zoom = (_a = this.map) === null || _a === void 0 ? void 0 : _a.getZoom();\n        if (maxZoom !== null && typeof zoom !== 'undefined' && zoom > maxZoom) {\n            this.clusterIcon.hide();\n            return;\n        }\n        if (mCount < this.minClusterSize) {\n            // Min cluster size not yet reached.\n            this.clusterIcon.hide();\n            return;\n        }\n        if (this.center) {\n            this.clusterIcon.setCenter(this.center);\n        }\n        this.clusterIcon.useStyle(this.markerClusterer.getCalculator()(this.markers, this.markerClusterer.getStyles().length));\n        this.clusterIcon.show();\n    };\n    Cluster.prototype.isMarkerAlreadyAdded = function (marker) {\n        if (this.markers.includes) {\n            return this.markers.includes(marker);\n        }\n        for (var i = 0; i < this.markers.length; i++) {\n            if (marker === this.markers[i]) {\n                return true;\n            }\n        }\n        return false;\n    };\n    return Cluster;\n}());\n\n/* global google */\n/**\n * Supports up to 9007199254740991 (Number.MAX_SAFE_INTEGER) markers\n * which is not a problem as max array length is 4294967296 (2**32)\n */\nfunction CALCULATOR(markers, numStyles) {\n    var count = markers.length;\n    var numberOfDigits = count.toString().length;\n    var index = Math.min(numberOfDigits, numStyles);\n    return {\n        text: count.toString(),\n        index: index,\n        title: '',\n    };\n}\nvar BATCH_SIZE = 2000;\nvar BATCH_SIZE_IE = 500;\nvar IMAGE_PATH = 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m';\nvar IMAGE_EXTENSION = 'png';\nvar IMAGE_SIZES = [53, 56, 66, 78, 90];\nvar CLUSTERER_CLASS = 'cluster';\nvar Clusterer = /** @class */ (function () {\n    function Clusterer(map, optMarkers, optOptions) {\n        if (optMarkers === void 0) { optMarkers = []; }\n        if (optOptions === void 0) { optOptions = {}; }\n        this.getMinimumClusterSize = this.getMinimumClusterSize.bind(this);\n        this.setMinimumClusterSize = this.setMinimumClusterSize.bind(this);\n        this.getEnableRetinaIcons = this.getEnableRetinaIcons.bind(this);\n        this.setEnableRetinaIcons = this.setEnableRetinaIcons.bind(this);\n        this.addToClosestCluster = this.addToClosestCluster.bind(this);\n        this.getImageExtension = this.getImageExtension.bind(this);\n        this.setImageExtension = this.setImageExtension.bind(this);\n        this.getExtendedBounds = this.getExtendedBounds.bind(this);\n        this.getAverageCenter = this.getAverageCenter.bind(this);\n        this.setAverageCenter = this.setAverageCenter.bind(this);\n        this.getTotalClusters = this.getTotalClusters.bind(this);\n        this.fitMapToMarkers = this.fitMapToMarkers.bind(this);\n        this.getIgnoreHidden = this.getIgnoreHidden.bind(this);\n        this.setIgnoreHidden = this.setIgnoreHidden.bind(this);\n        this.getClusterClass = this.getClusterClass.bind(this);\n        this.setClusterClass = this.setClusterClass.bind(this);\n        this.getTotalMarkers = this.getTotalMarkers.bind(this);\n        this.getZoomOnClick = this.getZoomOnClick.bind(this);\n        this.setZoomOnClick = this.setZoomOnClick.bind(this);\n        this.getBatchSizeIE = this.getBatchSizeIE.bind(this);\n        this.setBatchSizeIE = this.setBatchSizeIE.bind(this);\n        this.createClusters = this.createClusters.bind(this);\n        this.onZoomChanged = this.onZoomChanged.bind(this);\n        this.getImageSizes = this.getImageSizes.bind(this);\n        this.setImageSizes = this.setImageSizes.bind(this);\n        this.getCalculator = this.getCalculator.bind(this);\n        this.setCalculator = this.setCalculator.bind(this);\n        this.removeMarkers = this.removeMarkers.bind(this);\n        this.resetViewport = this.resetViewport.bind(this);\n        this.getImagePath = this.getImagePath.bind(this);\n        this.setImagePath = this.setImagePath.bind(this);\n        this.pushMarkerTo = this.pushMarkerTo.bind(this);\n        this.removeMarker = this.removeMarker.bind(this);\n        this.clearMarkers = this.clearMarkers.bind(this);\n        this.setupStyles = this.setupStyles.bind(this);\n        this.getGridSize = this.getGridSize.bind(this);\n        this.setGridSize = this.setGridSize.bind(this);\n        this.getClusters = this.getClusters.bind(this);\n        this.getMaxZoom = this.getMaxZoom.bind(this);\n        this.setMaxZoom = this.setMaxZoom.bind(this);\n        this.getMarkers = this.getMarkers.bind(this);\n        this.addMarkers = this.addMarkers.bind(this);\n        this.getStyles = this.getStyles.bind(this);\n        this.setStyles = this.setStyles.bind(this);\n        this.addMarker = this.addMarker.bind(this);\n        this.onRemove = this.onRemove.bind(this);\n        this.getTitle = this.getTitle.bind(this);\n        this.setTitle = this.setTitle.bind(this);\n        this.repaint = this.repaint.bind(this);\n        this.onIdle = this.onIdle.bind(this);\n        this.redraw = this.redraw.bind(this);\n        this.extend = this.extend.bind(this);\n        this.onAdd = this.onAdd.bind(this);\n        this.draw = this.draw.bind(this);\n        this.extend(Clusterer, google.maps.OverlayView);\n        this.markers = [];\n        this.clusters = [];\n        this.listeners = [];\n        this.activeMap = null;\n        this.ready = false;\n        this.gridSize = optOptions.gridSize || 60;\n        this.minClusterSize = optOptions.minimumClusterSize || 2;\n        this.maxZoom = optOptions.maxZoom || null;\n        this.styles = optOptions.styles || [];\n        this.title = optOptions.title || '';\n        this.zoomOnClick = true;\n        if (optOptions.zoomOnClick !== undefined) {\n            this.zoomOnClick = optOptions.zoomOnClick;\n        }\n        this.averageCenter = false;\n        if (optOptions.averageCenter !== undefined) {\n            this.averageCenter = optOptions.averageCenter;\n        }\n        this.ignoreHidden = false;\n        if (optOptions.ignoreHidden !== undefined) {\n            this.ignoreHidden = optOptions.ignoreHidden;\n        }\n        this.enableRetinaIcons = false;\n        if (optOptions.enableRetinaIcons !== undefined) {\n            this.enableRetinaIcons = optOptions.enableRetinaIcons;\n        }\n        this.imagePath = optOptions.imagePath || IMAGE_PATH;\n        this.imageExtension = optOptions.imageExtension || IMAGE_EXTENSION;\n        this.imageSizes = optOptions.imageSizes || IMAGE_SIZES;\n        this.calculator = optOptions.calculator || CALCULATOR;\n        this.batchSize = optOptions.batchSize || BATCH_SIZE;\n        this.batchSizeIE = optOptions.batchSizeIE || BATCH_SIZE_IE;\n        this.clusterClass = optOptions.clusterClass || CLUSTERER_CLASS;\n        if (navigator.userAgent.toLowerCase().indexOf('msie') !== -1) {\n            // Try to avoid IE timeout when processing a huge number of markers:\n            this.batchSize = this.batchSizeIE;\n        }\n        this.timerRefStatic = null;\n        this.setupStyles();\n        this.addMarkers(optMarkers, true);\n        this.setMap(map); // Note: this causes onAdd to be called\n    }\n    Clusterer.prototype.onZoomChanged = function () {\n        var _a, _b;\n        this.resetViewport(false);\n        // Workaround for this Google bug: when map is at level 0 and \"-\" of\n        // zoom slider is clicked, a \"zoom_changed\" event is fired even though\n        // the map doesn't zoom out any further. In this situation, no \"idle\"\n        // event is triggered so the cluster markers that have been removed\n        // do not get redrawn. Same goes for a zoom in at maxZoom.\n        if (((_a = this.getMap()) === null || _a === void 0 ? void 0 : _a.getZoom()) === (this.get('minZoom') || 0) ||\n            ((_b = this.getMap()) === null || _b === void 0 ? void 0 : _b.getZoom()) === this.get('maxZoom')) {\n            google.maps.event.trigger(this, 'idle');\n        }\n    };\n    Clusterer.prototype.onIdle = function () {\n        this.redraw();\n    };\n    Clusterer.prototype.onAdd = function () {\n        var map = this.getMap();\n        this.activeMap = map;\n        this.ready = true;\n        this.repaint();\n        if (map !== null) {\n            // Add the map event listeners\n            this.listeners = [\n                google.maps.event.addListener(map, 'zoom_changed', this.onZoomChanged),\n                google.maps.event.addListener(map, 'idle', this.onIdle),\n            ];\n        }\n    };\n    Clusterer.prototype.onRemove = function () {\n        // Put all the managed markers back on the map:\n        for (var i = 0; i < this.markers.length; i++) {\n            if (this.markers[i].getMap() !== this.activeMap) {\n                this.markers[i].setMap(this.activeMap);\n            }\n        }\n        // Remove all clusters:\n        for (var i = 0; i < this.clusters.length; i++) {\n            this.clusters[i].remove();\n        }\n        this.clusters = [];\n        // Remove map event listeners:\n        for (var i = 0; i < this.listeners.length; i++) {\n            google.maps.event.removeListener(this.listeners[i]);\n        }\n        this.listeners = [];\n        this.activeMap = null;\n        this.ready = false;\n    };\n    Clusterer.prototype.draw = function () { return; };\n    Clusterer.prototype.setupStyles = function () {\n        if (this.styles.length > 0) {\n            return;\n        }\n        for (var i = 0; i < this.imageSizes.length; i++) {\n            this.styles.push({\n                url: \"\".concat(this.imagePath + (i + 1), \".\").concat(this.imageExtension),\n                height: this.imageSizes[i],\n                width: this.imageSizes[i],\n            });\n        }\n    };\n    Clusterer.prototype.fitMapToMarkers = function () {\n        var markers = this.getMarkers();\n        var bounds = new google.maps.LatLngBounds();\n        for (var i = 0; i < markers.length; i++) {\n            var position = markers[i].getPosition();\n            if (position) {\n                bounds.extend(position);\n            }\n        }\n        var map = this.getMap();\n        if (map !== null && 'fitBounds' in map) {\n            map.fitBounds(bounds);\n        }\n    };\n    Clusterer.prototype.getGridSize = function () {\n        return this.gridSize;\n    };\n    Clusterer.prototype.setGridSize = function (gridSize) {\n        this.gridSize = gridSize;\n    };\n    Clusterer.prototype.getMinimumClusterSize = function () {\n        return this.minClusterSize;\n    };\n    Clusterer.prototype.setMinimumClusterSize = function (minimumClusterSize) {\n        this.minClusterSize = minimumClusterSize;\n    };\n    Clusterer.prototype.getMaxZoom = function () {\n        return this.maxZoom;\n    };\n    Clusterer.prototype.setMaxZoom = function (maxZoom) {\n        this.maxZoom = maxZoom;\n    };\n    Clusterer.prototype.getStyles = function () {\n        return this.styles;\n    };\n    Clusterer.prototype.setStyles = function (styles) {\n        this.styles = styles;\n    };\n    Clusterer.prototype.getTitle = function () {\n        return this.title;\n    };\n    Clusterer.prototype.setTitle = function (title) {\n        this.title = title;\n    };\n    Clusterer.prototype.getZoomOnClick = function () {\n        return this.zoomOnClick;\n    };\n    Clusterer.prototype.setZoomOnClick = function (zoomOnClick) {\n        this.zoomOnClick = zoomOnClick;\n    };\n    Clusterer.prototype.getAverageCenter = function () {\n        return this.averageCenter;\n    };\n    Clusterer.prototype.setAverageCenter = function (averageCenter) {\n        this.averageCenter = averageCenter;\n    };\n    Clusterer.prototype.getIgnoreHidden = function () {\n        return this.ignoreHidden;\n    };\n    Clusterer.prototype.setIgnoreHidden = function (ignoreHidden) {\n        this.ignoreHidden = ignoreHidden;\n    };\n    Clusterer.prototype.getEnableRetinaIcons = function () {\n        return this.enableRetinaIcons;\n    };\n    Clusterer.prototype.setEnableRetinaIcons = function (enableRetinaIcons) {\n        this.enableRetinaIcons = enableRetinaIcons;\n    };\n    Clusterer.prototype.getImageExtension = function () {\n        return this.imageExtension;\n    };\n    Clusterer.prototype.setImageExtension = function (imageExtension) {\n        this.imageExtension = imageExtension;\n    };\n    Clusterer.prototype.getImagePath = function () {\n        return this.imagePath;\n    };\n    Clusterer.prototype.setImagePath = function (imagePath) {\n        this.imagePath = imagePath;\n    };\n    Clusterer.prototype.getImageSizes = function () {\n        return this.imageSizes;\n    };\n    Clusterer.prototype.setImageSizes = function (imageSizes) {\n        this.imageSizes = imageSizes;\n    };\n    Clusterer.prototype.getCalculator = function () {\n        return this.calculator;\n    };\n    Clusterer.prototype.setCalculator = function (calculator) {\n        this.calculator = calculator;\n    };\n    Clusterer.prototype.getBatchSizeIE = function () {\n        return this.batchSizeIE;\n    };\n    Clusterer.prototype.setBatchSizeIE = function (batchSizeIE) {\n        this.batchSizeIE = batchSizeIE;\n    };\n    Clusterer.prototype.getClusterClass = function () {\n        return this.clusterClass;\n    };\n    Clusterer.prototype.setClusterClass = function (clusterClass) {\n        this.clusterClass = clusterClass;\n    };\n    Clusterer.prototype.getMarkers = function () {\n        return this.markers;\n    };\n    Clusterer.prototype.getTotalMarkers = function () {\n        return this.markers.length;\n    };\n    Clusterer.prototype.getClusters = function () {\n        return this.clusters;\n    };\n    Clusterer.prototype.getTotalClusters = function () {\n        return this.clusters.length;\n    };\n    Clusterer.prototype.addMarker = function (marker, optNoDraw) {\n        this.pushMarkerTo(marker);\n        if (!optNoDraw) {\n            this.redraw();\n        }\n    };\n    Clusterer.prototype.addMarkers = function (markers, optNoDraw) {\n        for (var key in markers) {\n            if (Object.prototype.hasOwnProperty.call(markers, key)) {\n                this.pushMarkerTo(markers[key]);\n            }\n        }\n        if (!optNoDraw) {\n            this.redraw();\n        }\n    };\n    Clusterer.prototype.pushMarkerTo = function (marker) {\n        var _this = this;\n        // If the marker is draggable add a listener so we can update the clusters on the dragend:\n        if (marker.getDraggable()) {\n            google.maps.event.addListener(marker, 'dragend', function () {\n                if (_this.ready) {\n                    marker.isAdded = false;\n                    _this.repaint();\n                }\n            });\n        }\n        marker.isAdded = false;\n        this.markers.push(marker);\n    };\n    Clusterer.prototype.removeMarker_ = function (marker) {\n        var index = -1;\n        if (this.markers.indexOf) {\n            index = this.markers.indexOf(marker);\n        }\n        else {\n            for (var i = 0; i < this.markers.length; i++) {\n                if (marker === this.markers[i]) {\n                    index = i;\n                    break;\n                }\n            }\n        }\n        if (index === -1) {\n            // Marker is not in our list of markers, so do nothing:\n            return false;\n        }\n        marker.setMap(null);\n        this.markers.splice(index, 1); // Remove the marker from the list of managed markers\n        return true;\n    };\n    Clusterer.prototype.removeMarker = function (marker, optNoDraw) {\n        var removed = this.removeMarker_(marker);\n        if (!optNoDraw && removed) {\n            this.repaint();\n        }\n        return removed;\n    };\n    Clusterer.prototype.removeMarkers = function (markers, optNoDraw) {\n        var removed = false;\n        for (var i = 0; i < markers.length; i++) {\n            removed = removed || this.removeMarker_(markers[i]);\n        }\n        if (!optNoDraw && removed) {\n            this.repaint();\n        }\n        return removed;\n    };\n    Clusterer.prototype.clearMarkers = function () {\n        this.resetViewport(true);\n        this.markers = [];\n    };\n    Clusterer.prototype.repaint = function () {\n        var oldClusters = this.clusters.slice();\n        this.clusters = [];\n        this.resetViewport(false);\n        this.redraw();\n        // Remove the old clusters.\n        // Do it in a timeout to prevent blinking effect.\n        setTimeout(function timeout() {\n            for (var i = 0; i < oldClusters.length; i++) {\n                oldClusters[i].remove();\n            }\n        }, 0);\n    };\n    Clusterer.prototype.getExtendedBounds = function (bounds) {\n        var projection = this.getProjection();\n        // Convert the points to pixels and the extend out by the grid size.\n        var trPix = projection.fromLatLngToDivPixel(\n        // Turn the bounds into latlng.\n        new google.maps.LatLng(bounds.getNorthEast().lat(), bounds.getNorthEast().lng()));\n        if (trPix !== null) {\n            trPix.x += this.gridSize;\n            trPix.y -= this.gridSize;\n        }\n        var blPix = projection.fromLatLngToDivPixel(\n        // Turn the bounds into latlng.\n        new google.maps.LatLng(bounds.getSouthWest().lat(), bounds.getSouthWest().lng()));\n        if (blPix !== null) {\n            blPix.x -= this.gridSize;\n            blPix.y += this.gridSize;\n        }\n        // Extend the bounds to contain the new bounds.\n        if (trPix !== null) {\n            // Convert the pixel points back to LatLng nw\n            var point1 = projection.fromDivPixelToLatLng(trPix);\n            if (point1 !== null) {\n                bounds.extend(point1);\n            }\n        }\n        if (blPix !== null) {\n            // Convert the pixel points back to LatLng sw\n            var point2 = projection.fromDivPixelToLatLng(blPix);\n            if (point2 !== null) {\n                bounds.extend(point2);\n            }\n        }\n        return bounds;\n    };\n    Clusterer.prototype.redraw = function () {\n        // Redraws all the clusters.\n        this.createClusters(0);\n    };\n    Clusterer.prototype.resetViewport = function (optHide) {\n        // Remove all the clusters\n        for (var i = 0; i < this.clusters.length; i++) {\n            this.clusters[i].remove();\n        }\n        this.clusters = [];\n        // Reset the markers to not be added and to be removed from the map.\n        for (var i = 0; i < this.markers.length; i++) {\n            var marker = this.markers[i];\n            marker.isAdded = false;\n            if (optHide) {\n                marker.setMap(null);\n            }\n        }\n    };\n    Clusterer.prototype.distanceBetweenPoints = function (p1, p2) {\n        var R = 6371; // Radius of the Earth in km\n        var dLat = ((p2.lat() - p1.lat()) * Math.PI) / 180;\n        var dLon = ((p2.lng() - p1.lng()) * Math.PI) / 180;\n        var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n            Math.cos((p1.lat() * Math.PI) / 180) *\n                Math.cos((p2.lat() * Math.PI) / 180) *\n                Math.sin(dLon / 2) *\n                Math.sin(dLon / 2);\n        return R * (2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)));\n    };\n    Clusterer.prototype.isMarkerInBounds = function (marker, bounds) {\n        var position = marker.getPosition();\n        if (position) {\n            return bounds.contains(position);\n        }\n        return false;\n    };\n    Clusterer.prototype.addToClosestCluster = function (marker) {\n        var cluster;\n        var distance = 40000; // Some large number\n        var clusterToAddTo = null;\n        for (var i = 0; i < this.clusters.length; i++) {\n            cluster = this.clusters[i];\n            var center = cluster.getCenter();\n            var position = marker.getPosition();\n            if (center && position) {\n                var d = this.distanceBetweenPoints(center, position);\n                if (d < distance) {\n                    distance = d;\n                    clusterToAddTo = cluster;\n                }\n            }\n        }\n        if (clusterToAddTo && clusterToAddTo.isMarkerInClusterBounds(marker)) {\n            clusterToAddTo.addMarker(marker);\n        }\n        else {\n            cluster = new Cluster$1(this);\n            cluster.addMarker(marker);\n            this.clusters.push(cluster);\n        }\n    };\n    Clusterer.prototype.createClusters = function (iFirst) {\n        var _this = this;\n        if (!this.ready) {\n            return;\n        }\n        // Cancel previous batch processing if we're working on the first batch:\n        if (iFirst === 0) {\n            /**\n             * This event is fired when the <code>Clusterer</code> begins\n             *  clustering markers.\n             * @name Clusterer#clusteringbegin\n             * @param {Clusterer} mc The Clusterer whose markers are being clustered.\n             * @event\n             */\n            google.maps.event.trigger(this, 'clusteringbegin', this);\n            if (this.timerRefStatic !== null) {\n                window.clearTimeout(this.timerRefStatic);\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore\n                delete this.timerRefStatic;\n            }\n        }\n        var map = this.getMap();\n        var bounds = map !== null && 'getBounds' in map ? map.getBounds() : null;\n        var zoom = (map === null || map === void 0 ? void 0 : map.getZoom()) || 0;\n        // Get our current map view bounds.\n        // Create a new bounds object so we don't affect the map.\n        //\n        // See Comments 9 & 11 on Issue 3651 relating to this workaround for a Google Maps bug:\n        var mapBounds = zoom > 3\n            ? new google.maps.LatLngBounds(bounds === null || bounds === void 0 ? void 0 : bounds.getSouthWest(), bounds === null || bounds === void 0 ? void 0 : bounds.getNorthEast())\n            : new google.maps.LatLngBounds(new google.maps.LatLng(85.02070771743472, -178.48388434375), new google.maps.LatLng(-85.08136444384544, 178.00048865625));\n        var extendedMapBounds = this.getExtendedBounds(mapBounds);\n        var iLast = Math.min(iFirst + this.batchSize, this.markers.length);\n        for (var i = iFirst; i < iLast; i++) {\n            var marker = this.markers[i];\n            if (!marker.isAdded && this.isMarkerInBounds(marker, extendedMapBounds) && (!this.ignoreHidden || (this.ignoreHidden && marker.getVisible()))) {\n                this.addToClosestCluster(marker);\n            }\n        }\n        if (iLast < this.markers.length) {\n            this.timerRefStatic = window.setTimeout(function () {\n                _this.createClusters(iLast);\n            }, 0);\n        }\n        else {\n            this.timerRefStatic = null;\n            /**\n             * This event is fired when the <code>Clusterer</code> stops\n             *  clustering markers.\n             * @name Clusterer#clusteringend\n             * @param {Clusterer} mc The Clusterer whose markers are being clustered.\n             * @event\n             */\n            google.maps.event.trigger(this, 'clusteringend', this);\n            for (var i = 0; i < this.clusters.length; i++) {\n                this.clusters[i].updateIcon();\n            }\n        }\n    };\n    Clusterer.prototype.extend = function (obj1, obj2) {\n        return function applyExtend(object) {\n            for (var property in object.prototype) {\n                // @ts-ignore\n                this.prototype[property] = object.prototype[property];\n            }\n            return this;\n        }.apply(obj1, [obj2]);\n    };\n    return Clusterer;\n}());\n\nconst eventMap$e = {\n    onClick: 'click',\n    onClusteringBegin: 'clusteringbegin',\n    onClusteringEnd: 'clusteringend',\n    onMouseOut: 'mouseout',\n    onMouseOver: 'mouseover',\n};\nconst updaterMap$e = {\n    averageCenter(instance, averageCenter) {\n        instance.setAverageCenter(averageCenter);\n    },\n    batchSizeIE(instance, batchSizeIE) {\n        instance.setBatchSizeIE(batchSizeIE);\n    },\n    calculator(instance, calculator) {\n        instance.setCalculator(calculator);\n    },\n    clusterClass(instance, clusterClass) {\n        instance.setClusterClass(clusterClass);\n    },\n    enableRetinaIcons(instance, enableRetinaIcons) {\n        instance.setEnableRetinaIcons(enableRetinaIcons);\n    },\n    gridSize(instance, gridSize) {\n        instance.setGridSize(gridSize);\n    },\n    ignoreHidden(instance, ignoreHidden) {\n        instance.setIgnoreHidden(ignoreHidden);\n    },\n    imageExtension(instance, imageExtension) {\n        instance.setImageExtension(imageExtension);\n    },\n    imagePath(instance, imagePath) {\n        instance.setImagePath(imagePath);\n    },\n    imageSizes(instance, imageSizes) {\n        instance.setImageSizes(imageSizes);\n    },\n    maxZoom(instance, maxZoom) {\n        instance.setMaxZoom(maxZoom);\n    },\n    minimumClusterSize(instance, minimumClusterSize) {\n        instance.setMinimumClusterSize(minimumClusterSize);\n    },\n    styles(instance, styles) {\n        instance.setStyles(styles);\n    },\n    title(instance, title) {\n        instance.setTitle(title);\n    },\n    zoomOnClick(instance, zoomOnClick) {\n        instance.setZoomOnClick(zoomOnClick);\n    },\n};\nconst defaultOptions$4 = {};\nfunction MarkerClustererFunctional(props) {\n    const { children, options, averageCenter, batchSizeIE, calculator, clusterClass, enableRetinaIcons, gridSize, ignoreHidden, imageExtension, imagePath, imageSizes, maxZoom, minimumClusterSize, styles, title, zoomOnClick, onClick, onClusteringBegin, onClusteringEnd, onMouseOver, onMouseOut, onLoad, onUnmount, } = props;\n    const [instance, setInstance] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const map = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(MapContext);\n    const [clickListener, setClickListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [clusteringBeginListener, setClusteringBeginListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [clusteringEndListener, setClusteringEndListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [mouseoutListener, setMouseoutListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [mouseoverListener, setMouseoverListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onMouseOut) {\n            if (mouseoutListener !== null) {\n                google.maps.event.removeListener(mouseoutListener);\n            }\n            setMouseoutListener(google.maps.event.addListener(instance, eventMap$e.onMouseOut, onMouseOut));\n        }\n    }, [onMouseOut]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onMouseOver) {\n            if (mouseoverListener !== null) {\n                google.maps.event.removeListener(mouseoverListener);\n            }\n            setMouseoverListener(google.maps.event.addListener(instance, eventMap$e.onMouseOver, onMouseOver));\n        }\n    }, [onMouseOver]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onClick) {\n            if (clickListener !== null) {\n                google.maps.event.removeListener(clickListener);\n            }\n            setClickListener(google.maps.event.addListener(instance, eventMap$e.onClick, onClick));\n        }\n    }, [onClick]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onClusteringBegin) {\n            if (clusteringBeginListener !== null) {\n                google.maps.event.removeListener(clusteringBeginListener);\n            }\n            setClusteringBeginListener(google.maps.event.addListener(instance, eventMap$e.onClusteringBegin, onClusteringBegin));\n        }\n    }, [onClusteringBegin]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onClusteringEnd) {\n            if (clusteringEndListener !== null) {\n                google.maps.event.removeListener(clusteringEndListener);\n            }\n            setClusteringBeginListener(google.maps.event.addListener(instance, eventMap$e.onClusteringEnd, onClusteringEnd));\n        }\n    }, [onClusteringEnd]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (typeof averageCenter !== 'undefined' && instance !== null) {\n            updaterMap$e.averageCenter(instance, averageCenter);\n        }\n    }, [instance, averageCenter]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (typeof batchSizeIE !== 'undefined' && instance !== null) {\n            updaterMap$e.batchSizeIE(instance, batchSizeIE);\n        }\n    }, [instance, batchSizeIE]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (typeof calculator !== 'undefined' && instance !== null) {\n            updaterMap$e.calculator(instance, calculator);\n        }\n    }, [instance, calculator]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (typeof clusterClass !== 'undefined' && instance !== null) {\n            updaterMap$e.clusterClass(instance, clusterClass);\n        }\n    }, [instance, clusterClass]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (typeof enableRetinaIcons !== 'undefined' && instance !== null) {\n            updaterMap$e.enableRetinaIcons(instance, enableRetinaIcons);\n        }\n    }, [instance, enableRetinaIcons]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (typeof gridSize !== 'undefined' && instance !== null) {\n            updaterMap$e.gridSize(instance, gridSize);\n        }\n    }, [instance, gridSize]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (typeof ignoreHidden !== 'undefined' && instance !== null) {\n            updaterMap$e.ignoreHidden(instance, ignoreHidden);\n        }\n    }, [instance, ignoreHidden]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (typeof imageExtension !== 'undefined' && instance !== null) {\n            updaterMap$e.imageExtension(instance, imageExtension);\n        }\n    }, [instance, imageExtension]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (typeof imagePath !== 'undefined' && instance !== null) {\n            updaterMap$e.imagePath(instance, imagePath);\n        }\n    }, [instance, imagePath]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (typeof imageSizes !== 'undefined' && instance !== null) {\n            updaterMap$e.imageSizes(instance, imageSizes);\n        }\n    }, [instance, imageSizes]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (typeof maxZoom !== 'undefined' && instance !== null) {\n            updaterMap$e.maxZoom(instance, maxZoom);\n        }\n    }, [instance, maxZoom]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (typeof minimumClusterSize !== 'undefined' && instance !== null) {\n            updaterMap$e.minimumClusterSize(instance, minimumClusterSize);\n        }\n    }, [instance, minimumClusterSize]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (typeof styles !== 'undefined' && instance !== null) {\n            updaterMap$e.styles(instance, styles);\n        }\n    }, [instance, styles]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (typeof title !== 'undefined' && instance !== null) {\n            updaterMap$e.title(instance, title);\n        }\n    }, [instance, title]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (typeof zoomOnClick !== 'undefined' && instance !== null) {\n            updaterMap$e.zoomOnClick(instance, zoomOnClick);\n        }\n    }, [instance, zoomOnClick]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (!map)\n            return;\n        const clustererOptions = Object.assign({}, (options || defaultOptions$4));\n        const clusterer = new Clusterer(map, [], clustererOptions);\n        if (averageCenter) {\n            updaterMap$e.averageCenter(clusterer, averageCenter);\n        }\n        if (batchSizeIE) {\n            updaterMap$e.batchSizeIE(clusterer, batchSizeIE);\n        }\n        if (calculator) {\n            updaterMap$e.calculator(clusterer, calculator);\n        }\n        if (clusterClass) {\n            updaterMap$e.clusterClass(clusterer, clusterClass);\n        }\n        if (enableRetinaIcons) {\n            updaterMap$e.enableRetinaIcons(clusterer, enableRetinaIcons);\n        }\n        if (gridSize) {\n            updaterMap$e.gridSize(clusterer, gridSize);\n        }\n        if (ignoreHidden) {\n            updaterMap$e.ignoreHidden(clusterer, ignoreHidden);\n        }\n        if (imageExtension) {\n            updaterMap$e.imageExtension(clusterer, imageExtension);\n        }\n        if (imagePath) {\n            updaterMap$e.imagePath(clusterer, imagePath);\n        }\n        if (imageSizes) {\n            updaterMap$e.imageSizes(clusterer, imageSizes);\n        }\n        if (maxZoom) {\n            updaterMap$e.maxZoom(clusterer, maxZoom);\n        }\n        if (minimumClusterSize) {\n            updaterMap$e.minimumClusterSize(clusterer, minimumClusterSize);\n        }\n        if (styles) {\n            updaterMap$e.styles(clusterer, styles);\n        }\n        if (title) {\n            updaterMap$e.title(clusterer, title);\n        }\n        if (zoomOnClick) {\n            updaterMap$e.zoomOnClick(clusterer, zoomOnClick);\n        }\n        if (onMouseOut) {\n            setMouseoutListener(google.maps.event.addListener(clusterer, eventMap$e.onMouseOut, onMouseOut));\n        }\n        if (onMouseOver) {\n            setMouseoverListener(google.maps.event.addListener(clusterer, eventMap$e.onMouseOver, onMouseOver));\n        }\n        if (onClick) {\n            setClickListener(google.maps.event.addListener(clusterer, eventMap$e.onClick, onClick));\n        }\n        if (onClusteringBegin) {\n            setClusteringBeginListener(google.maps.event.addListener(clusterer, eventMap$e.onClusteringBegin, onClusteringBegin));\n        }\n        if (onClusteringEnd) {\n            setClusteringEndListener(google.maps.event.addListener(clusterer, eventMap$e.onClusteringEnd, onClusteringEnd));\n        }\n        setInstance(clusterer);\n        if (onLoad) {\n            onLoad(clusterer);\n        }\n        return () => {\n            if (mouseoutListener !== null) {\n                google.maps.event.removeListener(mouseoutListener);\n            }\n            if (mouseoverListener !== null) {\n                google.maps.event.removeListener(mouseoverListener);\n            }\n            if (clickListener !== null) {\n                google.maps.event.removeListener(clickListener);\n            }\n            if (clusteringBeginListener !== null) {\n                google.maps.event.removeListener(clusteringBeginListener);\n            }\n            if (clusteringEndListener !== null) {\n                google.maps.event.removeListener(clusteringEndListener);\n            }\n            if (onUnmount) {\n                onUnmount(clusterer);\n            }\n        };\n    }, []);\n    return instance !== null ? children(instance) || null : null;\n}\nconst MarkerClustererF = (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(MarkerClustererFunctional);\nclass ClustererComponent extends react__WEBPACK_IMPORTED_MODULE_0__.PureComponent {\n    constructor() {\n        super(...arguments);\n        this.registeredEvents = [];\n        this.state = {\n            markerClusterer: null,\n        };\n        this.setClustererCallback = () => {\n            if (this.state.markerClusterer !== null && this.props.onLoad) {\n                this.props.onLoad(this.state.markerClusterer);\n            }\n        };\n    }\n    componentDidMount() {\n        if (this.context) {\n            const markerClusterer = new Clusterer(this.context, [], this.props.options);\n            this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({\n                updaterMap: updaterMap$e,\n                eventMap: eventMap$e,\n                prevProps: {},\n                nextProps: this.props,\n                instance: markerClusterer,\n            });\n            this.setState(() => {\n                return {\n                    markerClusterer,\n                };\n            }, this.setClustererCallback);\n        }\n    }\n    componentDidUpdate(prevProps) {\n        if (this.state.markerClusterer) {\n            unregisterEvents(this.registeredEvents);\n            this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({\n                updaterMap: updaterMap$e,\n                eventMap: eventMap$e,\n                prevProps,\n                nextProps: this.props,\n                instance: this.state.markerClusterer,\n            });\n        }\n    }\n    componentWillUnmount() {\n        if (this.state.markerClusterer !== null) {\n            if (this.props.onUnmount) {\n                this.props.onUnmount(this.state.markerClusterer);\n            }\n            unregisterEvents(this.registeredEvents);\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            this.state.markerClusterer.setMap(null);\n        }\n    }\n    render() {\n        return this.state.markerClusterer !== null\n            ? this.props.children(this.state.markerClusterer)\n            : null;\n    }\n}\nClustererComponent.contextType = MapContext;\n\n// This handler prevents an event in the InfoBox from being passed on to the map.\nfunction cancelHandler(event) {\n    event.cancelBubble = true;\n    if (event.stopPropagation) {\n        event.stopPropagation();\n    }\n}\nvar InfoBox = /** @class */ (function () {\n    function InfoBox(options) {\n        if (options === void 0) { options = {}; }\n        this.getCloseClickHandler = this.getCloseClickHandler.bind(this);\n        this.closeClickHandler = this.closeClickHandler.bind(this);\n        this.createInfoBoxDiv = this.createInfoBoxDiv.bind(this);\n        this.addClickHandler = this.addClickHandler.bind(this);\n        this.getCloseBoxImg = this.getCloseBoxImg.bind(this);\n        this.getBoxWidths = this.getBoxWidths.bind(this);\n        this.setBoxStyle = this.setBoxStyle.bind(this);\n        this.setPosition = this.setPosition.bind(this);\n        this.getPosition = this.getPosition.bind(this);\n        this.setOptions = this.setOptions.bind(this);\n        this.setContent = this.setContent.bind(this);\n        this.setVisible = this.setVisible.bind(this);\n        this.getContent = this.getContent.bind(this);\n        this.getVisible = this.getVisible.bind(this);\n        this.setZIndex = this.setZIndex.bind(this);\n        this.getZIndex = this.getZIndex.bind(this);\n        this.onRemove = this.onRemove.bind(this);\n        this.panBox = this.panBox.bind(this);\n        this.extend = this.extend.bind(this);\n        this.close = this.close.bind(this);\n        this.draw = this.draw.bind(this);\n        this.show = this.show.bind(this);\n        this.hide = this.hide.bind(this);\n        this.open = this.open.bind(this);\n        this.extend(InfoBox, google.maps.OverlayView);\n        // Standard options (in common with google.maps.InfoWindow):\n        this.content = options.content || '';\n        this.disableAutoPan = options.disableAutoPan || false;\n        this.maxWidth = options.maxWidth || 0;\n        this.pixelOffset = options.pixelOffset || new google.maps.Size(0, 0);\n        this.position = options.position || new google.maps.LatLng(0, 0);\n        this.zIndex = options.zIndex || null;\n        // Additional options (unique to InfoBox):\n        this.boxClass = options.boxClass || 'infoBox';\n        this.boxStyle = options.boxStyle || {};\n        this.closeBoxMargin = options.closeBoxMargin || '2px';\n        this.closeBoxURL = options.closeBoxURL || 'http://www.google.com/intl/en_us/mapfiles/close.gif';\n        if (options.closeBoxURL === '') {\n            this.closeBoxURL = '';\n        }\n        this.infoBoxClearance = options.infoBoxClearance || new google.maps.Size(1, 1);\n        if (typeof options.visible === 'undefined') {\n            if (typeof options.isHidden === 'undefined') {\n                options.visible = true;\n            }\n            else {\n                options.visible = !options.isHidden;\n            }\n        }\n        this.isHidden = !options.visible;\n        this.alignBottom = options.alignBottom || false;\n        this.pane = options.pane || 'floatPane';\n        this.enableEventPropagation = options.enableEventPropagation || false;\n        this.div = null;\n        this.closeListener = null;\n        this.moveListener = null;\n        this.mapListener = null;\n        this.contextListener = null;\n        this.eventListeners = null;\n        this.fixedWidthSet = null;\n    }\n    InfoBox.prototype.createInfoBoxDiv = function () {\n        var _this = this;\n        // This handler ignores the current event in the InfoBox and conditionally prevents\n        // the event from being passed on to the map. It is used for the contextmenu event.\n        var ignoreHandler = function (event) {\n            event.returnValue = false;\n            if (event.preventDefault) {\n                event.preventDefault();\n            }\n            if (!_this.enableEventPropagation) {\n                cancelHandler(event);\n            }\n        };\n        if (!this.div) {\n            this.div = document.createElement('div');\n            this.setBoxStyle();\n            if (typeof this.content === 'string') {\n                this.div.innerHTML = this.getCloseBoxImg() + this.content;\n            }\n            else {\n                this.div.innerHTML = this.getCloseBoxImg();\n                this.div.appendChild(this.content);\n            }\n            var panes = this.getPanes();\n            if (panes !== null) {\n                panes[this.pane].appendChild(this.div); // Add the InfoBox div to the DOM\n            }\n            this.addClickHandler();\n            if (this.div.style.width) {\n                this.fixedWidthSet = true;\n            }\n            else {\n                if (this.maxWidth !== 0 && this.div.offsetWidth > this.maxWidth) {\n                    this.div.style.width = this.maxWidth + 'px';\n                    this.fixedWidthSet = true;\n                }\n                else {\n                    // The following code is needed to overcome problems with MSIE\n                    var bw = this.getBoxWidths();\n                    this.div.style.width = this.div.offsetWidth - bw.left - bw.right + 'px';\n                    this.fixedWidthSet = false;\n                }\n            }\n            this.panBox(this.disableAutoPan);\n            if (!this.enableEventPropagation) {\n                this.eventListeners = [];\n                // Cancel event propagation.\n                // Note: mousemove not included (to resolve Issue 152)\n                var events = [\n                    'mousedown',\n                    'mouseover',\n                    'mouseout',\n                    'mouseup',\n                    'click',\n                    'dblclick',\n                    'touchstart',\n                    'touchend',\n                    'touchmove',\n                ];\n                for (var i = 0; i < events.length; i++) {\n                    this.eventListeners.push(google.maps.event.addListener(this.div, events[i], cancelHandler));\n                }\n                // Workaround for Google bug that causes the cursor to change to a pointer\n                // when the mouse moves over a marker underneath InfoBox.\n                this.eventListeners.push(google.maps.event.addListener(this.div, 'mouseover', function () {\n                    if (_this.div) {\n                        _this.div.style.cursor = 'default';\n                    }\n                }));\n            }\n            this.contextListener = google.maps.event.addListener(this.div, 'contextmenu', ignoreHandler);\n            /**\n             * This event is fired when the DIV containing the InfoBox's content is attached to the DOM.\n             * @name InfoBox#domready\n             * @event\n             */\n            google.maps.event.trigger(this, 'domready');\n        }\n    };\n    InfoBox.prototype.getCloseBoxImg = function () {\n        var img = '';\n        if (this.closeBoxURL !== '') {\n            img = '<img alt=\"\"';\n            img += ' aria-hidden=\"true\"';\n            img += \" src='\" + this.closeBoxURL + \"'\";\n            img += ' align=right'; // Do this because Opera chokes on style='float: right;'\n            img += \" style='\";\n            img += ' position: relative;'; // Required by MSIE\n            img += ' cursor: pointer;';\n            img += ' margin: ' + this.closeBoxMargin + ';';\n            img += \"'>\";\n        }\n        return img;\n    };\n    InfoBox.prototype.addClickHandler = function () {\n        this.closeListener = this.div && this.div.firstChild && this.closeBoxURL !== ''\n            ? google.maps.event.addListener(this.div.firstChild, 'click', this.getCloseClickHandler())\n            : null;\n    };\n    InfoBox.prototype.closeClickHandler = function (event) {\n        // 1.0.3 fix: Always prevent propagation of a close box click to the map:\n        event.cancelBubble = true;\n        if (event.stopPropagation) {\n            event.stopPropagation();\n        }\n        /**\n         * This event is fired when the InfoBox's close box is clicked.\n         * @name InfoBox#closeclick\n         * @event\n         */\n        google.maps.event.trigger(this, 'closeclick');\n        this.close();\n    };\n    InfoBox.prototype.getCloseClickHandler = function () {\n        return this.closeClickHandler;\n    };\n    InfoBox.prototype.panBox = function (disablePan) {\n        if (this.div && !disablePan) {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            var map = this.getMap();\n            // Only pan if attached to map, not panorama\n            if (map instanceof google.maps.Map) {\n                var xOffset = 0;\n                var yOffset = 0;\n                var bounds = map.getBounds();\n                if (bounds && !bounds.contains(this.position)) {\n                    // Marker not in visible area of map, so set center\n                    // of map to the marker position first.\n                    map.setCenter(this.position);\n                }\n                var mapDiv = map.getDiv();\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore\n                var mapWidth = mapDiv.offsetWidth;\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore\n                var mapHeight = mapDiv.offsetHeight;\n                var iwOffsetX = this.pixelOffset.width;\n                var iwOffsetY = this.pixelOffset.height;\n                var iwWidth = this.div.offsetWidth;\n                var iwHeight = this.div.offsetHeight;\n                var padX = this.infoBoxClearance.width;\n                var padY = this.infoBoxClearance.height;\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore\n                var projection = this.getProjection();\n                var pixPosition = projection.fromLatLngToContainerPixel(this.position);\n                if (pixPosition !== null) {\n                    if (pixPosition.x < -iwOffsetX + padX) {\n                        xOffset = pixPosition.x + iwOffsetX - padX;\n                    }\n                    else if (pixPosition.x + iwWidth + iwOffsetX + padX > mapWidth) {\n                        xOffset = pixPosition.x + iwWidth + iwOffsetX + padX - mapWidth;\n                    }\n                    if (this.alignBottom) {\n                        if (pixPosition.y < -iwOffsetY + padY + iwHeight) {\n                            yOffset = pixPosition.y + iwOffsetY - padY - iwHeight;\n                        }\n                        else if (pixPosition.y + iwOffsetY + padY > mapHeight) {\n                            yOffset = pixPosition.y + iwOffsetY + padY - mapHeight;\n                        }\n                    }\n                    else {\n                        if (pixPosition.y < -iwOffsetY + padY) {\n                            yOffset = pixPosition.y + iwOffsetY - padY;\n                        }\n                        else if (pixPosition.y + iwHeight + iwOffsetY + padY > mapHeight) {\n                            yOffset = pixPosition.y + iwHeight + iwOffsetY + padY - mapHeight;\n                        }\n                    }\n                }\n                if (!(xOffset === 0 && yOffset === 0)) {\n                    // Move the map to the shifted center.\n                    map.panBy(xOffset, yOffset);\n                }\n            }\n        }\n    };\n    InfoBox.prototype.setBoxStyle = function () {\n        if (this.div) {\n            // Apply style values from the style sheet defined in the boxClass parameter:\n            this.div.className = this.boxClass;\n            // Clear existing inline style values:\n            this.div.style.cssText = '';\n            // Apply style values defined in the boxStyle parameter:\n            var boxStyle = this.boxStyle;\n            for (var i in boxStyle) {\n                if (Object.prototype.hasOwnProperty.call(boxStyle, i)) {\n                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                    // @ts-ignore\n                    this.div.style[i] = boxStyle[i];\n                }\n            }\n            // Fix for iOS disappearing InfoBox problem\n            // See http://stackoverflow.com/questions/9229535/google-maps-markers-disappear-at-certain-zoom-level-only-on-iphone-ipad\n            this.div.style.webkitTransform = 'translateZ(0)';\n            // Fix up opacity style for benefit of MSIE\n            if (typeof this.div.style.opacity !== 'undefined' && this.div.style.opacity !== '') {\n                // See http://www.quirksmode.org/css/opacity.html\n                var opacity = parseFloat(this.div.style.opacity || '');\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore\n                this.div.style.msFilter =\n                    '\"progid:DXImageTransform.Microsoft.Alpha(Opacity=' + opacity * 100 + ')\"';\n                this.div.style.filter = 'alpha(opacity=' + opacity * 100 + ')';\n            }\n            // Apply required styles\n            this.div.style.position = 'absolute';\n            this.div.style.visibility = 'hidden';\n            if (this.zIndex !== null) {\n                this.div.style.zIndex = this.zIndex + '';\n            }\n            if (!this.div.style.overflow) {\n                this.div.style.overflow = 'auto';\n            }\n        }\n    };\n    InfoBox.prototype.getBoxWidths = function () {\n        var bw = { top: 0, bottom: 0, left: 0, right: 0 };\n        if (!this.div) {\n            return bw;\n        }\n        if (document.defaultView) {\n            var ownerDocument = this.div.ownerDocument;\n            var computedStyle = ownerDocument && ownerDocument.defaultView\n                ? ownerDocument.defaultView.getComputedStyle(this.div, '')\n                : null;\n            if (computedStyle) {\n                // The computed styles are always in pixel units (good!)\n                bw.top = parseInt(computedStyle.borderTopWidth || '', 10) || 0;\n                bw.bottom = parseInt(computedStyle.borderBottomWidth || '', 10) || 0;\n                bw.left = parseInt(computedStyle.borderLeftWidth || '', 10) || 0;\n                bw.right = parseInt(computedStyle.borderRightWidth || '', 10) || 0;\n            }\n        }\n        else if (\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        document.documentElement.currentStyle // MSIE\n        ) {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            var currentStyle = this.div.currentStyle;\n            if (currentStyle) {\n                // The current styles may not be in pixel units, but assume they are (bad!)\n                bw.top = parseInt(currentStyle.borderTopWidth || '', 10) || 0;\n                bw.bottom = parseInt(currentStyle.borderBottomWidth || '', 10) || 0;\n                bw.left = parseInt(currentStyle.borderLeftWidth || '', 10) || 0;\n                bw.right = parseInt(currentStyle.borderRightWidth || '', 10) || 0;\n            }\n        }\n        return bw;\n    };\n    InfoBox.prototype.onRemove = function () {\n        if (this.div && this.div.parentNode) {\n            this.div.parentNode.removeChild(this.div);\n            this.div = null;\n        }\n    };\n    InfoBox.prototype.draw = function () {\n        this.createInfoBoxDiv();\n        if (this.div) {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            var projection = this.getProjection();\n            var pixPosition = projection.fromLatLngToDivPixel(this.position);\n            if (pixPosition !== null) {\n                this.div.style.left = pixPosition.x + this.pixelOffset.width + 'px';\n                if (this.alignBottom) {\n                    this.div.style.bottom = -(pixPosition.y + this.pixelOffset.height) + 'px';\n                }\n                else {\n                    this.div.style.top = pixPosition.y + this.pixelOffset.height + 'px';\n                }\n            }\n            if (this.isHidden) {\n                this.div.style.visibility = 'hidden';\n            }\n            else {\n                this.div.style.visibility = 'visible';\n            }\n        }\n    };\n    InfoBox.prototype.setOptions = function (options) {\n        if (options === void 0) { options = {}; }\n        if (typeof options.boxClass !== 'undefined') {\n            // Must be first\n            this.boxClass = options.boxClass;\n            this.setBoxStyle();\n        }\n        if (typeof options.boxStyle !== 'undefined') {\n            // Must be second\n            this.boxStyle = options.boxStyle;\n            this.setBoxStyle();\n        }\n        if (typeof options.content !== 'undefined') {\n            this.setContent(options.content);\n        }\n        if (typeof options.disableAutoPan !== 'undefined') {\n            this.disableAutoPan = options.disableAutoPan;\n        }\n        if (typeof options.maxWidth !== 'undefined') {\n            this.maxWidth = options.maxWidth;\n        }\n        if (typeof options.pixelOffset !== 'undefined') {\n            this.pixelOffset = options.pixelOffset;\n        }\n        if (typeof options.alignBottom !== 'undefined') {\n            this.alignBottom = options.alignBottom;\n        }\n        if (typeof options.position !== 'undefined') {\n            this.setPosition(options.position);\n        }\n        if (typeof options.zIndex !== 'undefined') {\n            this.setZIndex(options.zIndex);\n        }\n        if (typeof options.closeBoxMargin !== 'undefined') {\n            this.closeBoxMargin = options.closeBoxMargin;\n        }\n        if (typeof options.closeBoxURL !== 'undefined') {\n            this.closeBoxURL = options.closeBoxURL;\n        }\n        if (typeof options.infoBoxClearance !== 'undefined') {\n            this.infoBoxClearance = options.infoBoxClearance;\n        }\n        if (typeof options.isHidden !== 'undefined') {\n            this.isHidden = options.isHidden;\n        }\n        if (typeof options.visible !== 'undefined') {\n            this.isHidden = !options.visible;\n        }\n        if (typeof options.enableEventPropagation !== 'undefined') {\n            this.enableEventPropagation = options.enableEventPropagation;\n        }\n        if (this.div) {\n            this.draw();\n        }\n    };\n    InfoBox.prototype.setContent = function (content) {\n        this.content = content;\n        if (this.div) {\n            if (this.closeListener) {\n                google.maps.event.removeListener(this.closeListener);\n                this.closeListener = null;\n            }\n            // Odd code required to make things work with MSIE.\n            if (!this.fixedWidthSet) {\n                this.div.style.width = '';\n            }\n            if (typeof content === 'string') {\n                this.div.innerHTML = this.getCloseBoxImg() + content;\n            }\n            else {\n                this.div.innerHTML = this.getCloseBoxImg();\n                this.div.appendChild(content);\n            }\n            // Perverse code required to make things work with MSIE.\n            // (Ensures the close box does, in fact, float to the right.)\n            if (!this.fixedWidthSet) {\n                this.div.style.width = this.div.offsetWidth + 'px';\n                if (typeof content === 'string') {\n                    this.div.innerHTML = this.getCloseBoxImg() + content;\n                }\n                else {\n                    this.div.innerHTML = this.getCloseBoxImg();\n                    this.div.appendChild(content);\n                }\n            }\n            this.addClickHandler();\n        }\n        /**\n         * This event is fired when the content of the InfoBox changes.\n         * @name InfoBox#content_changed\n         * @event\n         */\n        google.maps.event.trigger(this, 'content_changed');\n    };\n    InfoBox.prototype.setPosition = function (latLng) {\n        this.position = latLng;\n        if (this.div) {\n            this.draw();\n        }\n        /**\n         * This event is fired when the position of the InfoBox changes.\n         * @name InfoBox#position_changed\n         * @event\n         */\n        google.maps.event.trigger(this, 'position_changed');\n    };\n    InfoBox.prototype.setVisible = function (isVisible) {\n        this.isHidden = !isVisible;\n        if (this.div) {\n            this.div.style.visibility = this.isHidden ? 'hidden' : 'visible';\n        }\n    };\n    InfoBox.prototype.setZIndex = function (index) {\n        this.zIndex = index;\n        if (this.div) {\n            this.div.style.zIndex = index + '';\n        }\n        /**\n         * This event is fired when the zIndex of the InfoBox changes.\n         * @name InfoBox#zindex_changed\n         * @event\n         */\n        google.maps.event.trigger(this, 'zindex_changed');\n    };\n    InfoBox.prototype.getContent = function () {\n        return this.content;\n    };\n    InfoBox.prototype.getPosition = function () {\n        return this.position;\n    };\n    InfoBox.prototype.getZIndex = function () {\n        return this.zIndex;\n    };\n    InfoBox.prototype.getVisible = function () {\n        var map = this.getMap();\n        return typeof map === 'undefined' || map === null ? false : !this.isHidden;\n    };\n    InfoBox.prototype.show = function () {\n        this.isHidden = false;\n        if (this.div) {\n            this.div.style.visibility = 'visible';\n        }\n    };\n    InfoBox.prototype.hide = function () {\n        this.isHidden = true;\n        if (this.div) {\n            this.div.style.visibility = 'hidden';\n        }\n    };\n    InfoBox.prototype.open = function (map, anchor) {\n        var _this = this;\n        if (anchor) {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            this.position = anchor.getPosition();\n            this.moveListener = google.maps.event.addListener(anchor, 'position_changed', function () {\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore\n                var position = anchor.getPosition();\n                _this.setPosition(position);\n            });\n            this.mapListener = google.maps.event.addListener(anchor, 'map_changed', function () {\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore\n                _this.setMap(anchor.map);\n            });\n        }\n        this.setMap(map);\n        if (this.div) {\n            this.panBox();\n        }\n    };\n    InfoBox.prototype.close = function () {\n        if (this.closeListener) {\n            google.maps.event.removeListener(this.closeListener);\n            this.closeListener = null;\n        }\n        if (this.eventListeners) {\n            for (var i = 0; i < this.eventListeners.length; i++) {\n                google.maps.event.removeListener(this.eventListeners[i]);\n            }\n            this.eventListeners = null;\n        }\n        if (this.moveListener) {\n            google.maps.event.removeListener(this.moveListener);\n            this.moveListener = null;\n        }\n        if (this.mapListener) {\n            google.maps.event.removeListener(this.mapListener);\n            this.mapListener = null;\n        }\n        if (this.contextListener) {\n            google.maps.event.removeListener(this.contextListener);\n            this.contextListener = null;\n        }\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        this.setMap(null);\n    };\n    InfoBox.prototype.extend = function (obj1, obj2) {\n        return function applyExtend(object) {\n            for (var property in object.prototype) {\n                if (!Object.prototype.hasOwnProperty.call(this, property)) {\n                    // @ts-ignore\n                    this.prototype[property] = object.prototype[property];\n                }\n            }\n            return this;\n        }.apply(obj1, [obj2]);\n    };\n    return InfoBox;\n}());\n\nconst eventMap$d = {\n    onCloseClick: 'closeclick',\n    onContentChanged: 'content_changed',\n    onDomReady: 'domready',\n    onPositionChanged: 'position_changed',\n    onZindexChanged: 'zindex_changed',\n};\nconst updaterMap$d = {\n    options(instance, options) {\n        instance.setOptions(options);\n    },\n    position(instance, position) {\n        if (position instanceof google.maps.LatLng) {\n            instance.setPosition(position);\n        }\n        else {\n            instance.setPosition(new google.maps.LatLng(position.lat, position.lng));\n        }\n    },\n    visible(instance, visible) {\n        instance.setVisible(visible);\n    },\n    zIndex(instance, zIndex) {\n        instance.setZIndex(zIndex);\n    },\n};\nconst defaultOptions$3 = {};\nfunction InfoBoxFunctional({ children, anchor, options, position, zIndex, onCloseClick, onDomReady, onContentChanged, onPositionChanged, onZindexChanged, onLoad, onUnmount }) {\n    const map = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(MapContext);\n    const [instance, setInstance] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [closeclickListener, setCloseClickListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [domreadyclickListener, setDomReadyClickListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [contentchangedclickListener, setContentChangedClickListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [positionchangedclickListener, setPositionChangedClickListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [zindexchangedclickListener, setZindexChangedClickListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const containerElementRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    // Order does matter\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (map && instance !== null) {\n            instance.close();\n            if (anchor) {\n                instance.open(map, anchor);\n            }\n            else if (instance.getPosition()) {\n                instance.open(map);\n            }\n        }\n    }, [map, instance, anchor]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (options && instance !== null) {\n            instance.setOptions(options);\n        }\n    }, [instance, options]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (position && instance !== null) {\n            const positionLatLng = position instanceof google.maps.LatLng\n                ? position\n                // @ts-ignore\n                : new google.maps.LatLng(position.lat, position.lng);\n            instance.setPosition(positionLatLng);\n        }\n    }, [position]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (typeof zIndex === 'number' && instance !== null) {\n            instance.setZIndex(zIndex);\n        }\n    }, [zIndex]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onCloseClick) {\n            if (closeclickListener !== null) {\n                google.maps.event.removeListener(closeclickListener);\n            }\n            setCloseClickListener(google.maps.event.addListener(instance, 'closeclick', onCloseClick));\n        }\n    }, [onCloseClick]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onDomReady) {\n            if (domreadyclickListener !== null) {\n                google.maps.event.removeListener(domreadyclickListener);\n            }\n            setDomReadyClickListener(google.maps.event.addListener(instance, 'domready', onDomReady));\n        }\n    }, [onDomReady]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onContentChanged) {\n            if (contentchangedclickListener !== null) {\n                google.maps.event.removeListener(contentchangedclickListener);\n            }\n            setContentChangedClickListener(google.maps.event.addListener(instance, 'content_changed', onContentChanged));\n        }\n    }, [onContentChanged]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onPositionChanged) {\n            if (positionchangedclickListener !== null) {\n                google.maps.event.removeListener(positionchangedclickListener);\n            }\n            setPositionChangedClickListener(google.maps.event.addListener(instance, 'position_changed', onPositionChanged));\n        }\n    }, [onPositionChanged]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onZindexChanged) {\n            if (zindexchangedclickListener !== null) {\n                google.maps.event.removeListener(zindexchangedclickListener);\n            }\n            setZindexChangedClickListener(google.maps.event.addListener(instance, 'zindex_changed', onZindexChanged));\n        }\n    }, [onZindexChanged]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (map) {\n            const _a = options || defaultOptions$3, { position } = _a, infoBoxOptions = __rest$1(_a, [\"position\"]);\n            let positionLatLng;\n            if (position && !(position instanceof google.maps.LatLng)) {\n                // @ts-ignore\n                positionLatLng = new google.maps.LatLng(position.lat, position.lng);\n            }\n            const infoBox = new InfoBox(Object.assign(Object.assign({}, infoBoxOptions), (positionLatLng ? { position: positionLatLng } : {})));\n            containerElementRef.current = document.createElement('div');\n            setInstance(infoBox);\n            if (onCloseClick) {\n                setCloseClickListener(google.maps.event.addListener(infoBox, 'closeclick', onCloseClick));\n            }\n            if (onDomReady) {\n                setDomReadyClickListener(google.maps.event.addListener(infoBox, 'domready', onDomReady));\n            }\n            if (onContentChanged) {\n                setContentChangedClickListener(google.maps.event.addListener(infoBox, 'content_changed', onContentChanged));\n            }\n            if (onPositionChanged) {\n                setPositionChangedClickListener(google.maps.event.addListener(infoBox, 'position_changed', onPositionChanged));\n            }\n            if (onZindexChanged) {\n                setZindexChangedClickListener(google.maps.event.addListener(infoBox, 'zindex_changed', onZindexChanged));\n            }\n            infoBox.setContent(containerElementRef.current);\n            if (anchor) {\n                infoBox.open(map, anchor);\n            }\n            else if (infoBox.getPosition()) {\n                infoBox.open(map);\n            }\n            else {\n                invariant_1(false, 'You must provide either an anchor or a position prop for <InfoBox>.');\n            }\n            if (onLoad) {\n                onLoad(infoBox);\n            }\n        }\n        return () => {\n            if (instance !== null) {\n                if (closeclickListener) {\n                    google.maps.event.removeListener(closeclickListener);\n                }\n                if (contentchangedclickListener) {\n                    google.maps.event.removeListener(contentchangedclickListener);\n                }\n                if (domreadyclickListener) {\n                    google.maps.event.removeListener(domreadyclickListener);\n                }\n                if (positionchangedclickListener) {\n                    google.maps.event.removeListener(positionchangedclickListener);\n                }\n                if (zindexchangedclickListener) {\n                    google.maps.event.removeListener(zindexchangedclickListener);\n                }\n                if (onUnmount) {\n                    onUnmount(instance);\n                }\n                instance.close();\n            }\n        };\n    }, []);\n    return containerElementRef.current ? (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal)(react__WEBPACK_IMPORTED_MODULE_0__.Children.only(children), containerElementRef.current) : null;\n}\nconst InfoBoxF = (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(InfoBoxFunctional);\nclass InfoBoxComponent extends react__WEBPACK_IMPORTED_MODULE_0__.PureComponent {\n    constructor() {\n        super(...arguments);\n        this.registeredEvents = [];\n        this.containerElement = null;\n        this.state = {\n            infoBox: null,\n        };\n        this.open = (infoBox, anchor) => {\n            if (anchor) {\n                // @ts-ignore\n                infoBox.open(this.context, anchor);\n            }\n            else if (infoBox.getPosition()) {\n                // @ts-ignore\n                infoBox.open(this.context);\n            }\n            else {\n                invariant_1(false, 'You must provide either an anchor or a position prop for <InfoBox>.');\n            }\n        };\n        this.setInfoBoxCallback = () => {\n            if (this.state.infoBox !== null && this.containerElement !== null) {\n                this.state.infoBox.setContent(this.containerElement);\n                this.open(this.state.infoBox, this.props.anchor);\n                if (this.props.onLoad) {\n                    this.props.onLoad(this.state.infoBox);\n                }\n            }\n        };\n    }\n    componentDidMount() {\n        const _a = this.props.options || {}, { position } = _a, infoBoxOptions = __rest$1(_a, [\"position\"]);\n        let positionLatLng;\n        if (position && !(position instanceof google.maps.LatLng)) {\n            // @ts-ignore\n            positionLatLng = new google.maps.LatLng(position.lat, position.lng);\n        }\n        const infoBox = new InfoBox(Object.assign(Object.assign({}, infoBoxOptions), (positionLatLng ? { position: positionLatLng } : {})));\n        this.containerElement = document.createElement('div');\n        this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({\n            updaterMap: updaterMap$d,\n            eventMap: eventMap$d,\n            prevProps: {},\n            nextProps: this.props,\n            instance: infoBox,\n        });\n        this.setState({ infoBox }, this.setInfoBoxCallback);\n    }\n    componentDidUpdate(prevProps) {\n        const { infoBox } = this.state;\n        if (infoBox !== null) {\n            unregisterEvents(this.registeredEvents);\n            this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({\n                updaterMap: updaterMap$d,\n                eventMap: eventMap$d,\n                prevProps,\n                nextProps: this.props,\n                instance: infoBox,\n            });\n        }\n    }\n    componentWillUnmount() {\n        const { onUnmount } = this.props;\n        const { infoBox } = this.state;\n        if (infoBox !== null) {\n            if (onUnmount) {\n                onUnmount(infoBox);\n            }\n            unregisterEvents(this.registeredEvents);\n            infoBox.close();\n        }\n    }\n    render() {\n        return this.containerElement ? (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal)(react__WEBPACK_IMPORTED_MODULE_0__.Children.only(this.props.children), this.containerElement) : null;\n    }\n}\nInfoBoxComponent.contextType = MapContext;\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nvar fastDeepEqual = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n\nvar kdbush = {exports: {}};\n\n(function (module, exports) {\n\t(function (global, factory) {\n\tmodule.exports = factory() ;\n\t}(commonjsGlobal, (function () {\n\tfunction sortKD(ids, coords, nodeSize, left, right, depth) {\n\t    if (right - left <= nodeSize) { return; }\n\n\t    var m = (left + right) >> 1;\n\n\t    select(ids, coords, m, left, right, depth % 2);\n\n\t    sortKD(ids, coords, nodeSize, left, m - 1, depth + 1);\n\t    sortKD(ids, coords, nodeSize, m + 1, right, depth + 1);\n\t}\n\n\tfunction select(ids, coords, k, left, right, inc) {\n\n\t    while (right > left) {\n\t        if (right - left > 600) {\n\t            var n = right - left + 1;\n\t            var m = k - left + 1;\n\t            var z = Math.log(n);\n\t            var s = 0.5 * Math.exp(2 * z / 3);\n\t            var sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n\t            var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n\t            var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n\t            select(ids, coords, k, newLeft, newRight, inc);\n\t        }\n\n\t        var t = coords[2 * k + inc];\n\t        var i = left;\n\t        var j = right;\n\n\t        swapItem(ids, coords, left, k);\n\t        if (coords[2 * right + inc] > t) { swapItem(ids, coords, left, right); }\n\n\t        while (i < j) {\n\t            swapItem(ids, coords, i, j);\n\t            i++;\n\t            j--;\n\t            while (coords[2 * i + inc] < t) { i++; }\n\t            while (coords[2 * j + inc] > t) { j--; }\n\t        }\n\n\t        if (coords[2 * left + inc] === t) { swapItem(ids, coords, left, j); }\n\t        else {\n\t            j++;\n\t            swapItem(ids, coords, j, right);\n\t        }\n\n\t        if (j <= k) { left = j + 1; }\n\t        if (k <= j) { right = j - 1; }\n\t    }\n\t}\n\n\tfunction swapItem(ids, coords, i, j) {\n\t    swap(ids, i, j);\n\t    swap(coords, 2 * i, 2 * j);\n\t    swap(coords, 2 * i + 1, 2 * j + 1);\n\t}\n\n\tfunction swap(arr, i, j) {\n\t    var tmp = arr[i];\n\t    arr[i] = arr[j];\n\t    arr[j] = tmp;\n\t}\n\n\tfunction range(ids, coords, minX, minY, maxX, maxY, nodeSize) {\n\t    var stack = [0, ids.length - 1, 0];\n\t    var result = [];\n\t    var x, y;\n\n\t    while (stack.length) {\n\t        var axis = stack.pop();\n\t        var right = stack.pop();\n\t        var left = stack.pop();\n\n\t        if (right - left <= nodeSize) {\n\t            for (var i = left; i <= right; i++) {\n\t                x = coords[2 * i];\n\t                y = coords[2 * i + 1];\n\t                if (x >= minX && x <= maxX && y >= minY && y <= maxY) { result.push(ids[i]); }\n\t            }\n\t            continue;\n\t        }\n\n\t        var m = Math.floor((left + right) / 2);\n\n\t        x = coords[2 * m];\n\t        y = coords[2 * m + 1];\n\n\t        if (x >= minX && x <= maxX && y >= minY && y <= maxY) { result.push(ids[m]); }\n\n\t        var nextAxis = (axis + 1) % 2;\n\n\t        if (axis === 0 ? minX <= x : minY <= y) {\n\t            stack.push(left);\n\t            stack.push(m - 1);\n\t            stack.push(nextAxis);\n\t        }\n\t        if (axis === 0 ? maxX >= x : maxY >= y) {\n\t            stack.push(m + 1);\n\t            stack.push(right);\n\t            stack.push(nextAxis);\n\t        }\n\t    }\n\n\t    return result;\n\t}\n\n\tfunction within(ids, coords, qx, qy, r, nodeSize) {\n\t    var stack = [0, ids.length - 1, 0];\n\t    var result = [];\n\t    var r2 = r * r;\n\n\t    while (stack.length) {\n\t        var axis = stack.pop();\n\t        var right = stack.pop();\n\t        var left = stack.pop();\n\n\t        if (right - left <= nodeSize) {\n\t            for (var i = left; i <= right; i++) {\n\t                if (sqDist(coords[2 * i], coords[2 * i + 1], qx, qy) <= r2) { result.push(ids[i]); }\n\t            }\n\t            continue;\n\t        }\n\n\t        var m = Math.floor((left + right) / 2);\n\n\t        var x = coords[2 * m];\n\t        var y = coords[2 * m + 1];\n\n\t        if (sqDist(x, y, qx, qy) <= r2) { result.push(ids[m]); }\n\n\t        var nextAxis = (axis + 1) % 2;\n\n\t        if (axis === 0 ? qx - r <= x : qy - r <= y) {\n\t            stack.push(left);\n\t            stack.push(m - 1);\n\t            stack.push(nextAxis);\n\t        }\n\t        if (axis === 0 ? qx + r >= x : qy + r >= y) {\n\t            stack.push(m + 1);\n\t            stack.push(right);\n\t            stack.push(nextAxis);\n\t        }\n\t    }\n\n\t    return result;\n\t}\n\n\tfunction sqDist(ax, ay, bx, by) {\n\t    var dx = ax - bx;\n\t    var dy = ay - by;\n\t    return dx * dx + dy * dy;\n\t}\n\n\tvar defaultGetX = function (p) { return p[0]; };\n\tvar defaultGetY = function (p) { return p[1]; };\n\n\tvar KDBush = function KDBush(points, getX, getY, nodeSize, ArrayType) {\n\t    if ( getX === void 0 ) getX = defaultGetX;\n\t    if ( getY === void 0 ) getY = defaultGetY;\n\t    if ( nodeSize === void 0 ) nodeSize = 64;\n\t    if ( ArrayType === void 0 ) ArrayType = Float64Array;\n\n\t    this.nodeSize = nodeSize;\n\t    this.points = points;\n\n\t    var IndexArrayType = points.length < 65536 ? Uint16Array : Uint32Array;\n\n\t    var ids = this.ids = new IndexArrayType(points.length);\n\t    var coords = this.coords = new ArrayType(points.length * 2);\n\n\t    for (var i = 0; i < points.length; i++) {\n\t        ids[i] = i;\n\t        coords[2 * i] = getX(points[i]);\n\t        coords[2 * i + 1] = getY(points[i]);\n\t    }\n\n\t    sortKD(ids, coords, nodeSize, 0, ids.length - 1, 0);\n\t};\n\n\tKDBush.prototype.range = function range$1 (minX, minY, maxX, maxY) {\n\t    return range(this.ids, this.coords, minX, minY, maxX, maxY, this.nodeSize);\n\t};\n\n\tKDBush.prototype.within = function within$1 (x, y, r) {\n\t    return within(this.ids, this.coords, x, y, r, this.nodeSize);\n\t};\n\n\treturn KDBush;\n\n\t})));\n} (kdbush));\n\nvar KDBush = kdbush.exports;\n\nconst defaultOptions$2 = {\n    minZoom: 0,   // min zoom to generate clusters on\n    maxZoom: 16,  // max zoom level to cluster the points on\n    minPoints: 2, // minimum points to form a cluster\n    radius: 40,   // cluster radius in pixels\n    extent: 512,  // tile extent (radius is calculated relative to it)\n    nodeSize: 64, // size of the KD-tree leaf node, affects performance\n    log: false,   // whether to log timing info\n\n    // whether to generate numeric ids for input features (in vector tiles)\n    generateId: false,\n\n    // a reduce function for calculating custom cluster properties\n    reduce: null, // (accumulated, props) => { accumulated.sum += props.sum; }\n\n    // properties to use for individual points when running the reducer\n    map: props => props // props => ({sum: props.my_value})\n};\n\nconst fround = Math.fround || (tmp => ((x) => { tmp[0] = +x; return tmp[0]; }))(new Float32Array(1));\n\nclass Supercluster {\n    constructor(options) {\n        this.options = extend$1(Object.create(defaultOptions$2), options);\n        this.trees = new Array(this.options.maxZoom + 1);\n    }\n\n    load(points) {\n        const {log, minZoom, maxZoom, nodeSize} = this.options;\n\n        if (log) console.time('total time');\n\n        const timerId = `prepare ${  points.length  } points`;\n        if (log) console.time(timerId);\n\n        this.points = points;\n\n        // generate a cluster object for each point and index input points into a KD-tree\n        let clusters = [];\n        for (let i = 0; i < points.length; i++) {\n            if (!points[i].geometry) continue;\n            clusters.push(createPointCluster(points[i], i));\n        }\n        this.trees[maxZoom + 1] = new KDBush(clusters, getX, getY, nodeSize, Float32Array);\n\n        if (log) console.timeEnd(timerId);\n\n        // cluster points on max zoom, then cluster the results on previous zoom, etc.;\n        // results in a cluster hierarchy across zoom levels\n        for (let z = maxZoom; z >= minZoom; z--) {\n            const now = +Date.now();\n\n            // create a new set of clusters for the zoom and index them with a KD-tree\n            clusters = this._cluster(clusters, z);\n            this.trees[z] = new KDBush(clusters, getX, getY, nodeSize, Float32Array);\n\n            if (log) console.log('z%d: %d clusters in %dms', z, clusters.length, +Date.now() - now);\n        }\n\n        if (log) console.timeEnd('total time');\n\n        return this;\n    }\n\n    getClusters(bbox, zoom) {\n        let minLng = ((bbox[0] + 180) % 360 + 360) % 360 - 180;\n        const minLat = Math.max(-90, Math.min(90, bbox[1]));\n        let maxLng = bbox[2] === 180 ? 180 : ((bbox[2] + 180) % 360 + 360) % 360 - 180;\n        const maxLat = Math.max(-90, Math.min(90, bbox[3]));\n\n        if (bbox[2] - bbox[0] >= 360) {\n            minLng = -180;\n            maxLng = 180;\n        } else if (minLng > maxLng) {\n            const easternHem = this.getClusters([minLng, minLat, 180, maxLat], zoom);\n            const westernHem = this.getClusters([-180, minLat, maxLng, maxLat], zoom);\n            return easternHem.concat(westernHem);\n        }\n\n        const tree = this.trees[this._limitZoom(zoom)];\n        const ids = tree.range(lngX(minLng), latY(maxLat), lngX(maxLng), latY(minLat));\n        const clusters = [];\n        for (const id of ids) {\n            const c = tree.points[id];\n            clusters.push(c.numPoints ? getClusterJSON(c) : this.points[c.index]);\n        }\n        return clusters;\n    }\n\n    getChildren(clusterId) {\n        const originId = this._getOriginId(clusterId);\n        const originZoom = this._getOriginZoom(clusterId);\n        const errorMsg = 'No cluster with the specified id.';\n\n        const index = this.trees[originZoom];\n        if (!index) throw new Error(errorMsg);\n\n        const origin = index.points[originId];\n        if (!origin) throw new Error(errorMsg);\n\n        const r = this.options.radius / (this.options.extent * Math.pow(2, originZoom - 1));\n        const ids = index.within(origin.x, origin.y, r);\n        const children = [];\n        for (const id of ids) {\n            const c = index.points[id];\n            if (c.parentId === clusterId) {\n                children.push(c.numPoints ? getClusterJSON(c) : this.points[c.index]);\n            }\n        }\n\n        if (children.length === 0) throw new Error(errorMsg);\n\n        return children;\n    }\n\n    getLeaves(clusterId, limit, offset) {\n        limit = limit || 10;\n        offset = offset || 0;\n\n        const leaves = [];\n        this._appendLeaves(leaves, clusterId, limit, offset, 0);\n\n        return leaves;\n    }\n\n    getTile(z, x, y) {\n        const tree = this.trees[this._limitZoom(z)];\n        const z2 = Math.pow(2, z);\n        const {extent, radius} = this.options;\n        const p = radius / extent;\n        const top = (y - p) / z2;\n        const bottom = (y + 1 + p) / z2;\n\n        const tile = {\n            features: []\n        };\n\n        this._addTileFeatures(\n            tree.range((x - p) / z2, top, (x + 1 + p) / z2, bottom),\n            tree.points, x, y, z2, tile);\n\n        if (x === 0) {\n            this._addTileFeatures(\n                tree.range(1 - p / z2, top, 1, bottom),\n                tree.points, z2, y, z2, tile);\n        }\n        if (x === z2 - 1) {\n            this._addTileFeatures(\n                tree.range(0, top, p / z2, bottom),\n                tree.points, -1, y, z2, tile);\n        }\n\n        return tile.features.length ? tile : null;\n    }\n\n    getClusterExpansionZoom(clusterId) {\n        let expansionZoom = this._getOriginZoom(clusterId) - 1;\n        while (expansionZoom <= this.options.maxZoom) {\n            const children = this.getChildren(clusterId);\n            expansionZoom++;\n            if (children.length !== 1) break;\n            clusterId = children[0].properties.cluster_id;\n        }\n        return expansionZoom;\n    }\n\n    _appendLeaves(result, clusterId, limit, offset, skipped) {\n        const children = this.getChildren(clusterId);\n\n        for (const child of children) {\n            const props = child.properties;\n\n            if (props && props.cluster) {\n                if (skipped + props.point_count <= offset) {\n                    // skip the whole cluster\n                    skipped += props.point_count;\n                } else {\n                    // enter the cluster\n                    skipped = this._appendLeaves(result, props.cluster_id, limit, offset, skipped);\n                    // exit the cluster\n                }\n            } else if (skipped < offset) {\n                // skip a single point\n                skipped++;\n            } else {\n                // add a single point\n                result.push(child);\n            }\n            if (result.length === limit) break;\n        }\n\n        return skipped;\n    }\n\n    _addTileFeatures(ids, points, x, y, z2, tile) {\n        for (const i of ids) {\n            const c = points[i];\n            const isCluster = c.numPoints;\n\n            let tags, px, py;\n            if (isCluster) {\n                tags = getClusterProperties(c);\n                px = c.x;\n                py = c.y;\n            } else {\n                const p = this.points[c.index];\n                tags = p.properties;\n                px = lngX(p.geometry.coordinates[0]);\n                py = latY(p.geometry.coordinates[1]);\n            }\n\n            const f = {\n                type: 1,\n                geometry: [[\n                    Math.round(this.options.extent * (px * z2 - x)),\n                    Math.round(this.options.extent * (py * z2 - y))\n                ]],\n                tags\n            };\n\n            // assign id\n            let id;\n            if (isCluster) {\n                id = c.id;\n            } else if (this.options.generateId) {\n                // optionally generate id\n                id = c.index;\n            } else if (this.points[c.index].id) {\n                // keep id if already assigned\n                id = this.points[c.index].id;\n            }\n\n            if (id !== undefined) f.id = id;\n\n            tile.features.push(f);\n        }\n    }\n\n    _limitZoom(z) {\n        return Math.max(this.options.minZoom, Math.min(+z, this.options.maxZoom + 1));\n    }\n\n    _cluster(points, zoom) {\n        const clusters = [];\n        const {radius, extent, reduce, minPoints} = this.options;\n        const r = radius / (extent * Math.pow(2, zoom));\n\n        // loop through each point\n        for (let i = 0; i < points.length; i++) {\n            const p = points[i];\n            // if we've already visited the point at this zoom level, skip it\n            if (p.zoom <= zoom) continue;\n            p.zoom = zoom;\n\n            // find all nearby points\n            const tree = this.trees[zoom + 1];\n            const neighborIds = tree.within(p.x, p.y, r);\n\n            const numPointsOrigin = p.numPoints || 1;\n            let numPoints = numPointsOrigin;\n\n            // count the number of points in a potential cluster\n            for (const neighborId of neighborIds) {\n                const b = tree.points[neighborId];\n                // filter out neighbors that are already processed\n                if (b.zoom > zoom) numPoints += b.numPoints || 1;\n            }\n\n            // if there were neighbors to merge, and there are enough points to form a cluster\n            if (numPoints > numPointsOrigin && numPoints >= minPoints) {\n                let wx = p.x * numPointsOrigin;\n                let wy = p.y * numPointsOrigin;\n\n                let clusterProperties = reduce && numPointsOrigin > 1 ? this._map(p, true) : null;\n\n                // encode both zoom and point index on which the cluster originated -- offset by total length of features\n                const id = (i << 5) + (zoom + 1) + this.points.length;\n\n                for (const neighborId of neighborIds) {\n                    const b = tree.points[neighborId];\n\n                    if (b.zoom <= zoom) continue;\n                    b.zoom = zoom; // save the zoom (so it doesn't get processed twice)\n\n                    const numPoints2 = b.numPoints || 1;\n                    wx += b.x * numPoints2; // accumulate coordinates for calculating weighted center\n                    wy += b.y * numPoints2;\n\n                    b.parentId = id;\n\n                    if (reduce) {\n                        if (!clusterProperties) clusterProperties = this._map(p, true);\n                        reduce(clusterProperties, this._map(b));\n                    }\n                }\n\n                p.parentId = id;\n                clusters.push(createCluster(wx / numPoints, wy / numPoints, id, numPoints, clusterProperties));\n\n            } else { // left points as unclustered\n                clusters.push(p);\n\n                if (numPoints > 1) {\n                    for (const neighborId of neighborIds) {\n                        const b = tree.points[neighborId];\n                        if (b.zoom <= zoom) continue;\n                        b.zoom = zoom;\n                        clusters.push(b);\n                    }\n                }\n            }\n        }\n\n        return clusters;\n    }\n\n    // get index of the point from which the cluster originated\n    _getOriginId(clusterId) {\n        return (clusterId - this.points.length) >> 5;\n    }\n\n    // get zoom of the point from which the cluster originated\n    _getOriginZoom(clusterId) {\n        return (clusterId - this.points.length) % 32;\n    }\n\n    _map(point, clone) {\n        if (point.numPoints) {\n            return clone ? extend$1({}, point.properties) : point.properties;\n        }\n        const original = this.points[point.index].properties;\n        const result = this.options.map(original);\n        return clone && result === original ? extend$1({}, result) : result;\n    }\n}\n\nfunction createCluster(x, y, id, numPoints, properties) {\n    return {\n        x: fround(x), // weighted cluster center; round for consistency with Float32Array index\n        y: fround(y),\n        zoom: Infinity, // the last zoom the cluster was processed at\n        id, // encodes index of the first child of the cluster and its zoom level\n        parentId: -1, // parent cluster id\n        numPoints,\n        properties\n    };\n}\n\nfunction createPointCluster(p, id) {\n    const [x, y] = p.geometry.coordinates;\n    return {\n        x: fround(lngX(x)), // projected point coordinates\n        y: fround(latY(y)),\n        zoom: Infinity, // the last zoom the point was processed at\n        index: id, // index of the source feature in the original input array,\n        parentId: -1 // parent cluster id\n    };\n}\n\nfunction getClusterJSON(cluster) {\n    return {\n        type: 'Feature',\n        id: cluster.id,\n        properties: getClusterProperties(cluster),\n        geometry: {\n            type: 'Point',\n            coordinates: [xLng(cluster.x), yLat(cluster.y)]\n        }\n    };\n}\n\nfunction getClusterProperties(cluster) {\n    const count = cluster.numPoints;\n    const abbrev =\n        count >= 10000 ? `${Math.round(count / 1000)  }k` :\n        count >= 1000 ? `${Math.round(count / 100) / 10  }k` : count;\n    return extend$1(extend$1({}, cluster.properties), {\n        cluster: true,\n        cluster_id: cluster.id,\n        point_count: count,\n        point_count_abbreviated: abbrev\n    });\n}\n\n// longitude/latitude to spherical mercator in [0..1] range\nfunction lngX(lng) {\n    return lng / 360 + 0.5;\n}\nfunction latY(lat) {\n    const sin = Math.sin(lat * Math.PI / 180);\n    const y = (0.5 - 0.25 * Math.log((1 + sin) / (1 - sin)) / Math.PI);\n    return y < 0 ? 0 : y > 1 ? 1 : y;\n}\n\n// spherical mercator to longitude/latitude\nfunction xLng(x) {\n    return (x - 0.5) * 360;\n}\nfunction yLat(y) {\n    const y2 = (180 - y * 360) * Math.PI / 180;\n    return 360 * Math.atan(Math.exp(y2)) / Math.PI - 90;\n}\n\nfunction extend$1(dest, src) {\n    for (const id in src) dest[id] = src[id];\n    return dest;\n}\n\nfunction getX(p) {\n    return p.x;\n}\nfunction getY(p) {\n    return p.y;\n}\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass Cluster {\n    constructor({ markers, position }) {\n        this.markers = markers;\n        if (position) {\n            if (position instanceof google.maps.LatLng) {\n                this._position = position;\n            }\n            else {\n                this._position = new google.maps.LatLng(position);\n            }\n        }\n    }\n    get bounds() {\n        if (this.markers.length === 0 && !this._position) {\n            return undefined;\n        }\n        return this.markers.reduce((bounds, marker) => {\n            return bounds.extend(marker.getPosition());\n        }, new google.maps.LatLngBounds(this._position, this._position));\n    }\n    get position() {\n        return this._position || this.bounds.getCenter();\n    }\n    /**\n     * Get the count of **visible** markers.\n     */\n    get count() {\n        return this.markers.filter((m) => m.getVisible())\n            .length;\n    }\n    /**\n     * Add a marker to the cluster.\n     */\n    push(marker) {\n        this.markers.push(marker);\n    }\n    /**\n     * Cleanup references and remove marker from map.\n     */\n    delete() {\n        if (this.marker) {\n            this.marker.setMap(null);\n            delete this.marker;\n        }\n        this.markers.length = 0;\n    }\n}\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst filterMarkersToPaddedViewport = (map, mapCanvasProjection, markers, viewportPadding) => {\n    const extendedMapBounds = extendBoundsToPaddedViewport(map.getBounds(), mapCanvasProjection, viewportPadding);\n    return markers.filter((marker) => extendedMapBounds.contains(marker.getPosition()));\n};\n/**\n * Extends a bounds by a number of pixels in each direction.\n */\nconst extendBoundsToPaddedViewport = (bounds, projection, pixels) => {\n    const { northEast, southWest } = latLngBoundsToPixelBounds(bounds, projection);\n    const extendedPixelBounds = extendPixelBounds({ northEast, southWest }, pixels);\n    return pixelBoundsToLatLngBounds(extendedPixelBounds, projection);\n};\n/**\n * @hidden\n */\nconst distanceBetweenPoints = (p1, p2) => {\n    const R = 6371; // Radius of the Earth in km\n    const dLat = ((p2.lat - p1.lat) * Math.PI) / 180;\n    const dLon = ((p2.lng - p1.lng) * Math.PI) / 180;\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos((p1.lat * Math.PI) / 180) *\n            Math.cos((p2.lat * Math.PI) / 180) *\n            Math.sin(dLon / 2) *\n            Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n};\n/**\n * @hidden\n */\nconst latLngBoundsToPixelBounds = (bounds, projection) => {\n    return {\n        northEast: projection.fromLatLngToDivPixel(bounds.getNorthEast()),\n        southWest: projection.fromLatLngToDivPixel(bounds.getSouthWest()),\n    };\n};\n/**\n * @hidden\n */\nconst extendPixelBounds = ({ northEast, southWest }, pixels) => {\n    northEast.x += pixels;\n    northEast.y -= pixels;\n    southWest.x -= pixels;\n    southWest.y += pixels;\n    return { northEast, southWest };\n};\n/**\n * @hidden\n */\nconst pixelBoundsToLatLngBounds = ({ northEast, southWest }, projection) => {\n    const bounds = new google.maps.LatLngBounds();\n    bounds.extend(projection.fromDivPixelToLatLng(northEast));\n    bounds.extend(projection.fromDivPixelToLatLng(southWest));\n    return bounds;\n};\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @hidden\n */\nclass AbstractAlgorithm {\n    constructor({ maxZoom = 16 }) {\n        this.maxZoom = maxZoom;\n    }\n    /**\n     * Helper function to bypass clustering based upon some map state such as\n     * zoom, number of markers, etc.\n     *\n     * ```typescript\n     *  cluster({markers, map}: AlgorithmInput): Cluster[] {\n     *    if (shouldBypassClustering(map)) {\n     *      return this.noop({markers, map})\n     *    }\n     * }\n     * ```\n     */\n    noop({ markers }) {\n        return noop$1(markers);\n    }\n}\n/**\n * Abstract viewport algorithm proves a class to filter markers by a padded\n * viewport. This is a common optimization.\n *\n * @hidden\n */\nclass AbstractViewportAlgorithm extends AbstractAlgorithm {\n    constructor(_a) {\n        var { viewportPadding = 60 } = _a, options = __rest(_a, [\"viewportPadding\"]);\n        super(options);\n        this.viewportPadding = 60;\n        this.viewportPadding = viewportPadding;\n    }\n    calculate({ markers, map, mapCanvasProjection, }) {\n        if (map.getZoom() >= this.maxZoom) {\n            return {\n                clusters: this.noop({\n                    markers,\n                    map,\n                    mapCanvasProjection,\n                }),\n                changed: false,\n            };\n        }\n        return {\n            clusters: this.cluster({\n                markers: filterMarkersToPaddedViewport(map, mapCanvasProjection, markers, this.viewportPadding),\n                map,\n                mapCanvasProjection,\n            }),\n        };\n    }\n}\n/**\n * @hidden\n */\nconst noop$1 = (markers) => {\n    const clusters = markers.map((marker) => new Cluster({\n        position: marker.getPosition(),\n        markers: [marker],\n    }));\n    return clusters;\n};\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The default Grid algorithm historically used in Google Maps marker\n * clustering.\n *\n * The Grid algorithm does not implement caching and markers may flash as the\n * viewport changes. Instead use {@link SuperClusterAlgorithm}.\n */\nclass GridAlgorithm extends AbstractViewportAlgorithm {\n    constructor(_a) {\n        var { maxDistance = 40000, gridSize = 40 } = _a, options = __rest(_a, [\"maxDistance\", \"gridSize\"]);\n        super(options);\n        this.clusters = [];\n        this.maxDistance = maxDistance;\n        this.gridSize = gridSize;\n        this.state = { zoom: null };\n    }\n    calculate({ markers, map, mapCanvasProjection, }) {\n        const state = { zoom: map.getZoom() };\n        let changed = false;\n        if (this.state.zoom > this.maxZoom && state.zoom > this.maxZoom) ;\n        else {\n            changed = !fastDeepEqual(this.state, state);\n        }\n        this.state = state;\n        if (map.getZoom() >= this.maxZoom) {\n            return {\n                clusters: this.noop({\n                    markers,\n                    map,\n                    mapCanvasProjection,\n                }),\n                changed: changed,\n            };\n        }\n        return {\n            clusters: this.cluster({\n                markers: filterMarkersToPaddedViewport(map, mapCanvasProjection, markers, this.viewportPadding),\n                map,\n                mapCanvasProjection,\n            }),\n        };\n    }\n    cluster({ markers, map, mapCanvasProjection, }) {\n        this.clusters = [];\n        markers.forEach((marker) => {\n            this.addToClosestCluster(marker, map, mapCanvasProjection);\n        });\n        return this.clusters;\n    }\n    addToClosestCluster(marker, map, projection) {\n        let maxDistance = this.maxDistance; // Some large number\n        let cluster = null;\n        for (let i = 0; i < this.clusters.length; i++) {\n            const candidate = this.clusters[i];\n            const distance = distanceBetweenPoints(candidate.bounds.getCenter().toJSON(), marker.getPosition().toJSON());\n            if (distance < maxDistance) {\n                maxDistance = distance;\n                cluster = candidate;\n            }\n        }\n        if (cluster &&\n            extendBoundsToPaddedViewport(cluster.bounds, projection, this.gridSize).contains(marker.getPosition())) {\n            cluster.push(marker);\n        }\n        else {\n            const cluster = new Cluster({ markers: [marker] });\n            this.clusters.push(cluster);\n        }\n    }\n}\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Noop algorithm does not generate any clusters or filter markers by the an extended viewport.\n */\nclass NoopAlgorithm extends AbstractAlgorithm {\n    constructor(_a) {\n        var options = __rest(_a, []);\n        super(options);\n    }\n    calculate({ markers, map, mapCanvasProjection, }) {\n        return {\n            clusters: this.cluster({ markers, map, mapCanvasProjection }),\n            changed: false,\n        };\n    }\n    cluster(input) {\n        return this.noop(input);\n    }\n}\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A very fast JavaScript algorithm for geospatial point clustering using KD trees.\n *\n * @see https://www.npmjs.com/package/supercluster for more information on options.\n */\nclass SuperClusterAlgorithm extends AbstractAlgorithm {\n    constructor(_a) {\n        var { maxZoom, radius = 60 } = _a, options = __rest(_a, [\"maxZoom\", \"radius\"]);\n        super({ maxZoom });\n        this.superCluster = new Supercluster(Object.assign({ maxZoom: this.maxZoom, radius }, options));\n        this.state = { zoom: null };\n    }\n    calculate(input) {\n        let changed = false;\n        if (!fastDeepEqual(input.markers, this.markers)) {\n            changed = true;\n            // TODO use proxy to avoid copy?\n            this.markers = [...input.markers];\n            const points = this.markers.map((marker) => {\n                return {\n                    type: \"Feature\",\n                    geometry: {\n                        type: \"Point\",\n                        coordinates: [\n                            marker.getPosition().lng(),\n                            marker.getPosition().lat(),\n                        ],\n                    },\n                    properties: { marker },\n                };\n            });\n            this.superCluster.load(points);\n        }\n        const state = { zoom: input.map.getZoom() };\n        if (!changed) {\n            if (this.state.zoom > this.maxZoom && state.zoom > this.maxZoom) ;\n            else {\n                changed = changed || !fastDeepEqual(this.state, state);\n            }\n        }\n        this.state = state;\n        if (changed) {\n            this.clusters = this.cluster(input);\n        }\n        return { clusters: this.clusters, changed };\n    }\n    cluster({ map }) {\n        return this.superCluster\n            .getClusters([-180, -90, 180, 90], Math.round(map.getZoom()))\n            .map(this.transformCluster.bind(this));\n    }\n    transformCluster({ geometry: { coordinates: [lng, lat], }, properties, }) {\n        if (properties.cluster) {\n            return new Cluster({\n                markers: this.superCluster\n                    .getLeaves(properties.cluster_id, Infinity)\n                    .map((leaf) => leaf.properties.marker),\n                position: new google.maps.LatLng({ lat, lng }),\n            });\n        }\n        else {\n            const marker = properties.marker;\n            return new Cluster({\n                markers: [marker],\n                position: marker.getPosition(),\n            });\n        }\n    }\n}\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Provides statistics on all clusters in the current render cycle for use in {@link Renderer.render}.\n */\nclass ClusterStats {\n    constructor(markers, clusters) {\n        this.markers = { sum: markers.length };\n        const clusterMarkerCounts = clusters.map((a) => a.count);\n        const clusterMarkerSum = clusterMarkerCounts.reduce((a, b) => a + b, 0);\n        this.clusters = {\n            count: clusters.length,\n            markers: {\n                mean: clusterMarkerSum / clusters.length,\n                sum: clusterMarkerSum,\n                min: Math.min(...clusterMarkerCounts),\n                max: Math.max(...clusterMarkerCounts),\n            },\n        };\n    }\n}\nclass DefaultRenderer {\n    /**\n     * The default render function for the library used by {@link MarkerClusterer}.\n     *\n     * Currently set to use the following:\n     *\n     * ```typescript\n     * // change color if this cluster has more markers than the mean cluster\n     * const color =\n     *   count > Math.max(10, stats.clusters.markers.mean)\n     *     ? \"#ff0000\"\n     *     : \"#0000ff\";\n     *\n     * // create svg url with fill color\n     * const svg = window.btoa(`\n     * <svg fill=\"${color}\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 240 240\">\n     *   <circle cx=\"120\" cy=\"120\" opacity=\".6\" r=\"70\" />\n     *   <circle cx=\"120\" cy=\"120\" opacity=\".3\" r=\"90\" />\n     *   <circle cx=\"120\" cy=\"120\" opacity=\".2\" r=\"110\" />\n     *   <circle cx=\"120\" cy=\"120\" opacity=\".1\" r=\"130\" />\n     * </svg>`);\n     *\n     * // create marker using svg icon\n     * return new google.maps.Marker({\n     *   position,\n     *   icon: {\n     *     url: `data:image/svg+xml;base64,${svg}`,\n     *     scaledSize: new google.maps.Size(45, 45),\n     *   },\n     *   label: {\n     *     text: String(count),\n     *     color: \"rgba(255,255,255,0.9)\",\n     *     fontSize: \"12px\",\n     *   },\n     *   // adjust zIndex to be above other markers\n     *   zIndex: 1000 + count,\n     * });\n     * ```\n     */\n    render({ count, position }, stats) {\n        // change color if this cluster has more markers than the mean cluster\n        const color = count > Math.max(10, stats.clusters.markers.mean) ? \"#ff0000\" : \"#0000ff\";\n        // create svg url with fill color\n        const svg = window.btoa(`\n  <svg fill=\"${color}\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 240 240\">\n    <circle cx=\"120\" cy=\"120\" opacity=\".6\" r=\"70\" />\n    <circle cx=\"120\" cy=\"120\" opacity=\".3\" r=\"90\" />\n    <circle cx=\"120\" cy=\"120\" opacity=\".2\" r=\"110\" />\n  </svg>`);\n        // create marker using svg icon\n        return new google.maps.Marker({\n            position,\n            icon: {\n                url: `data:image/svg+xml;base64,${svg}`,\n                scaledSize: new google.maps.Size(45, 45),\n            },\n            label: {\n                text: String(count),\n                color: \"rgba(255,255,255,0.9)\",\n                fontSize: \"12px\",\n            },\n            title: `Cluster of ${count} markers`,\n            // adjust zIndex to be above other markers\n            zIndex: Number(google.maps.Marker.MAX_ZINDEX) + count,\n        });\n    }\n}\n\n/**\n * Copyright 2019 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Extends an object's prototype by another's.\n *\n * @param type1 The Type to be extended.\n * @param type2 The Type to extend with.\n * @ignore\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction extend(type1, type2) {\n    /* istanbul ignore next */\n    // eslint-disable-next-line prefer-const\n    for (let property in type2.prototype) {\n        type1.prototype[property] = type2.prototype[property];\n    }\n}\n/**\n * @ignore\n */\nclass OverlayViewSafe {\n    constructor() {\n        // MarkerClusterer implements google.maps.OverlayView interface. We use the\n        // extend function to extend MarkerClusterer with google.maps.OverlayView\n        // because it might not always be available when the code is defined so we\n        // look for it at the last possible moment. If it doesn't exist now then\n        // there is no point going ahead :)\n        extend(OverlayViewSafe, google.maps.OverlayView);\n    }\n}\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar MarkerClustererEvents;\n(function (MarkerClustererEvents) {\n    MarkerClustererEvents[\"CLUSTERING_BEGIN\"] = \"clusteringbegin\";\n    MarkerClustererEvents[\"CLUSTERING_END\"] = \"clusteringend\";\n    MarkerClustererEvents[\"CLUSTER_CLICK\"] = \"click\";\n})(MarkerClustererEvents || (MarkerClustererEvents = {}));\nconst defaultOnClusterClickHandler = (_, cluster, map) => {\n    map.fitBounds(cluster.bounds);\n};\n/**\n * MarkerClusterer creates and manages per-zoom-level clusters for large amounts\n * of markers. See {@link MarkerClustererOptions} for more details.\n *\n */\nclass MarkerClusterer extends OverlayViewSafe {\n    constructor({ map, markers = [], algorithm = new SuperClusterAlgorithm({}), renderer = new DefaultRenderer(), onClusterClick = defaultOnClusterClickHandler, }) {\n        super();\n        this.markers = [...markers];\n        this.clusters = [];\n        this.algorithm = algorithm;\n        this.renderer = renderer;\n        this.onClusterClick = onClusterClick;\n        if (map) {\n            this.setMap(map);\n        }\n    }\n    addMarker(marker, noDraw) {\n        if (this.markers.includes(marker)) {\n            return;\n        }\n        this.markers.push(marker);\n        if (!noDraw) {\n            this.render();\n        }\n    }\n    addMarkers(markers, noDraw) {\n        markers.forEach((marker) => {\n            this.addMarker(marker, true);\n        });\n        if (!noDraw) {\n            this.render();\n        }\n    }\n    removeMarker(marker, noDraw) {\n        const index = this.markers.indexOf(marker);\n        if (index === -1) {\n            // Marker is not in our list of markers, so do nothing:\n            return false;\n        }\n        marker.setMap(null);\n        this.markers.splice(index, 1); // Remove the marker from the list of managed markers\n        if (!noDraw) {\n            this.render();\n        }\n        return true;\n    }\n    removeMarkers(markers, noDraw) {\n        let removed = false;\n        markers.forEach((marker) => {\n            removed = this.removeMarker(marker, true) || removed;\n        });\n        if (removed && !noDraw) {\n            this.render();\n        }\n        return removed;\n    }\n    clearMarkers(noDraw) {\n        this.markers.length = 0;\n        if (!noDraw) {\n            this.render();\n        }\n    }\n    /**\n     * Recalculates and draws all the marker clusters.\n     */\n    render() {\n        const map = this.getMap();\n        if (map instanceof google.maps.Map && this.getProjection()) {\n            google.maps.event.trigger(this, MarkerClustererEvents.CLUSTERING_BEGIN, this);\n            const { clusters, changed } = this.algorithm.calculate({\n                markers: this.markers,\n                map,\n                mapCanvasProjection: this.getProjection(),\n            });\n            // allow algorithms to return flag on whether the clusters/markers have changed\n            if (changed || changed == undefined) {\n                // reset visibility of markers and clusters\n                this.reset();\n                // store new clusters\n                this.clusters = clusters;\n                this.renderClusters();\n            }\n            google.maps.event.trigger(this, MarkerClustererEvents.CLUSTERING_END, this);\n        }\n    }\n    onAdd() {\n        this.idleListener = this.getMap().addListener(\"idle\", this.render.bind(this));\n        this.render();\n    }\n    onRemove() {\n        google.maps.event.removeListener(this.idleListener);\n        this.reset();\n    }\n    reset() {\n        this.markers.forEach((marker) => marker.setMap(null));\n        this.clusters.forEach((cluster) => cluster.delete());\n        this.clusters = [];\n    }\n    renderClusters() {\n        // generate stats to pass to renderers\n        const stats = new ClusterStats(this.markers, this.clusters);\n        const map = this.getMap();\n        this.clusters.forEach((cluster) => {\n            if (cluster.markers.length === 1) {\n                cluster.marker = cluster.markers[0];\n            }\n            else {\n                cluster.marker = this.renderer.render(cluster, stats);\n                if (this.onClusterClick) {\n                    cluster.marker.addListener(\"click\", \n                    /* istanbul ignore next */\n                    (event) => {\n                        google.maps.event.trigger(this, MarkerClustererEvents.CLUSTER_CLICK, cluster);\n                        this.onClusterClick(event, cluster, map);\n                    });\n                }\n            }\n            cluster.marker.setMap(map);\n        });\n    }\n}\n\nvar index_esm = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tAbstractAlgorithm: AbstractAlgorithm,\n\tAbstractViewportAlgorithm: AbstractViewportAlgorithm,\n\tCluster: Cluster,\n\tClusterStats: ClusterStats,\n\tDefaultRenderer: DefaultRenderer,\n\tGridAlgorithm: GridAlgorithm,\n\tMarkerClusterer: MarkerClusterer,\n\tget MarkerClustererEvents () { return MarkerClustererEvents; },\n\tNoopAlgorithm: NoopAlgorithm,\n\tSuperClusterAlgorithm: SuperClusterAlgorithm,\n\tdefaultOnClusterClickHandler: defaultOnClusterClickHandler,\n\tdistanceBetweenPoints: distanceBetweenPoints,\n\textendBoundsToPaddedViewport: extendBoundsToPaddedViewport,\n\textendPixelBounds: extendPixelBounds,\n\tfilterMarkersToPaddedViewport: filterMarkersToPaddedViewport,\n\tnoop: noop$1,\n\tpixelBoundsToLatLngBounds: pixelBoundsToLatLngBounds\n});\n\nfunction useGoogleMarkerClusterer(options) {\n    const map = useGoogleMap();\n    const [markerClusterer, setMarkerClusterer] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (map && markerClusterer === null) {\n            const markerCluster = new MarkerClusterer(Object.assign(Object.assign({}, options), { map }));\n            setMarkerClusterer(markerCluster);\n        }\n    }, [map]);\n    return markerClusterer;\n}\n/** Wrapper around [@googlemaps/markerclusterer](https://github.com/googlemaps/js-markerclusterer)\n *\n * Accepts {@link  MarkerClustererOptionsSubset} which is a subset of  {@link MarkerClustererOptions}\n */\nfunction GoogleMarkerClusterer({ children, options }) {\n    const markerClusterer = useGoogleMarkerClusterer(options);\n    return markerClusterer !== null ? children(markerClusterer) : null;\n}\nvar GoogleMarkerClusterer$1 = (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(GoogleMarkerClusterer);\n\n/* global google */\nconst eventMap$c = {\n    onCloseClick: 'closeclick',\n    onContentChanged: 'content_changed',\n    onDomReady: 'domready',\n    onPositionChanged: 'position_changed',\n    onZindexChanged: 'zindex_changed',\n};\nconst updaterMap$c = {\n    options(instance, options) {\n        instance.setOptions(options);\n    },\n    position(instance, position) {\n        instance.setPosition(position);\n    },\n    zIndex(instance, zIndex) {\n        instance.setZIndex(zIndex);\n    },\n};\nfunction InfoWindowFunctional({ children, anchor, options, position, zIndex, onCloseClick, onDomReady, onContentChanged, onPositionChanged, onZindexChanged, onLoad, onUnmount }) {\n    const map = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(MapContext);\n    const [instance, setInstance] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [closeclickListener, setCloseClickListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [domreadyclickListener, setDomReadyClickListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [contentchangedclickListener, setContentChangedClickListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [positionchangedclickListener, setPositionChangedClickListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [zindexchangedclickListener, setZindexChangedClickListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const containerElementRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    // Order does matter\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance !== null) {\n            instance.close();\n            if (anchor) {\n                instance.open(map, anchor);\n            }\n            else if (instance.getPosition()) {\n                instance.open(map);\n            }\n        }\n    }, [map, instance, anchor]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (options && instance !== null) {\n            instance.setOptions(options);\n        }\n    }, [instance, options]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (position && instance !== null) {\n            instance.setPosition(position);\n        }\n    }, [position]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (typeof zIndex === 'number' && instance !== null) {\n            instance.setZIndex(zIndex);\n        }\n    }, [zIndex]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onCloseClick) {\n            if (closeclickListener !== null) {\n                google.maps.event.removeListener(closeclickListener);\n            }\n            setCloseClickListener(google.maps.event.addListener(instance, 'closeclick', onCloseClick));\n        }\n    }, [onCloseClick]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onDomReady) {\n            if (domreadyclickListener !== null) {\n                google.maps.event.removeListener(domreadyclickListener);\n            }\n            setDomReadyClickListener(google.maps.event.addListener(instance, 'domready', onDomReady));\n        }\n    }, [onDomReady]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onContentChanged) {\n            if (contentchangedclickListener !== null) {\n                google.maps.event.removeListener(contentchangedclickListener);\n            }\n            setContentChangedClickListener(google.maps.event.addListener(instance, 'content_changed', onContentChanged));\n        }\n    }, [onContentChanged]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onPositionChanged) {\n            if (positionchangedclickListener !== null) {\n                google.maps.event.removeListener(positionchangedclickListener);\n            }\n            setPositionChangedClickListener(google.maps.event.addListener(instance, 'position_changed', onPositionChanged));\n        }\n    }, [onPositionChanged]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onZindexChanged) {\n            if (zindexchangedclickListener !== null) {\n                google.maps.event.removeListener(zindexchangedclickListener);\n            }\n            setZindexChangedClickListener(google.maps.event.addListener(instance, 'zindex_changed', onZindexChanged));\n        }\n    }, [onZindexChanged]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        const infoWindow = new google.maps.InfoWindow(Object.assign({}, (options || {})));\n        setInstance(infoWindow);\n        containerElementRef.current = document.createElement('div');\n        if (onCloseClick) {\n            setCloseClickListener(google.maps.event.addListener(infoWindow, 'closeclick', onCloseClick));\n        }\n        if (onDomReady) {\n            setDomReadyClickListener(google.maps.event.addListener(infoWindow, 'domready', onDomReady));\n        }\n        if (onContentChanged) {\n            setContentChangedClickListener(google.maps.event.addListener(infoWindow, 'content_changed', onContentChanged));\n        }\n        if (onPositionChanged) {\n            setPositionChangedClickListener(google.maps.event.addListener(infoWindow, 'position_changed', onPositionChanged));\n        }\n        if (onZindexChanged) {\n            setZindexChangedClickListener(google.maps.event.addListener(infoWindow, 'zindex_changed', onZindexChanged));\n        }\n        infoWindow.setContent(containerElementRef.current);\n        if (position) {\n            infoWindow.setPosition(position);\n        }\n        if (zIndex) {\n            infoWindow.setZIndex(zIndex);\n        }\n        if (anchor) {\n            infoWindow.open(map, anchor);\n        }\n        else if (infoWindow.getPosition()) {\n            infoWindow.open(map);\n        }\n        else {\n            invariant_1(false, `You must provide either an anchor (typically render it inside a <Marker>) or a position props for <InfoWindow>.`);\n        }\n        if (onLoad) {\n            onLoad(infoWindow);\n        }\n        return () => {\n            if (closeclickListener) {\n                google.maps.event.removeListener(closeclickListener);\n            }\n            if (contentchangedclickListener) {\n                google.maps.event.removeListener(contentchangedclickListener);\n            }\n            if (domreadyclickListener) {\n                google.maps.event.removeListener(domreadyclickListener);\n            }\n            if (positionchangedclickListener) {\n                google.maps.event.removeListener(positionchangedclickListener);\n            }\n            if (zindexchangedclickListener) {\n                google.maps.event.removeListener(zindexchangedclickListener);\n            }\n            if (onUnmount) {\n                onUnmount(infoWindow);\n            }\n            infoWindow.close();\n        };\n    }, []);\n    return containerElementRef.current ? ((0,react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal)(react__WEBPACK_IMPORTED_MODULE_0__.Children.only(children), containerElementRef.current)) : (null);\n}\nconst InfoWindowF = (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(InfoWindowFunctional);\nclass InfoWindow extends react__WEBPACK_IMPORTED_MODULE_0__.PureComponent {\n    constructor() {\n        super(...arguments);\n        this.registeredEvents = [];\n        this.containerElement = null;\n        this.state = {\n            infoWindow: null,\n        };\n        this.open = (infoWindow, anchor) => {\n            if (anchor) {\n                infoWindow.open(this.context, anchor);\n            }\n            else if (infoWindow.getPosition()) {\n                // @ts-ignore\n                infoWindow.open(this.context);\n            }\n            else {\n                invariant_1(false, `You must provide either an anchor (typically render it inside a <Marker>) or a position props for <InfoWindow>.`);\n            }\n        };\n        this.setInfoWindowCallback = () => {\n            if (this.state.infoWindow !== null && this.containerElement !== null) {\n                this.state.infoWindow.setContent(this.containerElement);\n                this.open(this.state.infoWindow, this.props.anchor);\n                if (this.props.onLoad) {\n                    this.props.onLoad(this.state.infoWindow);\n                }\n            }\n        };\n    }\n    componentDidMount() {\n        const infoWindow = new google.maps.InfoWindow(Object.assign({}, (this.props.options || {})));\n        this.containerElement = document.createElement('div');\n        this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({\n            updaterMap: updaterMap$c,\n            eventMap: eventMap$c,\n            prevProps: {},\n            nextProps: this.props,\n            instance: infoWindow,\n        });\n        this.setState(() => {\n            return {\n                infoWindow,\n            };\n        }, this.setInfoWindowCallback);\n    }\n    componentDidUpdate(prevProps) {\n        if (this.state.infoWindow !== null) {\n            unregisterEvents(this.registeredEvents);\n            this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({\n                updaterMap: updaterMap$c,\n                eventMap: eventMap$c,\n                prevProps,\n                nextProps: this.props,\n                instance: this.state.infoWindow,\n            });\n        }\n    }\n    componentWillUnmount() {\n        if (this.state.infoWindow !== null) {\n            unregisterEvents(this.registeredEvents);\n            if (this.props.onUnmount) {\n                this.props.onUnmount(this.state.infoWindow);\n            }\n            this.state.infoWindow.close();\n        }\n    }\n    render() {\n        return this.containerElement ? ((0,react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal)(react__WEBPACK_IMPORTED_MODULE_0__.Children.only(this.props.children), this.containerElement)) : (null);\n    }\n}\nInfoWindow.contextType = MapContext;\n\nconst eventMap$b = {\n    onClick: 'click',\n    onDblClick: 'dblclick',\n    onDrag: 'drag',\n    onDragEnd: 'dragend',\n    onDragStart: 'dragstart',\n    onMouseDown: 'mousedown',\n    onMouseMove: 'mousemove',\n    onMouseOut: 'mouseout',\n    onMouseOver: 'mouseover',\n    onMouseUp: 'mouseup',\n    onRightClick: 'rightclick',\n};\nconst updaterMap$b = {\n    draggable(instance, draggable) {\n        instance.setDraggable(draggable);\n    },\n    editable(instance, editable) {\n        instance.setEditable(editable);\n    },\n    map(instance, map) {\n        instance.setMap(map);\n    },\n    options(instance, options) {\n        instance.setOptions(options);\n    },\n    path(instance, path) {\n        instance.setPath(path);\n    },\n    visible(instance, visible) {\n        instance.setVisible(visible);\n    },\n};\nconst defaultOptions$1 = {};\nfunction PolylineFunctional({ options, draggable, editable, visible, path, onDblClick, onDragEnd, onDragStart, onMouseDown, onMouseMove, onMouseOut, onMouseOver, onMouseUp, onRightClick, onClick, onDrag, onLoad, onUnmount, }) {\n    const map = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(MapContext);\n    const [instance, setInstance] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [dblclickListener, setDblclickListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [dragendListener, setDragendListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [dragstartListener, setDragstartListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [mousedownListener, setMousedownListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [mousemoveListener, setMousemoveListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [mouseoutListener, setMouseoutListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [mouseoverListener, setMouseoverListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [mouseupListener, setMouseupListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [rightclickListener, setRightclickListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [clickListener, setClickListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [dragListener, setDragListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    // Order does matter\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance !== null) {\n            instance.setMap(map);\n        }\n    }, [map]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (typeof options !== 'undefined' && instance !== null) {\n            instance.setOptions(options);\n        }\n    }, [instance, options]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (typeof draggable !== 'undefined' && instance !== null) {\n            instance.setDraggable(draggable);\n        }\n    }, [instance, draggable]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (typeof editable !== 'undefined' && instance !== null) {\n            instance.setEditable(editable);\n        }\n    }, [instance, editable]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (typeof visible !== 'undefined' && instance !== null) {\n            instance.setVisible(visible);\n        }\n    }, [instance, visible]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (typeof path !== 'undefined' && instance !== null) {\n            instance.setPath(path);\n        }\n    }, [instance, path]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onDblClick) {\n            if (dblclickListener !== null) {\n                google.maps.event.removeListener(dblclickListener);\n            }\n            setDblclickListener(google.maps.event.addListener(instance, 'dblclick', onDblClick));\n        }\n    }, [onDblClick]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onDragEnd) {\n            if (dragendListener !== null) {\n                google.maps.event.removeListener(dragendListener);\n            }\n            setDragendListener(google.maps.event.addListener(instance, 'dragend', onDragEnd));\n        }\n    }, [onDragEnd]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onDragStart) {\n            if (dragstartListener !== null) {\n                google.maps.event.removeListener(dragstartListener);\n            }\n            setDragstartListener(google.maps.event.addListener(instance, 'dragstart', onDragStart));\n        }\n    }, [onDragStart]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onMouseDown) {\n            if (mousedownListener !== null) {\n                google.maps.event.removeListener(mousedownListener);\n            }\n            setMousedownListener(google.maps.event.addListener(instance, 'mousedown', onMouseDown));\n        }\n    }, [onMouseDown]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onMouseMove) {\n            if (mousemoveListener !== null) {\n                google.maps.event.removeListener(mousemoveListener);\n            }\n            setMousemoveListener(google.maps.event.addListener(instance, 'mousemove', onMouseMove));\n        }\n    }, [onMouseMove]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onMouseOut) {\n            if (mouseoutListener !== null) {\n                google.maps.event.removeListener(mouseoutListener);\n            }\n            setMouseoutListener(google.maps.event.addListener(instance, 'mouseout', onMouseOut));\n        }\n    }, [onMouseOut]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onMouseOver) {\n            if (mouseoverListener !== null) {\n                google.maps.event.removeListener(mouseoverListener);\n            }\n            setMouseoverListener(google.maps.event.addListener(instance, 'mouseover', onMouseOver));\n        }\n    }, [onMouseOver]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onMouseUp) {\n            if (mouseupListener !== null) {\n                google.maps.event.removeListener(mouseupListener);\n            }\n            setMouseupListener(google.maps.event.addListener(instance, 'mouseup', onMouseUp));\n        }\n    }, [onMouseUp]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onRightClick) {\n            if (rightclickListener !== null) {\n                google.maps.event.removeListener(rightclickListener);\n            }\n            setRightclickListener(google.maps.event.addListener(instance, 'rightclick', onRightClick));\n        }\n    }, [onRightClick]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onClick) {\n            if (clickListener !== null) {\n                google.maps.event.removeListener(clickListener);\n            }\n            setClickListener(google.maps.event.addListener(instance, 'click', onClick));\n        }\n    }, [onClick]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onDrag) {\n            if (dragListener !== null) {\n                google.maps.event.removeListener(dragListener);\n            }\n            setDragListener(google.maps.event.addListener(instance, 'drag', onDrag));\n        }\n    }, [onDrag]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        const polyline = new google.maps.Polyline(Object.assign(Object.assign({}, (options || defaultOptions$1)), { map }));\n        if (path) {\n            polyline.setPath(path);\n        }\n        if (typeof visible !== 'undefined') {\n            polyline.setVisible(visible);\n        }\n        if (typeof editable !== 'undefined') {\n            polyline.setEditable(editable);\n        }\n        if (typeof draggable !== 'undefined') {\n            polyline.setDraggable(draggable);\n        }\n        if (onDblClick) {\n            setDblclickListener(google.maps.event.addListener(polyline, 'dblclick', onDblClick));\n        }\n        if (onDragEnd) {\n            setDragendListener(google.maps.event.addListener(polyline, 'dragend', onDragEnd));\n        }\n        if (onDragStart) {\n            setDragstartListener(google.maps.event.addListener(polyline, 'dragstart', onDragStart));\n        }\n        if (onMouseDown) {\n            setMousedownListener(google.maps.event.addListener(polyline, 'mousedown', onMouseDown));\n        }\n        if (onMouseMove) {\n            setMousemoveListener(google.maps.event.addListener(polyline, 'mousemove', onMouseMove));\n        }\n        if (onMouseOut) {\n            setMouseoutListener(google.maps.event.addListener(polyline, 'mouseout', onMouseOut));\n        }\n        if (onMouseOver) {\n            setMouseoverListener(google.maps.event.addListener(polyline, 'mouseover', onMouseOver));\n        }\n        if (onMouseUp) {\n            setMouseupListener(google.maps.event.addListener(polyline, 'mouseup', onMouseUp));\n        }\n        if (onRightClick) {\n            setRightclickListener(google.maps.event.addListener(polyline, 'rightclick', onRightClick));\n        }\n        if (onClick) {\n            setClickListener(google.maps.event.addListener(polyline, 'click', onClick));\n        }\n        if (onDrag) {\n            setDragListener(google.maps.event.addListener(polyline, 'drag', onDrag));\n        }\n        setInstance(polyline);\n        if (onLoad) {\n            onLoad(polyline);\n        }\n        return () => {\n            if (dblclickListener !== null) {\n                google.maps.event.removeListener(dblclickListener);\n            }\n            if (dragendListener !== null) {\n                google.maps.event.removeListener(dragendListener);\n            }\n            if (dragstartListener !== null) {\n                google.maps.event.removeListener(dragstartListener);\n            }\n            if (mousedownListener !== null) {\n                google.maps.event.removeListener(mousedownListener);\n            }\n            if (mousemoveListener !== null) {\n                google.maps.event.removeListener(mousemoveListener);\n            }\n            if (mouseoutListener !== null) {\n                google.maps.event.removeListener(mouseoutListener);\n            }\n            if (mouseoverListener !== null) {\n                google.maps.event.removeListener(mouseoverListener);\n            }\n            if (mouseupListener !== null) {\n                google.maps.event.removeListener(mouseupListener);\n            }\n            if (rightclickListener !== null) {\n                google.maps.event.removeListener(rightclickListener);\n            }\n            if (clickListener !== null) {\n                google.maps.event.removeListener(clickListener);\n            }\n            if (onUnmount) {\n                onUnmount(polyline);\n            }\n            polyline.setMap(null);\n        };\n    }, []);\n    return null;\n}\nconst PolylineF = (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(PolylineFunctional);\nclass Polyline extends react__WEBPACK_IMPORTED_MODULE_0__.PureComponent {\n    constructor() {\n        super(...arguments);\n        this.registeredEvents = [];\n        this.state = {\n            polyline: null,\n        };\n        this.setPolylineCallback = () => {\n            if (this.state.polyline !== null && this.props.onLoad) {\n                this.props.onLoad(this.state.polyline);\n            }\n        };\n    }\n    componentDidMount() {\n        const polyline = new google.maps.Polyline(Object.assign(Object.assign({}, (this.props.options || {})), { map: this.context }));\n        this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({\n            updaterMap: updaterMap$b,\n            eventMap: eventMap$b,\n            prevProps: {},\n            nextProps: this.props,\n            instance: polyline,\n        });\n        this.setState(function setPolyline() {\n            return {\n                polyline,\n            };\n        }, this.setPolylineCallback);\n    }\n    componentDidUpdate(prevProps) {\n        if (this.state.polyline !== null) {\n            unregisterEvents(this.registeredEvents);\n            this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({\n                updaterMap: updaterMap$b,\n                eventMap: eventMap$b,\n                prevProps,\n                nextProps: this.props,\n                instance: this.state.polyline,\n            });\n        }\n    }\n    componentWillUnmount() {\n        if (this.state.polyline !== null) {\n            if (this.props.onUnmount) {\n                this.props.onUnmount(this.state.polyline);\n            }\n            unregisterEvents(this.registeredEvents);\n            this.state.polyline.setMap(null);\n        }\n    }\n    render() {\n        return null;\n    }\n}\nPolyline.contextType = MapContext;\n\n/* global google */\nconst eventMap$a = {\n    onClick: 'click',\n    onDblClick: 'dblclick',\n    onDrag: 'drag',\n    onDragEnd: 'dragend',\n    onDragStart: 'dragstart',\n    onMouseDown: 'mousedown',\n    onMouseMove: 'mousemove',\n    onMouseOut: 'mouseout',\n    onMouseOver: 'mouseover',\n    onMouseUp: 'mouseup',\n    onRightClick: 'rightclick',\n};\nconst updaterMap$a = {\n    draggable(instance, draggable) {\n        instance.setDraggable(draggable);\n    },\n    editable(instance, editable) {\n        instance.setEditable(editable);\n    },\n    map(instance, map) {\n        instance.setMap(map);\n    },\n    options(instance, options) {\n        instance.setOptions(options);\n    },\n    path(instance, path) {\n        instance.setPath(path);\n    },\n    paths(instance, paths) {\n        instance.setPaths(paths);\n    },\n    visible(instance, visible) {\n        instance.setVisible(visible);\n    },\n};\nfunction PolygonFunctional({ options, draggable, editable, visible, path, paths, onDblClick, onDragEnd, onDragStart, onMouseDown, onMouseMove, onMouseOut, onMouseOver, onMouseUp, onRightClick, onClick, onDrag, onLoad, onUnmount, }) {\n    const map = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(MapContext);\n    const [instance, setInstance] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [dblclickListener, setDblclickListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [dragendListener, setDragendListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [dragstartListener, setDragstartListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [mousedownListener, setMousedownListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [mousemoveListener, setMousemoveListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [mouseoutListener, setMouseoutListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [mouseoverListener, setMouseoverListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [mouseupListener, setMouseupListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [rightclickListener, setRightclickListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [clickListener, setClickListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [dragListener, setDragListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    // Order does matter\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance !== null) {\n            instance.setMap(map);\n        }\n    }, [map]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (typeof options !== 'undefined' && instance !== null) {\n            instance.setOptions(options);\n        }\n    }, [instance, options]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (typeof draggable !== 'undefined' && instance !== null) {\n            instance.setDraggable(draggable);\n        }\n    }, [instance, draggable]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (typeof editable !== 'undefined' && instance !== null) {\n            instance.setEditable(editable);\n        }\n    }, [instance, editable]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (typeof visible !== 'undefined' && instance !== null) {\n            instance.setVisible(visible);\n        }\n    }, [instance, visible]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (typeof path !== 'undefined' && instance !== null) {\n            instance.setPath(path);\n        }\n    }, [instance, path]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (typeof paths !== 'undefined' && instance !== null) {\n            instance.setPaths(paths);\n        }\n    }, [instance, paths]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onDblClick) {\n            if (dblclickListener !== null) {\n                google.maps.event.removeListener(dblclickListener);\n            }\n            setDblclickListener(google.maps.event.addListener(instance, 'dblclick', onDblClick));\n        }\n    }, [onDblClick]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onDragEnd) {\n            if (dragendListener !== null) {\n                google.maps.event.removeListener(dragendListener);\n            }\n            setDragendListener(google.maps.event.addListener(instance, 'dragend', onDragEnd));\n        }\n    }, [onDragEnd]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onDragStart) {\n            if (dragstartListener !== null) {\n                google.maps.event.removeListener(dragstartListener);\n            }\n            setDragstartListener(google.maps.event.addListener(instance, 'dragstart', onDragStart));\n        }\n    }, [onDragStart]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onMouseDown) {\n            if (mousedownListener !== null) {\n                google.maps.event.removeListener(mousedownListener);\n            }\n            setMousedownListener(google.maps.event.addListener(instance, 'mousedown', onMouseDown));\n        }\n    }, [onMouseDown]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onMouseMove) {\n            if (mousemoveListener !== null) {\n                google.maps.event.removeListener(mousemoveListener);\n            }\n            setMousemoveListener(google.maps.event.addListener(instance, 'mousemove', onMouseMove));\n        }\n    }, [onMouseMove]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onMouseOut) {\n            if (mouseoutListener !== null) {\n                google.maps.event.removeListener(mouseoutListener);\n            }\n            setMouseoutListener(google.maps.event.addListener(instance, 'mouseout', onMouseOut));\n        }\n    }, [onMouseOut]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onMouseOver) {\n            if (mouseoverListener !== null) {\n                google.maps.event.removeListener(mouseoverListener);\n            }\n            setMouseoverListener(google.maps.event.addListener(instance, 'mouseover', onMouseOver));\n        }\n    }, [onMouseOver]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onMouseUp) {\n            if (mouseupListener !== null) {\n                google.maps.event.removeListener(mouseupListener);\n            }\n            setMouseupListener(google.maps.event.addListener(instance, 'mouseup', onMouseUp));\n        }\n    }, [onMouseUp]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onRightClick) {\n            if (rightclickListener !== null) {\n                google.maps.event.removeListener(rightclickListener);\n            }\n            setRightclickListener(google.maps.event.addListener(instance, 'rightclick', onRightClick));\n        }\n    }, [onRightClick]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onClick) {\n            if (clickListener !== null) {\n                google.maps.event.removeListener(clickListener);\n            }\n            setClickListener(google.maps.event.addListener(instance, 'click', onClick));\n        }\n    }, [onClick]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onDrag) {\n            if (dragListener !== null) {\n                google.maps.event.removeListener(dragListener);\n            }\n            setDragListener(google.maps.event.addListener(instance, 'drag', onDrag));\n        }\n    }, [onDrag]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        const polygon = new google.maps.Polygon(Object.assign(Object.assign({}, (options || {})), { map }));\n        if (path) {\n            polygon.setPath(path);\n        }\n        if (paths) {\n            polygon.setPaths(paths);\n        }\n        if (typeof visible !== 'undefined') {\n            polygon.setVisible(visible);\n        }\n        if (typeof editable !== 'undefined') {\n            polygon.setEditable(editable);\n        }\n        if (typeof draggable !== 'undefined') {\n            polygon.setDraggable(draggable);\n        }\n        if (onDblClick) {\n            setDblclickListener(google.maps.event.addListener(polygon, 'dblclick', onDblClick));\n        }\n        if (onDragEnd) {\n            setDragendListener(google.maps.event.addListener(polygon, 'dragend', onDragEnd));\n        }\n        if (onDragStart) {\n            setDragstartListener(google.maps.event.addListener(polygon, 'dragstart', onDragStart));\n        }\n        if (onMouseDown) {\n            setMousedownListener(google.maps.event.addListener(polygon, 'mousedown', onMouseDown));\n        }\n        if (onMouseMove) {\n            setMousemoveListener(google.maps.event.addListener(polygon, 'mousemove', onMouseMove));\n        }\n        if (onMouseOut) {\n            setMouseoutListener(google.maps.event.addListener(polygon, 'mouseout', onMouseOut));\n        }\n        if (onMouseOver) {\n            setMouseoverListener(google.maps.event.addListener(polygon, 'mouseover', onMouseOver));\n        }\n        if (onMouseUp) {\n            setMouseupListener(google.maps.event.addListener(polygon, 'mouseup', onMouseUp));\n        }\n        if (onRightClick) {\n            setRightclickListener(google.maps.event.addListener(polygon, 'rightclick', onRightClick));\n        }\n        if (onClick) {\n            setClickListener(google.maps.event.addListener(polygon, 'click', onClick));\n        }\n        if (onDrag) {\n            setDragListener(google.maps.event.addListener(polygon, 'drag', onDrag));\n        }\n        setInstance(polygon);\n        if (onLoad) {\n            onLoad(polygon);\n        }\n        return () => {\n            if (dblclickListener !== null) {\n                google.maps.event.removeListener(dblclickListener);\n            }\n            if (dragendListener !== null) {\n                google.maps.event.removeListener(dragendListener);\n            }\n            if (dragstartListener !== null) {\n                google.maps.event.removeListener(dragstartListener);\n            }\n            if (mousedownListener !== null) {\n                google.maps.event.removeListener(mousedownListener);\n            }\n            if (mousemoveListener !== null) {\n                google.maps.event.removeListener(mousemoveListener);\n            }\n            if (mouseoutListener !== null) {\n                google.maps.event.removeListener(mouseoutListener);\n            }\n            if (mouseoverListener !== null) {\n                google.maps.event.removeListener(mouseoverListener);\n            }\n            if (mouseupListener !== null) {\n                google.maps.event.removeListener(mouseupListener);\n            }\n            if (rightclickListener !== null) {\n                google.maps.event.removeListener(rightclickListener);\n            }\n            if (clickListener !== null) {\n                google.maps.event.removeListener(clickListener);\n            }\n            if (onUnmount) {\n                onUnmount(polygon);\n            }\n            polygon.setMap(null);\n        };\n    }, []);\n    return null;\n}\nconst PolygonF = (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(PolygonFunctional);\nclass Polygon extends react__WEBPACK_IMPORTED_MODULE_0__.PureComponent {\n    constructor() {\n        super(...arguments);\n        this.registeredEvents = [];\n        this.state = {\n            polygon: null,\n        };\n        this.setPolygonCallback = () => {\n            if (this.state.polygon !== null && this.props.onLoad) {\n                this.props.onLoad(this.state.polygon);\n            }\n        };\n    }\n    componentDidMount() {\n        const polygon = new google.maps.Polygon(Object.assign(Object.assign({}, (this.props.options || {})), { \n            // @ts-ignore\n            map: this.context }));\n        this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({\n            updaterMap: updaterMap$a,\n            eventMap: eventMap$a,\n            prevProps: {},\n            nextProps: this.props,\n            instance: polygon,\n        });\n        this.setState(function setPolygon() {\n            return {\n                polygon,\n            };\n        }, this.setPolygonCallback);\n    }\n    componentDidUpdate(prevProps) {\n        if (this.state.polygon !== null) {\n            unregisterEvents(this.registeredEvents);\n            this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({\n                updaterMap: updaterMap$a,\n                eventMap: eventMap$a,\n                prevProps,\n                nextProps: this.props,\n                instance: this.state.polygon,\n            });\n        }\n    }\n    componentWillUnmount() {\n        if (this.state.polygon !== null) {\n            if (this.props.onUnmount) {\n                this.props.onUnmount(this.state.polygon);\n            }\n            unregisterEvents(this.registeredEvents);\n            this.state.polygon && this.state.polygon.setMap(null);\n        }\n    }\n    render() {\n        return null;\n    }\n}\nPolygon.contextType = MapContext;\n\nconst eventMap$9 = {\n    onBoundsChanged: 'bounds_changed',\n    onClick: 'click',\n    onDblClick: 'dblclick',\n    onDrag: 'drag',\n    onDragEnd: 'dragend',\n    onDragStart: 'dragstart',\n    onMouseDown: 'mousedown',\n    onMouseMove: 'mousemove',\n    onMouseOut: 'mouseout',\n    onMouseOver: 'mouseover',\n    onMouseUp: 'mouseup',\n    onRightClick: 'rightclick',\n};\nconst updaterMap$9 = {\n    bounds(instance, bounds) {\n        instance.setBounds(bounds);\n    },\n    draggable(instance, draggable) {\n        instance.setDraggable(draggable);\n    },\n    editable(instance, editable) {\n        instance.setEditable(editable);\n    },\n    map(instance, map) {\n        instance.setMap(map);\n    },\n    options(instance, options) {\n        instance.setOptions(options);\n    },\n    visible(instance, visible) {\n        instance.setVisible(visible);\n    },\n};\nfunction RectangleFunctional({ options, bounds, draggable, editable, visible, onDblClick, onDragEnd, onDragStart, onMouseDown, onMouseMove, onMouseOut, onMouseOver, onMouseUp, onRightClick, onClick, onDrag, onBoundsChanged, onLoad, onUnmount, }) {\n    const map = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(MapContext);\n    const [instance, setInstance] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [dblclickListener, setDblclickListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [dragendListener, setDragendListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [dragstartListener, setDragstartListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [mousedownListener, setMousedownListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [mousemoveListener, setMousemoveListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [mouseoutListener, setMouseoutListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [mouseoverListener, setMouseoverListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [mouseupListener, setMouseupListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [rightclickListener, setRightclickListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [clickListener, setClickListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [dragListener, setDragListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [boundsChangedListener, setBoundsChangedListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    // Order does matter\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance !== null) {\n            instance.setMap(map);\n        }\n    }, [map]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (typeof options !== 'undefined' && instance !== null) {\n            instance.setOptions(options);\n        }\n    }, [instance, options]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (typeof draggable !== 'undefined' && instance !== null) {\n            instance.setDraggable(draggable);\n        }\n    }, [instance, draggable]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (typeof editable !== 'undefined' && instance !== null) {\n            instance.setEditable(editable);\n        }\n    }, [instance, editable]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (typeof visible !== 'undefined' && instance !== null) {\n            instance.setVisible(visible);\n        }\n    }, [instance, visible]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (typeof bounds !== 'undefined' && instance !== null) {\n            instance.setBounds(bounds);\n        }\n    }, [instance, bounds]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onDblClick) {\n            if (dblclickListener !== null) {\n                google.maps.event.removeListener(dblclickListener);\n            }\n            setDblclickListener(google.maps.event.addListener(instance, 'dblclick', onDblClick));\n        }\n    }, [onDblClick]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onDragEnd) {\n            if (dragendListener !== null) {\n                google.maps.event.removeListener(dragendListener);\n            }\n            setDragendListener(google.maps.event.addListener(instance, 'dragend', onDragEnd));\n        }\n    }, [onDragEnd]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onDragStart) {\n            if (dragstartListener !== null) {\n                google.maps.event.removeListener(dragstartListener);\n            }\n            setDragstartListener(google.maps.event.addListener(instance, 'dragstart', onDragStart));\n        }\n    }, [onDragStart]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onMouseDown) {\n            if (mousedownListener !== null) {\n                google.maps.event.removeListener(mousedownListener);\n            }\n            setMousedownListener(google.maps.event.addListener(instance, 'mousedown', onMouseDown));\n        }\n    }, [onMouseDown]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onMouseMove) {\n            if (mousemoveListener !== null) {\n                google.maps.event.removeListener(mousemoveListener);\n            }\n            setMousemoveListener(google.maps.event.addListener(instance, 'mousemove', onMouseMove));\n        }\n    }, [onMouseMove]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onMouseOut) {\n            if (mouseoutListener !== null) {\n                google.maps.event.removeListener(mouseoutListener);\n            }\n            setMouseoutListener(google.maps.event.addListener(instance, 'mouseout', onMouseOut));\n        }\n    }, [onMouseOut]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onMouseOver) {\n            if (mouseoverListener !== null) {\n                google.maps.event.removeListener(mouseoverListener);\n            }\n            setMouseoverListener(google.maps.event.addListener(instance, 'mouseover', onMouseOver));\n        }\n    }, [onMouseOver]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onMouseUp) {\n            if (mouseupListener !== null) {\n                google.maps.event.removeListener(mouseupListener);\n            }\n            setMouseupListener(google.maps.event.addListener(instance, 'mouseup', onMouseUp));\n        }\n    }, [onMouseUp]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onRightClick) {\n            if (rightclickListener !== null) {\n                google.maps.event.removeListener(rightclickListener);\n            }\n            setRightclickListener(google.maps.event.addListener(instance, 'rightclick', onRightClick));\n        }\n    }, [onRightClick]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onClick) {\n            if (clickListener !== null) {\n                google.maps.event.removeListener(clickListener);\n            }\n            setClickListener(google.maps.event.addListener(instance, 'click', onClick));\n        }\n    }, [onClick]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onDrag) {\n            if (dragListener !== null) {\n                google.maps.event.removeListener(dragListener);\n            }\n            setDragListener(google.maps.event.addListener(instance, 'drag', onDrag));\n        }\n    }, [onDrag]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onBoundsChanged) {\n            if (boundsChangedListener !== null) {\n                google.maps.event.removeListener(boundsChangedListener);\n            }\n            setBoundsChangedListener(google.maps.event.addListener(instance, 'bounds_changed', onBoundsChanged));\n        }\n    }, [onBoundsChanged]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        const rectangle = new google.maps.Rectangle(Object.assign(Object.assign({}, (options || {})), { map }));\n        if (typeof visible !== 'undefined') {\n            rectangle.setVisible(visible);\n        }\n        if (typeof editable !== 'undefined') {\n            rectangle.setEditable(editable);\n        }\n        if (typeof draggable !== 'undefined') {\n            rectangle.setDraggable(draggable);\n        }\n        if (typeof bounds !== 'undefined') {\n            rectangle.setBounds(bounds);\n        }\n        if (onDblClick) {\n            setDblclickListener(google.maps.event.addListener(rectangle, 'dblclick', onDblClick));\n        }\n        if (onDragEnd) {\n            setDragendListener(google.maps.event.addListener(rectangle, 'dragend', onDragEnd));\n        }\n        if (onDragStart) {\n            setDragstartListener(google.maps.event.addListener(rectangle, 'dragstart', onDragStart));\n        }\n        if (onMouseDown) {\n            setMousedownListener(google.maps.event.addListener(rectangle, 'mousedown', onMouseDown));\n        }\n        if (onMouseMove) {\n            setMousemoveListener(google.maps.event.addListener(rectangle, 'mousemove', onMouseMove));\n        }\n        if (onMouseOut) {\n            setMouseoutListener(google.maps.event.addListener(rectangle, 'mouseout', onMouseOut));\n        }\n        if (onMouseOver) {\n            setMouseoverListener(google.maps.event.addListener(rectangle, 'mouseover', onMouseOver));\n        }\n        if (onMouseUp) {\n            setMouseupListener(google.maps.event.addListener(rectangle, 'mouseup', onMouseUp));\n        }\n        if (onRightClick) {\n            setRightclickListener(google.maps.event.addListener(rectangle, 'rightclick', onRightClick));\n        }\n        if (onClick) {\n            setClickListener(google.maps.event.addListener(rectangle, 'click', onClick));\n        }\n        if (onDrag) {\n            setDragListener(google.maps.event.addListener(rectangle, 'drag', onDrag));\n        }\n        if (onBoundsChanged) {\n            setBoundsChangedListener(google.maps.event.addListener(rectangle, 'bounds_changed', onBoundsChanged));\n        }\n        setInstance(rectangle);\n        if (onLoad) {\n            onLoad(rectangle);\n        }\n        return () => {\n            if (dblclickListener !== null) {\n                google.maps.event.removeListener(dblclickListener);\n            }\n            if (dragendListener !== null) {\n                google.maps.event.removeListener(dragendListener);\n            }\n            if (dragstartListener !== null) {\n                google.maps.event.removeListener(dragstartListener);\n            }\n            if (mousedownListener !== null) {\n                google.maps.event.removeListener(mousedownListener);\n            }\n            if (mousemoveListener !== null) {\n                google.maps.event.removeListener(mousemoveListener);\n            }\n            if (mouseoutListener !== null) {\n                google.maps.event.removeListener(mouseoutListener);\n            }\n            if (mouseoverListener !== null) {\n                google.maps.event.removeListener(mouseoverListener);\n            }\n            if (mouseupListener !== null) {\n                google.maps.event.removeListener(mouseupListener);\n            }\n            if (rightclickListener !== null) {\n                google.maps.event.removeListener(rightclickListener);\n            }\n            if (clickListener !== null) {\n                google.maps.event.removeListener(clickListener);\n            }\n            if (dragListener !== null) {\n                google.maps.event.removeListener(dragListener);\n            }\n            if (boundsChangedListener !== null) {\n                google.maps.event.removeListener(boundsChangedListener);\n            }\n            if (onUnmount) {\n                onUnmount(rectangle);\n            }\n            rectangle.setMap(null);\n        };\n    }, []);\n    return null;\n}\nconst RectangleF = (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(RectangleFunctional);\nclass Rectangle extends react__WEBPACK_IMPORTED_MODULE_0__.PureComponent {\n    constructor() {\n        super(...arguments);\n        this.registeredEvents = [];\n        this.state = {\n            rectangle: null,\n        };\n        this.setRectangleCallback = () => {\n            if (this.state.rectangle !== null && this.props.onLoad) {\n                this.props.onLoad(this.state.rectangle);\n            }\n        };\n    }\n    componentDidMount() {\n        const rectangle = new google.maps.Rectangle(Object.assign(Object.assign({}, (this.props.options || {})), { \n            // @ts-ignore\n            map: this.context }));\n        this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({\n            updaterMap: updaterMap$9,\n            eventMap: eventMap$9,\n            prevProps: {},\n            nextProps: this.props,\n            instance: rectangle,\n        });\n        this.setState(function setRectangle() {\n            return {\n                rectangle,\n            };\n        }, this.setRectangleCallback);\n    }\n    componentDidUpdate(prevProps) {\n        if (this.state.rectangle !== null) {\n            unregisterEvents(this.registeredEvents);\n            this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({\n                updaterMap: updaterMap$9,\n                eventMap: eventMap$9,\n                prevProps,\n                nextProps: this.props,\n                instance: this.state.rectangle,\n            });\n        }\n    }\n    componentWillUnmount() {\n        if (this.state.rectangle !== null) {\n            if (this.props.onUnmount) {\n                this.props.onUnmount(this.state.rectangle);\n            }\n            unregisterEvents(this.registeredEvents);\n            this.state.rectangle.setMap(null);\n        }\n    }\n    render() {\n        return null;\n    }\n}\nRectangle.contextType = MapContext;\n\nconst eventMap$8 = {\n    onCenterChanged: 'center_changed',\n    onRadiusChanged: 'radius_changed',\n    onClick: 'click',\n    onDblClick: 'dblclick',\n    onDrag: 'drag',\n    onDragEnd: 'dragend',\n    onDragStart: 'dragstart',\n    onMouseDown: 'mousedown',\n    onMouseMove: 'mousemove',\n    onMouseOut: 'mouseout',\n    onMouseOver: 'mouseover',\n    onMouseUp: 'mouseup',\n    onRightClick: 'rightclick',\n};\nconst updaterMap$8 = {\n    center(instance, center) {\n        instance.setCenter(center);\n    },\n    draggable(instance, draggable) {\n        instance.setDraggable(draggable);\n    },\n    editable(instance, editable) {\n        instance.setEditable(editable);\n    },\n    map(instance, map) {\n        instance.setMap(map);\n    },\n    options(instance, options) {\n        instance.setOptions(options);\n    },\n    radius(instance, radius) {\n        instance.setRadius(radius);\n    },\n    visible(instance, visible) {\n        instance.setVisible(visible);\n    },\n};\nconst defaultOptions = {};\nfunction CircleFunctional({ options, center, radius, draggable, editable, visible, onDblClick, onDragEnd, onDragStart, onMouseDown, onMouseMove, onMouseOut, onMouseOver, onMouseUp, onRightClick, onClick, onDrag, onCenterChanged, onRadiusChanged, onLoad, onUnmount, }) {\n    const map = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(MapContext);\n    const [instance, setInstance] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [dblclickListener, setDblclickListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [dragendListener, setDragendListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [dragstartListener, setDragstartListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [mousedownListener, setMousedownListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [mousemoveListener, setMousemoveListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [mouseoutListener, setMouseoutListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [mouseoverListener, setMouseoverListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [mouseupListener, setMouseupListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [rightclickListener, setRightclickListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [clickListener, setClickListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [dragListener, setDragListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [centerChangedListener, setCenterChangedListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [radiusChangedListener, setRadiusChangedListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    // Order does matter\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance !== null) {\n            instance.setMap(map);\n        }\n    }, [map]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (typeof options !== 'undefined' && instance !== null) {\n            instance.setOptions(options);\n        }\n    }, [instance, options]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (typeof draggable !== 'undefined' && instance !== null) {\n            instance.setDraggable(draggable);\n        }\n    }, [instance, draggable]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (typeof editable !== 'undefined' && instance !== null) {\n            instance.setEditable(editable);\n        }\n    }, [instance, editable]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (typeof visible !== 'undefined' && instance !== null) {\n            instance.setVisible(visible);\n        }\n    }, [instance, visible]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (typeof radius === 'number' && instance !== null) {\n            instance.setRadius(radius);\n        }\n    }, [instance, radius]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (typeof center !== 'undefined' && instance !== null) {\n            instance.setCenter(center);\n        }\n    }, [instance, center]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onDblClick) {\n            if (dblclickListener !== null) {\n                google.maps.event.removeListener(dblclickListener);\n            }\n            setDblclickListener(google.maps.event.addListener(instance, 'dblclick', onDblClick));\n        }\n    }, [onDblClick]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onDragEnd) {\n            if (dragendListener !== null) {\n                google.maps.event.removeListener(dragendListener);\n            }\n            setDragendListener(google.maps.event.addListener(instance, 'dragend', onDragEnd));\n        }\n    }, [onDragEnd]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onDragStart) {\n            if (dragstartListener !== null) {\n                google.maps.event.removeListener(dragstartListener);\n            }\n            setDragstartListener(google.maps.event.addListener(instance, 'dragstart', onDragStart));\n        }\n    }, [onDragStart]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onMouseDown) {\n            if (mousedownListener !== null) {\n                google.maps.event.removeListener(mousedownListener);\n            }\n            setMousedownListener(google.maps.event.addListener(instance, 'mousedown', onMouseDown));\n        }\n    }, [onMouseDown]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onMouseMove) {\n            if (mousemoveListener !== null) {\n                google.maps.event.removeListener(mousemoveListener);\n            }\n            setMousemoveListener(google.maps.event.addListener(instance, 'mousemove', onMouseMove));\n        }\n    }, [onMouseMove]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onMouseOut) {\n            if (mouseoutListener !== null) {\n                google.maps.event.removeListener(mouseoutListener);\n            }\n            setMouseoutListener(google.maps.event.addListener(instance, 'mouseout', onMouseOut));\n        }\n    }, [onMouseOut]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onMouseOver) {\n            if (mouseoverListener !== null) {\n                google.maps.event.removeListener(mouseoverListener);\n            }\n            setMouseoverListener(google.maps.event.addListener(instance, 'mouseover', onMouseOver));\n        }\n    }, [onMouseOver]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onMouseUp) {\n            if (mouseupListener !== null) {\n                google.maps.event.removeListener(mouseupListener);\n            }\n            setMouseupListener(google.maps.event.addListener(instance, 'mouseup', onMouseUp));\n        }\n    }, [onMouseUp]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onRightClick) {\n            if (rightclickListener !== null) {\n                google.maps.event.removeListener(rightclickListener);\n            }\n            setRightclickListener(google.maps.event.addListener(instance, 'rightclick', onRightClick));\n        }\n    }, [onRightClick]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onClick) {\n            if (clickListener !== null) {\n                google.maps.event.removeListener(clickListener);\n            }\n            setClickListener(google.maps.event.addListener(instance, 'click', onClick));\n        }\n    }, [onClick]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onDrag) {\n            if (dragListener !== null) {\n                google.maps.event.removeListener(dragListener);\n            }\n            setDragListener(google.maps.event.addListener(instance, 'drag', onDrag));\n        }\n    }, [onDrag]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onCenterChanged) {\n            if (centerChangedListener !== null) {\n                google.maps.event.removeListener(centerChangedListener);\n            }\n            setCenterChangedListener(google.maps.event.addListener(instance, 'center_changed', onCenterChanged));\n        }\n    }, [onClick]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onRadiusChanged) {\n            if (radiusChangedListener !== null) {\n                google.maps.event.removeListener(radiusChangedListener);\n            }\n            setRadiusChangedListener(google.maps.event.addListener(instance, 'radius_changed', onRadiusChanged));\n        }\n    }, [onRadiusChanged]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        const circle = new google.maps.Circle(Object.assign(Object.assign({}, (options || defaultOptions)), { map }));\n        if (typeof radius === 'number') {\n            circle.setRadius(radius);\n        }\n        if (typeof center !== 'undefined') {\n            circle.setCenter(center);\n        }\n        if (typeof radius === 'number') {\n            circle.setRadius(radius);\n        }\n        if (typeof visible !== 'undefined') {\n            circle.setVisible(visible);\n        }\n        if (typeof editable !== 'undefined') {\n            circle.setEditable(editable);\n        }\n        if (typeof draggable !== 'undefined') {\n            circle.setDraggable(draggable);\n        }\n        if (onDblClick) {\n            setDblclickListener(google.maps.event.addListener(circle, 'dblclick', onDblClick));\n        }\n        if (onDragEnd) {\n            setDragendListener(google.maps.event.addListener(circle, 'dragend', onDragEnd));\n        }\n        if (onDragStart) {\n            setDragstartListener(google.maps.event.addListener(circle, 'dragstart', onDragStart));\n        }\n        if (onMouseDown) {\n            setMousedownListener(google.maps.event.addListener(circle, 'mousedown', onMouseDown));\n        }\n        if (onMouseMove) {\n            setMousemoveListener(google.maps.event.addListener(circle, 'mousemove', onMouseMove));\n        }\n        if (onMouseOut) {\n            setMouseoutListener(google.maps.event.addListener(circle, 'mouseout', onMouseOut));\n        }\n        if (onMouseOver) {\n            setMouseoverListener(google.maps.event.addListener(circle, 'mouseover', onMouseOver));\n        }\n        if (onMouseUp) {\n            setMouseupListener(google.maps.event.addListener(circle, 'mouseup', onMouseUp));\n        }\n        if (onRightClick) {\n            setRightclickListener(google.maps.event.addListener(circle, 'rightclick', onRightClick));\n        }\n        if (onClick) {\n            setClickListener(google.maps.event.addListener(circle, 'click', onClick));\n        }\n        if (onDrag) {\n            setDragListener(google.maps.event.addListener(circle, 'drag', onDrag));\n        }\n        if (onCenterChanged) {\n            setCenterChangedListener(google.maps.event.addListener(circle, 'center_changed', onCenterChanged));\n        }\n        if (onRadiusChanged) {\n            setRadiusChangedListener(google.maps.event.addListener(circle, 'radius_changed', onRadiusChanged));\n        }\n        setInstance(circle);\n        if (onLoad) {\n            onLoad(circle);\n        }\n        return () => {\n            if (dblclickListener !== null) {\n                google.maps.event.removeListener(dblclickListener);\n            }\n            if (dragendListener !== null) {\n                google.maps.event.removeListener(dragendListener);\n            }\n            if (dragstartListener !== null) {\n                google.maps.event.removeListener(dragstartListener);\n            }\n            if (mousedownListener !== null) {\n                google.maps.event.removeListener(mousedownListener);\n            }\n            if (mousemoveListener !== null) {\n                google.maps.event.removeListener(mousemoveListener);\n            }\n            if (mouseoutListener !== null) {\n                google.maps.event.removeListener(mouseoutListener);\n            }\n            if (mouseoverListener !== null) {\n                google.maps.event.removeListener(mouseoverListener);\n            }\n            if (mouseupListener !== null) {\n                google.maps.event.removeListener(mouseupListener);\n            }\n            if (rightclickListener !== null) {\n                google.maps.event.removeListener(rightclickListener);\n            }\n            if (clickListener !== null) {\n                google.maps.event.removeListener(clickListener);\n            }\n            if (centerChangedListener !== null) {\n                google.maps.event.removeListener(centerChangedListener);\n            }\n            if (radiusChangedListener !== null) {\n                google.maps.event.removeListener(radiusChangedListener);\n            }\n            if (onUnmount) {\n                onUnmount(circle);\n            }\n            circle.setMap(null);\n        };\n    }, []);\n    return null;\n}\nconst CircleF = (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(CircleFunctional);\nclass Circle extends react__WEBPACK_IMPORTED_MODULE_0__.PureComponent {\n    constructor() {\n        super(...arguments);\n        this.registeredEvents = [];\n        this.state = {\n            circle: null,\n        };\n        this.setCircleCallback = () => {\n            if (this.state.circle !== null && this.props.onLoad) {\n                this.props.onLoad(this.state.circle);\n            }\n        };\n    }\n    componentDidMount() {\n        const circle = new google.maps.Circle(Object.assign(Object.assign({}, (this.props.options || {})), { \n            // @ts-ignore\n            map: this.context }));\n        this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({\n            updaterMap: updaterMap$8,\n            eventMap: eventMap$8,\n            prevProps: {},\n            nextProps: this.props,\n            instance: circle,\n        });\n        this.setState(function setCircle() {\n            return {\n                circle,\n            };\n        }, this.setCircleCallback);\n    }\n    componentDidUpdate(prevProps) {\n        if (this.state.circle !== null) {\n            unregisterEvents(this.registeredEvents);\n            this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({\n                updaterMap: updaterMap$8,\n                eventMap: eventMap$8,\n                prevProps,\n                nextProps: this.props,\n                instance: this.state.circle,\n            });\n        }\n    }\n    componentWillUnmount() {\n        if (this.state.circle !== null) {\n            if (this.props.onUnmount) {\n                this.props.onUnmount(this.state.circle);\n            }\n            unregisterEvents(this.registeredEvents);\n            this.state.circle && this.state.circle.setMap(null);\n        }\n    }\n    render() {\n        return null;\n    }\n}\nCircle.contextType = MapContext;\n\nconst eventMap$7 = {\n    onClick: 'click',\n    onDblClick: 'dblclick',\n    onMouseDown: 'mousedown',\n    onMouseOut: 'mouseout',\n    onMouseOver: 'mouseover',\n    onMouseUp: 'mouseup',\n    onRightClick: 'rightclick',\n    onAddFeature: 'addfeature',\n    onRemoveFeature: 'removefeature',\n    onRemoveProperty: 'removeproperty',\n    onSetGeometry: 'setgeometry',\n    onSetProperty: 'setproperty',\n};\nconst updaterMap$7 = {\n    add(instance, feature) {\n        instance.add(feature);\n    },\n    addgeojson(instance, geojson, options) {\n        instance.addGeoJson(geojson, options);\n    },\n    contains(instance, feature) {\n        instance.contains(feature);\n    },\n    foreach(instance, callback) {\n        instance.forEach(callback);\n    },\n    loadgeojson(instance, url, options, callback) {\n        instance.loadGeoJson(url, options, callback);\n    },\n    overridestyle(instance, feature, style) {\n        instance.overrideStyle(feature, style);\n    },\n    remove(instance, feature) {\n        instance.remove(feature);\n    },\n    revertstyle(instance, feature) {\n        instance.revertStyle(feature);\n    },\n    controlposition(instance, controlPosition) {\n        instance.setControlPosition(controlPosition);\n    },\n    controls(instance, controls) {\n        instance.setControls(controls);\n    },\n    drawingmode(instance, mode) {\n        instance.setDrawingMode(mode);\n    },\n    map(instance, map) {\n        instance.setMap(map);\n    },\n    style(instance, style) {\n        instance.setStyle(style);\n    },\n    togeojson(instance, callback) {\n        instance.toGeoJson(callback);\n    },\n};\nfunction DataFunctional({ options, onClick, onDblClick, onMouseDown, onMouseMove, onMouseOut, onMouseOver, onMouseUp, onRightClick, onAddFeature, onRemoveFeature, onRemoveProperty, onSetGeometry, onSetProperty, onLoad, onUnmount, }) {\n    const map = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(MapContext);\n    const [instance, setInstance] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [dblclickListener, setDblclickListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [mousedownListener, setMousedownListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [mousemoveListener, setMousemoveListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [mouseoutListener, setMouseoutListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [mouseoverListener, setMouseoverListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [mouseupListener, setMouseupListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [rightclickListener, setRightclickListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [clickListener, setClickListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [addFeatureListener, setAddFeatureListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [removeFeatureListener, setRemoveFeatureListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [removePropertyListener, setRemovePropertyListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [setGeometryListener, setSetGeometryListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [setPropertyListener, setSetPropertyListener] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    // Order does matter\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance !== null) {\n            instance.setMap(map);\n        }\n    }, [map]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onDblClick) {\n            if (dblclickListener !== null) {\n                google.maps.event.removeListener(dblclickListener);\n            }\n            setDblclickListener(google.maps.event.addListener(instance, 'dblclick', onDblClick));\n        }\n    }, [onDblClick]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onMouseDown) {\n            if (mousedownListener !== null) {\n                google.maps.event.removeListener(mousedownListener);\n            }\n            setMousedownListener(google.maps.event.addListener(instance, 'mousedown', onMouseDown));\n        }\n    }, [onMouseDown]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onMouseMove) {\n            if (mousemoveListener !== null) {\n                google.maps.event.removeListener(mousemoveListener);\n            }\n            setMousemoveListener(google.maps.event.addListener(instance, 'mousemove', onMouseMove));\n        }\n    }, [onMouseMove]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onMouseOut) {\n            if (mouseoutListener !== null) {\n                google.maps.event.removeListener(mouseoutListener);\n            }\n            setMouseoutListener(google.maps.event.addListener(instance, 'mouseout', onMouseOut));\n        }\n    }, [onMouseOut]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onMouseOver) {\n            if (mouseoverListener !== null) {\n                google.maps.event.removeListener(mouseoverListener);\n            }\n            setMouseoverListener(google.maps.event.addListener(instance, 'mouseover', onMouseOver));\n        }\n    }, [onMouseOver]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onMouseUp) {\n            if (mouseupListener !== null) {\n                google.maps.event.removeListener(mouseupListener);\n            }\n            setMouseupListener(google.maps.event.addListener(instance, 'mouseup', onMouseUp));\n        }\n    }, [onMouseUp]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onRightClick) {\n            if (rightclickListener !== null) {\n                google.maps.event.removeListener(rightclickListener);\n            }\n            setRightclickListener(google.maps.event.addListener(instance, 'rightclick', onRightClick));\n        }\n    }, [onRightClick]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onClick) {\n            if (clickListener !== null) {\n                google.maps.event.removeListener(clickListener);\n            }\n            setClickListener(google.maps.event.addListener(instance, 'click', onClick));\n        }\n    }, [onClick]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onAddFeature) {\n            if (addFeatureListener !== null) {\n                google.maps.event.removeListener(addFeatureListener);\n            }\n            setAddFeatureListener(google.maps.event.addListener(instance, 'addfeature', onAddFeature));\n        }\n    }, [onAddFeature]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onRemoveFeature) {\n            if (removeFeatureListener !== null) {\n                google.maps.event.removeListener(removeFeatureListener);\n            }\n            setRemoveFeatureListener(google.maps.event.addListener(instance, 'removefeature', onRemoveFeature));\n        }\n    }, [onRemoveFeature]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onRemoveProperty) {\n            if (removePropertyListener !== null) {\n                google.maps.event.removeListener(removePropertyListener);\n            }\n            setRemovePropertyListener(google.maps.event.addListener(instance, 'removeproperty', onRemoveProperty));\n        }\n    }, [onRemoveProperty]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onSetGeometry) {\n            if (setGeometryListener !== null) {\n                google.maps.event.removeListener(setGeometryListener);\n            }\n            setSetGeometryListener(google.maps.event.addListener(instance, 'setgeometry', onSetGeometry));\n        }\n    }, [onSetGeometry]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (instance && onSetProperty) {\n            if (setPropertyListener !== null) {\n                google.maps.event.removeListener(setPropertyListener);\n            }\n            setSetPropertyListener(google.maps.event.addListener(instance, 'setproperty', onSetProperty));\n        }\n    }, [onSetProperty]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        if (map !== null) {\n            const data = new google.maps.Data(Object.assign(Object.assign({}, (options || {})), { map }));\n            if (onDblClick) {\n                setDblclickListener(google.maps.event.addListener(data, 'dblclick', onDblClick));\n            }\n            if (onMouseDown) {\n                setMousedownListener(google.maps.event.addListener(data, 'mousedown', onMouseDown));\n            }\n            if (onMouseMove) {\n                setMousemoveListener(google.maps.event.addListener(data, 'mousemove', onMouseMove));\n            }\n            if (onMouseOut) {\n                setMouseoutListener(google.maps.event.addListener(data, 'mouseout', onMouseOut));\n            }\n            if (onMouseOver) {\n                setMouseoverListener(google.maps.event.addListener(data, 'mouseover', onMouseOver));\n            }\n            if (onMouseUp) {\n                setMouseupListener(google.maps.event.addListener(data, 'mouseup', onMouseUp));\n            }\n            if (onRightClick) {\n                setRightclickListener(google.maps.event.addListener(data, 'rightclick', onRightClick));\n            }\n            if (onClick) {\n                setClickListener(google.maps.event.addListener(data, 'click', onClick));\n            }\n            if (onAddFeature) {\n                setAddFeatureListener(google.maps.event.addListener(data, 'addfeature', onAddFeature));\n            }\n            if (onRemoveFeature) {\n                setRemoveFeatureListener(google.maps.event.addListener(data, 'removefeature', onRemoveFeature));\n            }\n            if (onRemoveProperty) {\n                setRemovePropertyListener(google.maps.event.addListener(data, 'removeproperty', onRemoveProperty));\n            }\n            if (onSetGeometry) {\n                setSetGeometryListener(google.maps.event.addListener(data, 'setgeometry', onSetGeometry));\n            }\n            if (onSetProperty) {\n                setSetPropertyListener(google.maps.event.addListener(data, 'setproperty', onSetProperty));\n            }\n            setInstance(data);\n            if (onLoad) {\n                onLoad(data);\n            }\n        }\n        return () => {\n            if (instance) {\n                if (dblclickListener !== null) {\n                    google.maps.event.removeListener(dblclickListener);\n                }\n                if (mousedownListener !== null) {\n                    google.maps.event.removeListener(mousedownListener);\n                }\n                if (mousemoveListener !== null) {\n                    google.maps.event.removeListener(mousemoveListener);\n                }\n                if (mouseoutListener !== null) {\n                    google.maps.event.removeListener(mouseoutListener);\n                }\n                if (mouseoverListener !== null) {\n                    google.maps.event.removeListener(mouseoverListener);\n                }\n                if (mouseupListener !== null) {\n                    google.maps.event.removeListener(mouseupListener);\n                }\n                if (rightclickListener !== null) {\n                    google.maps.event.removeListener(rightclickListener);\n                }\n                if (clickListener !== null) {\n                    google.maps.event.removeListener(clickListener);\n                }\n                if (addFeatureListener !== null) {\n                    google.maps.event.removeListener(addFeatureListener);\n                }\n                if (removeFeatureListener !== null) {\n                    google.maps.event.removeListener(removeFeatureListener);\n                }\n                if (removePropertyListener !== null) {\n                    google.maps.event.removeListener(removePropertyListener);\n                }\n                if (setGeometryListener !== null) {\n                    google.maps.event.removeListener(setGeometryListener);\n                }\n                if (setPropertyListener !== null) {\n                    google.maps.event.removeListener(setPropertyListener);\n                }\n                if (onUnmount) {\n                    onUnmount(instance);\n                }\n                instance.setMap(null);\n            }\n        };\n    }, []);\n    return null;\n}\nconst DataF = (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(DataFunctional);\nclass Data extends react__WEBPACK_IMPORTED_MODULE_0__.PureComponent {\n    constructor() {\n        super(...arguments);\n        this.registeredEvents = [];\n        this.state = {\n            data: null,\n        };\n        this.setDataCallback = () => {\n            if (this.state.data !== null && this.props.onLoad) {\n                this.props.onLoad(this.state.data);\n            }\n        };\n    }\n    componentDidMount() {\n        if (this.context !== null) {\n            const data = new google.maps.Data(Object.assign(Object.assign({}, (this.props.options || {})), { map: this.context }));\n            this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({\n                updaterMap: updaterMap$7,\n                eventMap: eventMap$7,\n                prevProps: {},\n                nextProps: this.props,\n                instance: data,\n            });\n            this.setState(() => {\n                return {\n                    data,\n                };\n            }, this.setDataCallback);\n        }\n    }\n    componentDidUpdate(prevProps) {\n        if (this.state.data !== null) {\n            unregisterEvents(this.registeredEvents);\n            this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({\n                updaterMap: updaterMap$7,\n                eventMap: eventMap$7,\n                prevProps,\n                nextProps: this.props,\n                instance: this.state.data,\n            });\n        }\n    }\n    componentWillUnmount() {\n        if (this.state.data !== null) {\n            if (this.props.onUnmount) {\n                this.props.onUnmount(this.state.data);\n            }\n            unregisterEvents(this.registeredEvents);\n            if (this.state.data) {\n                this.state.data.setMap(null);\n            }\n        }\n    }\n    render() {\n        return null;\n    }\n}\nData.contextType = MapContext;\n\nconst eventMap$6 = {\n    onClick: 'click',\n    onDefaultViewportChanged: 'defaultviewport_changed',\n    onStatusChanged: 'status_changed',\n};\nconst updaterMap$6 = {\n    options(instance, options) {\n        instance.setOptions(options);\n    },\n    url(instance, url) {\n        instance.setUrl(url);\n    },\n    zIndex(instance, zIndex) {\n        instance.setZIndex(zIndex);\n    },\n};\nclass KmlLayer extends react__WEBPACK_IMPORTED_MODULE_0__.PureComponent {\n    constructor() {\n        super(...arguments);\n        this.registeredEvents = [];\n        this.state = {\n            kmlLayer: null,\n        };\n        this.setKmlLayerCallback = () => {\n            if (this.state.kmlLayer !== null && this.props.onLoad) {\n                this.props.onLoad(this.state.kmlLayer);\n            }\n        };\n    }\n    componentDidMount() {\n        const kmlLayer = new google.maps.KmlLayer(Object.assign(Object.assign({}, this.props.options), { map: this.context }));\n        this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({\n            updaterMap: updaterMap$6,\n            eventMap: eventMap$6,\n            prevProps: {},\n            nextProps: this.props,\n            instance: kmlLayer,\n        });\n        this.setState(function setLmlLayer() {\n            return {\n                kmlLayer,\n            };\n        }, this.setKmlLayerCallback);\n    }\n    componentDidUpdate(prevProps) {\n        if (this.state.kmlLayer !== null) {\n            unregisterEvents(this.registeredEvents);\n            this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({\n                updaterMap: updaterMap$6,\n                eventMap: eventMap$6,\n                prevProps,\n                nextProps: this.props,\n                instance: this.state.kmlLayer,\n            });\n        }\n    }\n    componentWillUnmount() {\n        if (this.state.kmlLayer !== null) {\n            if (this.props.onUnmount) {\n                this.props.onUnmount(this.state.kmlLayer);\n            }\n            unregisterEvents(this.registeredEvents);\n            this.state.kmlLayer.setMap(null);\n        }\n    }\n    render() {\n        return null;\n    }\n}\nKmlLayer.contextType = MapContext;\n\nfunction getOffsetOverride(containerElement, getPixelPositionOffset) {\n    return typeof getPixelPositionOffset === 'function'\n        ? getPixelPositionOffset(containerElement.offsetWidth, containerElement.offsetHeight)\n        : {\n            x: 0,\n            y: 0,\n        };\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction createLatLng(inst, Type) { return new Type(inst.lat, inst.lng); }\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction createLatLngBounds(inst, Type) {\n    return new Type(new google.maps.LatLng(inst.ne.lat, inst.ne.lng), new google.maps.LatLng(inst.sw.lat, inst.sw.lng));\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction ensureOfType(inst, type, factory) {\n    return inst instanceof type ? inst : factory(inst, type);\n}\nfunction ensureOfTypeBounds(inst, type, factory) {\n    return inst instanceof type ? inst : factory(inst, type);\n}\nfunction getLayoutStylesByBounds(mapCanvasProjection, offset, bounds) {\n    const ne = mapCanvasProjection && mapCanvasProjection.fromLatLngToDivPixel(bounds.getNorthEast());\n    const sw = mapCanvasProjection && mapCanvasProjection.fromLatLngToDivPixel(bounds.getSouthWest());\n    if (ne && sw) {\n        return {\n            left: `${sw.x + offset.x}px`,\n            top: `${ne.y + offset.y}px`,\n            width: `${ne.x - sw.x - offset.x}px`,\n            height: `${sw.y - ne.y - offset.y}px`,\n        };\n    }\n    return {\n        left: '-9999px',\n        top: '-9999px',\n    };\n}\nfunction getLayoutStylesByPosition(mapCanvasProjection, offset, position) {\n    const point = mapCanvasProjection && mapCanvasProjection.fromLatLngToDivPixel(position);\n    if (point) {\n        const { x, y } = point;\n        return {\n            left: `${x + offset.x}px`,\n            top: `${y + offset.y}px`,\n        };\n    }\n    return {\n        left: '-9999px',\n        top: '-9999px',\n    };\n}\nfunction getLayoutStyles(mapCanvasProjection, offset, bounds, position) {\n    return bounds !== undefined\n        ? getLayoutStylesByBounds(mapCanvasProjection, offset, ensureOfTypeBounds(bounds, google.maps.LatLngBounds, createLatLngBounds))\n        : getLayoutStylesByPosition(mapCanvasProjection, offset, ensureOfType(position, google.maps.LatLng, createLatLng));\n}\nfunction arePositionsEqual(currentPosition, previousPosition) {\n    return currentPosition.left === previousPosition.left\n        && currentPosition.top === previousPosition.top\n        && currentPosition.width === previousPosition.height\n        && currentPosition.height === previousPosition.height;\n}\n\nfunction createOverlay(container, pane, position, getPixelPositionOffset) {\n    class Overlay extends google.maps.OverlayView {\n        constructor(container, pane, position) {\n            super();\n            this.container = container;\n            this.pane = pane;\n            this.position = position;\n        }\n        onAdd() {\n            var _a;\n            const pane = (_a = this.getPanes()) === null || _a === void 0 ? void 0 : _a[this.pane];\n            pane === null || pane === void 0 ? void 0 : pane.appendChild(this.container);\n        }\n        draw() {\n            const projection = this.getProjection();\n            const point = projection.fromLatLngToDivPixel(this.position);\n            const offset = Object.assign({}, (this.container\n                ? getOffsetOverride(this.container, getPixelPositionOffset)\n                : {\n                    x: 0,\n                    y: 0,\n                }));\n            if (point === null) {\n                return;\n            }\n            this.container.style.transform = `translate(${point.x + offset.x}px, ${point.y + offset.y}px)`;\n        }\n        onRemove() {\n            if (this.container.parentNode !== null) {\n                this.container.parentNode.removeChild(this.container);\n            }\n        }\n    }\n    return new Overlay(container, pane, position);\n}\n\nfunction convertToLatLngString(latLngLike) {\n    if (!latLngLike) {\n        return '';\n    }\n    const latLng = latLngLike instanceof google.maps.LatLng\n        ? latLngLike\n        : new google.maps.LatLng(latLngLike.lat, latLngLike.lng);\n    return latLng + '';\n}\nfunction convertToLatLngBoundsString(latLngBoundsLike) {\n    if (!latLngBoundsLike) {\n        return '';\n    }\n    const latLngBounds = latLngBoundsLike instanceof google.maps.LatLngBounds\n        ? latLngBoundsLike\n        : new google.maps.LatLngBounds(new google.maps.LatLng(latLngBoundsLike.south, latLngBoundsLike.east), new google.maps.LatLng(latLngBoundsLike.north, latLngBoundsLike.west));\n    return latLngBounds + '';\n}\nconst FLOAT_PANE = `floatPane`;\nconst MAP_PANE = `mapPane`;\nconst MARKER_LAYER = `markerLayer`;\nconst OVERLAY_LAYER = `overlayLayer`;\nconst OVERLAY_MOUSE_TARGET = `overlayMouseTarget`;\nfunction OverlayViewFunctional({ position, mapPaneName, zIndex, onLoad, onUnmount, getPixelPositionOffset, children, }) {\n    const map = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(MapContext);\n    const container = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        const div = document.createElement('div');\n        div.style.position = 'absolute';\n        return div;\n    }, []);\n    const overlay = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n        return createOverlay(container, mapPaneName, position, getPixelPositionOffset);\n    }, [container, mapPaneName, position]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        onLoad === null || onLoad === void 0 ? void 0 : onLoad(overlay);\n        overlay === null || overlay === void 0 ? void 0 : overlay.setMap(map);\n        return () => {\n            onUnmount === null || onUnmount === void 0 ? void 0 : onUnmount(overlay);\n            overlay === null || overlay === void 0 ? void 0 : overlay.setMap(null);\n        };\n    }, [map, overlay]);\n    // to move the container to the foreground and background\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n        container.style.zIndex = `${zIndex}`;\n    }, [zIndex, container]);\n    return react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal(children, container);\n}\nconst OverlayViewF = (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(OverlayViewFunctional);\nclass OverlayView extends react__WEBPACK_IMPORTED_MODULE_0__.PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            paneEl: null,\n            containerStyle: {\n                // set initial position\n                position: 'absolute',\n            },\n        };\n        this.updatePane = () => {\n            const mapPaneName = this.props.mapPaneName;\n            // https://developers.google.com/maps/documentation/javascript/3.exp/reference#MapPanes\n            const mapPanes = this.overlayView.getPanes();\n            invariant_1(!!mapPaneName, `OverlayView requires props.mapPaneName but got %s`, mapPaneName);\n            if (mapPanes) {\n                this.setState({\n                    paneEl: mapPanes[mapPaneName],\n                });\n            }\n            else {\n                this.setState({\n                    paneEl: null,\n                });\n            }\n        };\n        this.onAdd = () => {\n            var _a, _b;\n            this.updatePane();\n            (_b = (_a = this.props).onLoad) === null || _b === void 0 ? void 0 : _b.call(_a, this.overlayView);\n        };\n        this.onPositionElement = () => {\n            const mapCanvasProjection = this.overlayView.getProjection();\n            const offset = Object.assign({ x: 0, y: 0 }, (this.containerRef.current\n                ? getOffsetOverride(this.containerRef.current, this.props.getPixelPositionOffset)\n                : {}));\n            const layoutStyles = getLayoutStyles(mapCanvasProjection, offset, this.props.bounds, this.props.position);\n            const { left, top, width, height } = this.state.containerStyle;\n            if (!arePositionsEqual(layoutStyles, { left, top, width, height })) {\n                this.setState({\n                    containerStyle: Object.assign(Object.assign({}, layoutStyles), { position: 'absolute' }),\n                });\n            }\n        };\n        this.draw = () => {\n            this.onPositionElement();\n        };\n        this.onRemove = () => {\n            var _a, _b;\n            this.setState(() => ({\n                paneEl: null,\n            }));\n            // this.mapPaneEl = null\n            (_b = (_a = this.props).onUnmount) === null || _b === void 0 ? void 0 : _b.call(_a, this.overlayView);\n        };\n        this.containerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.createRef)();\n        // You must implement three methods: onAdd(), draw(), and onRemove().\n        const overlayView = new google.maps.OverlayView();\n        overlayView.onAdd = this.onAdd;\n        overlayView.draw = this.draw;\n        overlayView.onRemove = this.onRemove;\n        this.overlayView = overlayView;\n    }\n    componentDidMount() {\n        // You must call setMap() with a valid Map object to trigger the call to\n        // the onAdd() method and setMap(null) in order to trigger the onRemove() method.\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        this.overlayView.setMap(this.context);\n    }\n    componentDidUpdate(prevProps) {\n        const prevPositionString = convertToLatLngString(prevProps.position);\n        const positionString = convertToLatLngString(this.props.position);\n        const prevBoundsString = convertToLatLngBoundsString(prevProps.bounds);\n        const boundsString = convertToLatLngBoundsString(this.props.bounds);\n        if (prevPositionString !== positionString ||\n            prevBoundsString !== boundsString) {\n            this.overlayView.draw();\n        }\n        if (prevProps.mapPaneName !== this.props.mapPaneName) {\n            this.updatePane();\n        }\n    }\n    componentWillUnmount() {\n        this.overlayView.setMap(null);\n    }\n    render() {\n        const paneEl = this.state.paneEl;\n        if (paneEl) {\n            return react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal(jsxRuntime.exports.jsx(\"div\", Object.assign({ ref: this.containerRef, style: this.state.containerStyle }, { children: react__WEBPACK_IMPORTED_MODULE_0__.Children.only(this.props.children) })), paneEl);\n        }\n        else {\n            return null;\n        }\n    }\n}\nOverlayView.FLOAT_PANE = `floatPane`;\nOverlayView.MAP_PANE = `mapPane`;\nOverlayView.MARKER_LAYER = `markerLayer`;\nOverlayView.OVERLAY_LAYER = `overlayLayer`;\nOverlayView.OVERLAY_MOUSE_TARGET = `overlayMouseTarget`;\nOverlayView.contextType = MapContext;\n\nfunction noop() { return; }\n\nconst eventMap$5 = {\n    onDblClick: 'dblclick',\n    onClick: 'click',\n};\nconst updaterMap$5 = {\n    opacity(instance, opacity) {\n        instance.setOpacity(opacity);\n    },\n};\nclass GroundOverlay extends react__WEBPACK_IMPORTED_MODULE_0__.PureComponent {\n    constructor() {\n        super(...arguments);\n        this.registeredEvents = [];\n        this.state = {\n            groundOverlay: null,\n        };\n        this.setGroundOverlayCallback = () => {\n            if (this.state.groundOverlay !== null && this.props.onLoad) {\n                this.props.onLoad(this.state.groundOverlay);\n            }\n        };\n    }\n    componentDidMount() {\n        invariant_1(!!this.props.url || !!this.props.bounds, `For GroundOverlay, url and bounds are passed in to constructor and are immutable after instantiated. This is the behavior of Google Maps JavaScript API v3 ( See https://developers.google.com/maps/documentation/javascript/reference#GroundOverlay) Hence, use the corresponding two props provided by \\`react-google-maps-api\\`, url and bounds. In some cases, you'll need the GroundOverlay component to reflect the changes of url and bounds. You can leverage the React's key property to remount the component. Typically, just \\`key={url}\\` would serve your need. See https://github.com/tomchentw/react-google-maps/issues/655`);\n        const groundOverlay = new google.maps.GroundOverlay(this.props.url, this.props.bounds, Object.assign(Object.assign({}, this.props.options), { \n            // @ts-ignore\n            map: this.context }));\n        this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({\n            updaterMap: updaterMap$5,\n            eventMap: eventMap$5,\n            prevProps: {},\n            nextProps: this.props,\n            instance: groundOverlay,\n        });\n        this.setState(function setGroundOverlay() {\n            return {\n                groundOverlay,\n            };\n        }, this.setGroundOverlayCallback);\n    }\n    componentDidUpdate(prevProps) {\n        if (this.state.groundOverlay !== null) {\n            unregisterEvents(this.registeredEvents);\n            this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({\n                updaterMap: updaterMap$5,\n                eventMap: eventMap$5,\n                prevProps,\n                nextProps: this.props,\n                instance: this.state.groundOverlay,\n            });\n        }\n    }\n    componentWillUnmount() {\n        if (this.state.groundOverlay) {\n            if (this.props.onUnmount) {\n                this.props.onUnmount(this.state.groundOverlay);\n            }\n            this.state.groundOverlay.setMap(null);\n        }\n    }\n    render() {\n        return null;\n    }\n}\nGroundOverlay.defaultProps = {\n    onLoad: noop,\n};\nGroundOverlay.contextType = MapContext;\n\nconst eventMap$4 = {};\nconst updaterMap$4 = {\n    data(instance, data) {\n        instance.setData(data);\n    },\n    map(instance, map) {\n        instance.setMap(map);\n    },\n    options(instance, options) {\n        instance.setOptions(options);\n    },\n};\nclass HeatmapLayer extends react__WEBPACK_IMPORTED_MODULE_0__.PureComponent {\n    constructor() {\n        super(...arguments);\n        this.registeredEvents = [];\n        this.state = {\n            heatmapLayer: null,\n        };\n        this.setHeatmapLayerCallback = () => {\n            if (this.state.heatmapLayer !== null && this.props.onLoad) {\n                this.props.onLoad(this.state.heatmapLayer);\n            }\n        };\n    }\n    componentDidMount() {\n        invariant_1(!!google.maps.visualization, 'Did you include prop libraries={[\"visualization\"]} to <LoadScript />? %s', google.maps.visualization);\n        invariant_1(!!this.props.data, 'data property is required in HeatmapLayer %s', this.props.data);\n        const heatmapLayer = new google.maps.visualization.HeatmapLayer(Object.assign(Object.assign({}, (this.props.options || {})), { data: this.props.data, \n            // @ts-ignore\n            map: this.context }));\n        this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({\n            updaterMap: updaterMap$4,\n            eventMap: eventMap$4,\n            prevProps: {},\n            nextProps: this.props,\n            instance: heatmapLayer,\n        });\n        this.setState(function setHeatmapLayer() {\n            return {\n                heatmapLayer,\n            };\n        }, this.setHeatmapLayerCallback);\n    }\n    componentDidUpdate(prevProps) {\n        unregisterEvents(this.registeredEvents);\n        this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({\n            updaterMap: updaterMap$4,\n            eventMap: eventMap$4,\n            prevProps,\n            nextProps: this.props,\n            instance: this.state.heatmapLayer,\n        });\n    }\n    componentWillUnmount() {\n        if (this.state.heatmapLayer !== null) {\n            if (this.props.onUnmount) {\n                this.props.onUnmount(this.state.heatmapLayer);\n            }\n            unregisterEvents(this.registeredEvents);\n            this.state.heatmapLayer.setMap(null);\n        }\n    }\n    render() {\n        return null;\n    }\n}\nHeatmapLayer.contextType = MapContext;\n\nconst eventMap$3 = {\n    onCloseClick: 'closeclick',\n    onPanoChanged: 'pano_changed',\n    onPositionChanged: 'position_changed',\n    onPovChanged: 'pov_changed',\n    onResize: 'resize',\n    onStatusChanged: 'status_changed',\n    onVisibleChanged: 'visible_changed',\n    onZoomChanged: 'zoom_changed',\n};\nconst updaterMap$3 = {\n    register(instance, provider, options) {\n        instance.registerPanoProvider(provider, options);\n    },\n    links(instance, links) {\n        instance.setLinks(links);\n    },\n    motionTracking(instance, motionTracking) {\n        instance.setMotionTracking(motionTracking);\n    },\n    options(instance, options) {\n        instance.setOptions(options);\n    },\n    pano(instance, pano) {\n        instance.setPano(pano);\n    },\n    position(instance, position) {\n        instance.setPosition(position);\n    },\n    pov(instance, pov) {\n        instance.setPov(pov);\n    },\n    visible(instance, visible) {\n        instance.setVisible(visible);\n    },\n    zoom(instance, zoom) {\n        instance.setZoom(zoom);\n    },\n};\nclass StreetViewPanorama extends react__WEBPACK_IMPORTED_MODULE_0__.PureComponent {\n    constructor() {\n        super(...arguments);\n        this.registeredEvents = [];\n        this.state = {\n            streetViewPanorama: null,\n        };\n        this.setStreetViewPanoramaCallback = () => {\n            if (this.state.streetViewPanorama !== null && this.props.onLoad) {\n                this.props.onLoad(this.state.streetViewPanorama);\n            }\n        };\n    }\n    componentDidMount() {\n        // @ts-ignore\n        const streetViewPanorama = this.context.getStreetView();\n        this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({\n            updaterMap: updaterMap$3,\n            eventMap: eventMap$3,\n            prevProps: {},\n            nextProps: this.props,\n            instance: streetViewPanorama,\n        });\n        this.setState(() => {\n            return {\n                streetViewPanorama,\n            };\n        }, this.setStreetViewPanoramaCallback);\n    }\n    componentDidUpdate(prevProps) {\n        if (this.state.streetViewPanorama !== null) {\n            unregisterEvents(this.registeredEvents);\n            this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({\n                updaterMap: updaterMap$3,\n                eventMap: eventMap$3,\n                prevProps,\n                nextProps: this.props,\n                instance: this.state.streetViewPanorama,\n            });\n        }\n    }\n    componentWillUnmount() {\n        if (this.state.streetViewPanorama !== null) {\n            if (this.props.onUnmount) {\n                this.props.onUnmount(this.state.streetViewPanorama);\n            }\n            unregisterEvents(this.registeredEvents);\n            this.state.streetViewPanorama.setVisible(false);\n        }\n    }\n    render() {\n        return null;\n    }\n}\nStreetViewPanorama.contextType = MapContext;\n\nclass StreetViewService extends react__WEBPACK_IMPORTED_MODULE_0__.PureComponent {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            streetViewService: null,\n        };\n        this.setStreetViewServiceCallback = () => {\n            if (this.state.streetViewService !== null && this.props.onLoad) {\n                this.props.onLoad(this.state.streetViewService);\n            }\n        };\n    }\n    componentDidMount() {\n        const streetViewService = new google.maps.StreetViewService();\n        this.setState(function setStreetViewService() {\n            return {\n                streetViewService,\n            };\n        }, this.setStreetViewServiceCallback);\n    }\n    componentWillUnmount() {\n        if (this.state.streetViewService !== null && this.props.onUnmount) {\n            this.props.onUnmount(this.state.streetViewService);\n        }\n    }\n    render() {\n        return null;\n    }\n}\nStreetViewService.contextType = MapContext;\n\nclass DirectionsService extends react__WEBPACK_IMPORTED_MODULE_0__.PureComponent {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            directionsService: null,\n        };\n        this.setDirectionsServiceCallback = () => {\n            if (this.state.directionsService !== null && this.props.onLoad) {\n                this.props.onLoad(this.state.directionsService);\n            }\n        };\n    }\n    componentDidMount() {\n        invariant_1(!!this.props.options, 'DirectionsService expected options object as parameter, but got %s', this.props.options);\n        const directionsService = new google.maps.DirectionsService();\n        this.setState(function setDirectionsService() {\n            return {\n                directionsService,\n            };\n        }, this.setDirectionsServiceCallback);\n    }\n    componentDidUpdate() {\n        if (this.state.directionsService !== null) {\n            this.state.directionsService.route(this.props.options, this.props.callback);\n        }\n    }\n    componentWillUnmount() {\n        if (this.state.directionsService !== null) {\n            if (this.props.onUnmount) {\n                this.props.onUnmount(this.state.directionsService);\n            }\n        }\n    }\n    render() {\n        return null;\n    }\n}\n\nconst eventMap$2 = {\n    onDirectionsChanged: 'directions_changed',\n};\nconst updaterMap$2 = {\n    directions(instance, directions) {\n        instance.setDirections(directions);\n    },\n    map(instance, map) {\n        instance.setMap(map);\n    },\n    options(instance, options) {\n        instance.setOptions(options);\n    },\n    panel(instance, panel) {\n        instance.setPanel(panel);\n    },\n    routeIndex(instance, routeIndex) {\n        instance.setRouteIndex(routeIndex);\n    },\n};\nclass DirectionsRenderer extends react__WEBPACK_IMPORTED_MODULE_0__.PureComponent {\n    constructor() {\n        super(...arguments);\n        this.registeredEvents = [];\n        this.state = {\n            directionsRenderer: null,\n        };\n        this.setDirectionsRendererCallback = () => {\n            if (this.state.directionsRenderer !== null) {\n                // @ts-ignore\n                this.state.directionsRenderer.setMap(this.context);\n                if (this.props.onLoad) {\n                    this.props.onLoad(this.state.directionsRenderer);\n                }\n            }\n        };\n    }\n    componentDidMount() {\n        const directionsRenderer = new google.maps.DirectionsRenderer(this.props.options);\n        this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({\n            updaterMap: updaterMap$2,\n            eventMap: eventMap$2,\n            prevProps: {},\n            nextProps: this.props,\n            instance: directionsRenderer,\n        });\n        this.setState(function setDirectionsRenderer() {\n            return {\n                directionsRenderer,\n            };\n        }, this.setDirectionsRendererCallback);\n    }\n    componentDidUpdate(prevProps) {\n        if (this.state.directionsRenderer !== null) {\n            unregisterEvents(this.registeredEvents);\n            this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({\n                updaterMap: updaterMap$2,\n                eventMap: eventMap$2,\n                prevProps,\n                nextProps: this.props,\n                instance: this.state.directionsRenderer,\n            });\n        }\n    }\n    componentWillUnmount() {\n        if (this.state.directionsRenderer !== null) {\n            if (this.props.onUnmount) {\n                this.props.onUnmount(this.state.directionsRenderer);\n            }\n            unregisterEvents(this.registeredEvents);\n            if (this.state.directionsRenderer) {\n                this.state.directionsRenderer.setMap(null);\n            }\n        }\n    }\n    render() {\n        return jsxRuntime.exports.jsx(jsxRuntime.exports.Fragment, {});\n    }\n}\nDirectionsRenderer.contextType = MapContext;\n\nclass DistanceMatrixService extends react__WEBPACK_IMPORTED_MODULE_0__.PureComponent {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            distanceMatrixService: null,\n        };\n        this.setDistanceMatrixServiceCallback = () => {\n            if (this.state.distanceMatrixService !== null && this.props.onLoad) {\n                this.props.onLoad(this.state.distanceMatrixService);\n            }\n        };\n    }\n    componentDidMount() {\n        invariant_1(!!this.props.options, 'DistanceMatrixService expected options object as parameter, but go %s', this.props.options);\n        const distanceMatrixService = new google.maps.DistanceMatrixService();\n        this.setState(function setDistanceMatrixService() {\n            return {\n                distanceMatrixService,\n            };\n        }, this.setDistanceMatrixServiceCallback);\n    }\n    componentDidUpdate() {\n        if (this.state.distanceMatrixService !== null) {\n            this.state.distanceMatrixService.getDistanceMatrix(this.props.options, this.props.callback);\n        }\n    }\n    componentWillUnmount() {\n        if (this.state.distanceMatrixService !== null && this.props.onUnmount) {\n            this.props.onUnmount(this.state.distanceMatrixService);\n        }\n    }\n    render() {\n        return null;\n    }\n}\n\nconst eventMap$1 = {\n    onPlacesChanged: 'places_changed',\n};\nconst updaterMap$1 = {\n    bounds(instance, bounds) {\n        instance.setBounds(bounds);\n    },\n};\nclass StandaloneSearchBox extends react__WEBPACK_IMPORTED_MODULE_0__.PureComponent {\n    constructor() {\n        super(...arguments);\n        this.registeredEvents = [];\n        this.containerElement = (0,react__WEBPACK_IMPORTED_MODULE_0__.createRef)();\n        this.state = {\n            searchBox: null,\n        };\n        this.setSearchBoxCallback = () => {\n            if (this.state.searchBox !== null && this.props.onLoad) {\n                this.props.onLoad(this.state.searchBox);\n            }\n        };\n    }\n    componentDidMount() {\n        invariant_1(!!google.maps.places, 'You need to provide libraries={[\"places\"]} prop to <LoadScript /> component %s', google.maps.places);\n        if (this.containerElement !== null && this.containerElement.current !== null) {\n            const input = this.containerElement.current.querySelector('input');\n            if (input !== null) {\n                const searchBox = new google.maps.places.SearchBox(input, this.props.options);\n                this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({\n                    updaterMap: updaterMap$1,\n                    eventMap: eventMap$1,\n                    prevProps: {},\n                    nextProps: this.props,\n                    instance: searchBox,\n                });\n                this.setState(function setSearchBox() {\n                    return {\n                        searchBox,\n                    };\n                }, this.setSearchBoxCallback);\n            }\n        }\n    }\n    componentDidUpdate(prevProps) {\n        if (this.state.searchBox !== null) {\n            unregisterEvents(this.registeredEvents);\n            this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({\n                updaterMap: updaterMap$1,\n                eventMap: eventMap$1,\n                prevProps,\n                nextProps: this.props,\n                instance: this.state.searchBox,\n            });\n        }\n    }\n    componentWillUnmount() {\n        if (this.state.searchBox !== null) {\n            if (this.props.onUnmount) {\n                this.props.onUnmount(this.state.searchBox);\n            }\n            unregisterEvents(this.registeredEvents);\n        }\n    }\n    render() {\n        return jsxRuntime.exports.jsx(\"div\", Object.assign({ ref: this.containerElement }, { children: react__WEBPACK_IMPORTED_MODULE_0__.Children.only(this.props.children) }));\n    }\n}\nStandaloneSearchBox.contextType = MapContext;\n\nconst eventMap = {\n    onPlaceChanged: 'place_changed',\n};\nconst updaterMap = {\n    bounds(instance, bounds) {\n        instance.setBounds(bounds);\n    },\n    restrictions(instance, restrictions) {\n        instance.setComponentRestrictions(restrictions);\n    },\n    fields(instance, fields) {\n        instance.setFields(fields);\n    },\n    options(instance, options) {\n        instance.setOptions(options);\n    },\n    types(instance, types) {\n        instance.setTypes(types);\n    },\n};\nclass Autocomplete extends react__WEBPACK_IMPORTED_MODULE_0__.PureComponent {\n    constructor() {\n        super(...arguments);\n        this.registeredEvents = [];\n        this.containerElement = (0,react__WEBPACK_IMPORTED_MODULE_0__.createRef)();\n        this.state = {\n            autocomplete: null,\n        };\n        this.setAutocompleteCallback = () => {\n            if (this.state.autocomplete !== null && this.props.onLoad) {\n                this.props.onLoad(this.state.autocomplete);\n            }\n        };\n    }\n    componentDidMount() {\n        invariant_1(!!google.maps.places, 'You need to provide libraries={[\"places\"]} prop to <LoadScript /> component %s', google.maps.places);\n        // TODO: why current could be equal null?\n        // @ts-ignore\n        const input = this.containerElement.current.querySelector('input');\n        if (input) {\n            const autocomplete = new google.maps.places.Autocomplete(input, this.props.options);\n            this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({\n                updaterMap,\n                eventMap,\n                prevProps: {},\n                nextProps: this.props,\n                instance: autocomplete,\n            });\n            this.setState(() => {\n                return {\n                    autocomplete,\n                };\n            }, this.setAutocompleteCallback);\n        }\n    }\n    componentDidUpdate(prevProps) {\n        unregisterEvents(this.registeredEvents);\n        this.registeredEvents = applyUpdatersToPropsAndRegisterEvents({\n            updaterMap,\n            eventMap,\n            prevProps,\n            nextProps: this.props,\n            instance: this.state.autocomplete,\n        });\n    }\n    componentWillUnmount() {\n        if (this.state.autocomplete !== null) {\n            unregisterEvents(this.registeredEvents);\n        }\n    }\n    render() {\n        return jsxRuntime.exports.jsx(\"div\", Object.assign({ ref: this.containerElement, className: this.props.className }, { children: react__WEBPACK_IMPORTED_MODULE_0__.Children.only(this.props.children) }));\n    }\n}\nAutocomplete.defaultProps = {\n    className: ''\n};\nAutocomplete.contextType = MapContext;\n\n\n//# sourceMappingURL=esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@react-google-maps/api/dist/esm.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[2].oneOf[4].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[2].oneOf[4].use[2]!./styles/universal/Navbar.module.css":
/*!************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[2].oneOf[4].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[2].oneOf[4].use[2]!./styles/universal/Navbar.module.css ***!
  \************************************************************************************************************************************************************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js */ \"./node_modules/next/dist/build/webpack/loaders/css-loader/src/runtime/api.js\");\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(true);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".Navbar_topnav__sH70O {\\n    overflow: hidden;\\n    margin-top: 15px;\\n    padding: 5px 30px 5px 5px;\\n    /* border-bottom : 3px solid #000; */\\n    box-shadow: 0 4px 2px -1px gray;\\n  }\\n  .Navbar_topnav__sH70O .Navbar_logo__KlokD {\\n    display: inline-block;\\n    float: left;\\n  }\\n\\n\\n  .Navbar_topnav__sH70O .Navbar_accessibility__F7lXZ {\\n    float: right;\\n    background-color: white;\\n    color: #e60e33;\\n    outline-color: #e60e33;\\n    outline-style: solid; \\n  }\\n\\n  .Navbar_topnav__sH70O .Navbar_accessibility__F7lXZ:hover {\\n    background-color: #e60e33;\\n    color: white;\\n  }\\n\\n  .Navbar_topnav__sH70O { /* Safari */\\n    position: sticky;\\n    top: 0px;\\n    background:white;\\n  }\\n\\n  .Navbar_topnav__sH70O a {\\n    width: 10%;\\n    margin-top: 10px;\\n    margin-left: 25px;\\n    background-color: #e60e33;\\n    display: inline-block;\\n    cursor: pointer;\\n    height: 75px;\\n    border-radius: 100px;\\n    color: #f2f2f2;\\n    text-align: center;\\n    padding: 27px 16px;\\n    text-decoration: none;\\n    text-transform: uppercase;\\n    font-size: 20px;\\n    transition: 0.3s ease;\\n  }\\n  \\n  .Navbar_topnav__sH70O a:hover {\\n    background-color: white;\\n    color: #e60e33;\\n    outline-color: #e60e33;\\n    outline-style: solid;\\n  }\", \"\",{\"version\":3,\"sources\":[\"webpack://styles/universal/Navbar.module.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,gBAAgB;IAChB,gBAAgB;IAChB,yBAAyB;IACzB,oCAAoC;IACpC,+BAA+B;EACjC;EACA;IACE,qBAAqB;IACrB,WAAW;EACb;;;EAGA;IACE,YAAY;IACZ,uBAAuB;IACvB,cAAc;IACd,sBAAsB;IACtB,oBAAoB;EACtB;;EAEA;IACE,yBAAyB;IACzB,YAAY;EACd;;EAEA,wBAC4B,WAAW;IACrC,gBAAgB;IAChB,QAAQ;IACR,gBAAgB;EAClB;;EAEA;IACE,UAAU;IACV,gBAAgB;IAChB,iBAAiB;IACjB,yBAAyB;IACzB,qBAAqB;IACrB,eAAe;IACf,YAAY;IACZ,oBAAoB;IACpB,cAAc;IACd,kBAAkB;IAClB,kBAAkB;IAClB,qBAAqB;IACrB,yBAAyB;IACzB,eAAe;IACf,qBAAqB;EACvB;;EAEA;IACE,uBAAuB;IACvB,cAAc;IACd,sBAAsB;IACtB,oBAAoB;EACtB\",\"sourcesContent\":[\".topnav {\\n    overflow: hidden;\\n    margin-top: 15px;\\n    padding: 5px 30px 5px 5px;\\n    /* border-bottom : 3px solid #000; */\\n    box-shadow: 0 4px 2px -1px gray;\\n  }\\n  .topnav .logo {\\n    display: inline-block;\\n    float: left;\\n  }\\n\\n\\n  .topnav .accessibility {\\n    float: right;\\n    background-color: white;\\n    color: #e60e33;\\n    outline-color: #e60e33;\\n    outline-style: solid; \\n  }\\n\\n  .topnav .accessibility:hover {\\n    background-color: #e60e33;\\n    color: white;\\n  }\\n\\n  .topnav {\\n    position: -webkit-sticky; /* Safari */\\n    position: sticky;\\n    top: 0px;\\n    background:white;\\n  }\\n\\n  .topnav a {\\n    width: 10%;\\n    margin-top: 10px;\\n    margin-left: 25px;\\n    background-color: #e60e33;\\n    display: inline-block;\\n    cursor: pointer;\\n    height: 75px;\\n    border-radius: 100px;\\n    color: #f2f2f2;\\n    text-align: center;\\n    padding: 27px 16px;\\n    text-decoration: none;\\n    text-transform: uppercase;\\n    font-size: 20px;\\n    transition: 0.3s ease;\\n  }\\n  \\n  .topnav a:hover {\\n    background-color: white;\\n    color: #e60e33;\\n    outline-color: #e60e33;\\n    outline-style: solid;\\n  }\"],\"sourceRoot\":\"\"}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t\"topnav\": \"Navbar_topnav__sH70O\",\n\t\"logo\": \"Navbar_logo__KlokD\",\n\t\"accessibility\": \"Navbar_accessibility__F7lXZ\"\n};\nmodule.exports = ___CSS_LOADER_EXPORT___;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9jc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cnVsZVNldFsxXS5ydWxlc1syXS5vbmVPZls0XS51c2VbMV0hLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0ub25lT2ZbNF0udXNlWzJdIS4vc3R5bGVzL3VuaXZlcnNhbC9OYXZiYXIubW9kdWxlLmNzcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGtDQUFrQyxtQkFBTyxDQUFDLHNLQUFrRjtBQUM1SDtBQUNBO0FBQ0EsaUVBQWlFLHVCQUF1Qix1QkFBdUIsZ0NBQWdDLHlDQUF5Qyx3Q0FBd0MsS0FBSywrQ0FBK0MsNEJBQTRCLGtCQUFrQixLQUFLLDREQUE0RCxtQkFBbUIsOEJBQThCLHFCQUFxQiw2QkFBNkIsNEJBQTRCLEtBQUssZ0VBQWdFLGdDQUFnQyxtQkFBbUIsS0FBSyw4QkFBOEIsbUNBQW1DLGVBQWUsdUJBQXVCLEtBQUssK0JBQStCLGlCQUFpQix1QkFBdUIsd0JBQXdCLGdDQUFnQyw0QkFBNEIsc0JBQXNCLG1CQUFtQiwyQkFBMkIscUJBQXFCLHlCQUF5Qix5QkFBeUIsNEJBQTRCLGdDQUFnQyxzQkFBc0IsNEJBQTRCLEtBQUssdUNBQXVDLDhCQUE4QixxQkFBcUIsNkJBQTZCLDJCQUEyQixLQUFLLE9BQU8sbUdBQW1HLFlBQVksYUFBYSxhQUFhLGFBQWEsYUFBYSxNQUFNLEtBQUssWUFBWSxXQUFXLE9BQU8sS0FBSyxVQUFVLFlBQVksV0FBVyxZQUFZLGFBQWEsT0FBTyxLQUFLLFlBQVksV0FBVyxNQUFNLGlCQUFpQixhQUFhLFdBQVcsWUFBWSxPQUFPLEtBQUssVUFBVSxZQUFZLGFBQWEsYUFBYSxhQUFhLFdBQVcsVUFBVSxZQUFZLFdBQVcsWUFBWSxhQUFhLGFBQWEsYUFBYSxXQUFXLFlBQVksT0FBTyxLQUFLLFlBQVksV0FBVyxZQUFZLGFBQWEsbUNBQW1DLHVCQUF1Qix1QkFBdUIsZ0NBQWdDLHlDQUF5Qyx3Q0FBd0MsS0FBSyxtQkFBbUIsNEJBQTRCLGtCQUFrQixLQUFLLGdDQUFnQyxtQkFBbUIsOEJBQThCLHFCQUFxQiw2QkFBNkIsNEJBQTRCLEtBQUssb0NBQW9DLGdDQUFnQyxtQkFBbUIsS0FBSyxlQUFlLGdDQUFnQyxtQ0FBbUMsZUFBZSx1QkFBdUIsS0FBSyxpQkFBaUIsaUJBQWlCLHVCQUF1Qix3QkFBd0IsZ0NBQWdDLDRCQUE0QixzQkFBc0IsbUJBQW1CLDJCQUEyQixxQkFBcUIseUJBQXlCLHlCQUF5Qiw0QkFBNEIsZ0NBQWdDLHNCQUFzQiw0QkFBNEIsS0FBSyx5QkFBeUIsOEJBQThCLHFCQUFxQiw2QkFBNkIsMkJBQTJCLEtBQUssbUJBQW1CO0FBQ3ZqRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zdHlsZXMvdW5pdmVyc2FsL05hdmJhci5tb2R1bGUuY3NzPzU3OTEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xudmFyIF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9jc3MtbG9hZGVyL3NyYy9ydW50aW1lL2FwaS5qc1wiKTtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyh0cnVlKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5OYXZiYXJfdG9wbmF2X19zSDcwTyB7XFxuICAgIG92ZXJmbG93OiBoaWRkZW47XFxuICAgIG1hcmdpbi10b3A6IDE1cHg7XFxuICAgIHBhZGRpbmc6IDVweCAzMHB4IDVweCA1cHg7XFxuICAgIC8qIGJvcmRlci1ib3R0b20gOiAzcHggc29saWQgIzAwMDsgKi9cXG4gICAgYm94LXNoYWRvdzogMCA0cHggMnB4IC0xcHggZ3JheTtcXG4gIH1cXG4gIC5OYXZiYXJfdG9wbmF2X19zSDcwTyAuTmF2YmFyX2xvZ29fX0tsb2tEIHtcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgICBmbG9hdDogbGVmdDtcXG4gIH1cXG5cXG5cXG4gIC5OYXZiYXJfdG9wbmF2X19zSDcwTyAuTmF2YmFyX2FjY2Vzc2liaWxpdHlfX0Y3bFhaIHtcXG4gICAgZmxvYXQ6IHJpZ2h0O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gICAgY29sb3I6ICNlNjBlMzM7XFxuICAgIG91dGxpbmUtY29sb3I6ICNlNjBlMzM7XFxuICAgIG91dGxpbmUtc3R5bGU6IHNvbGlkOyBcXG4gIH1cXG5cXG4gIC5OYXZiYXJfdG9wbmF2X19zSDcwTyAuTmF2YmFyX2FjY2Vzc2liaWxpdHlfX0Y3bFhaOmhvdmVyIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2U2MGUzMztcXG4gICAgY29sb3I6IHdoaXRlO1xcbiAgfVxcblxcbiAgLk5hdmJhcl90b3BuYXZfX3NINzBPIHsgLyogU2FmYXJpICovXFxuICAgIHBvc2l0aW9uOiBzdGlja3k7XFxuICAgIHRvcDogMHB4O1xcbiAgICBiYWNrZ3JvdW5kOndoaXRlO1xcbiAgfVxcblxcbiAgLk5hdmJhcl90b3BuYXZfX3NINzBPIGEge1xcbiAgICB3aWR0aDogMTAlO1xcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xcbiAgICBtYXJnaW4tbGVmdDogMjVweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2U2MGUzMztcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgIGhlaWdodDogNzVweDtcXG4gICAgYm9yZGVyLXJhZGl1czogMTAwcHg7XFxuICAgIGNvbG9yOiAjZjJmMmYyO1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIHBhZGRpbmc6IDI3cHggMTZweDtcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xcbiAgICBmb250LXNpemU6IDIwcHg7XFxuICAgIHRyYW5zaXRpb246IDAuM3MgZWFzZTtcXG4gIH1cXG4gIFxcbiAgLk5hdmJhcl90b3BuYXZfX3NINzBPIGE6aG92ZXIge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gICAgY29sb3I6ICNlNjBlMzM7XFxuICAgIG91dGxpbmUtY29sb3I6ICNlNjBlMzM7XFxuICAgIG91dGxpbmUtc3R5bGU6IHNvbGlkO1xcbiAgfVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly9zdHlsZXMvdW5pdmVyc2FsL05hdmJhci5tb2R1bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGdCQUFnQjtJQUNoQix5QkFBeUI7SUFDekIsb0NBQW9DO0lBQ3BDLCtCQUErQjtFQUNqQztFQUNBO0lBQ0UscUJBQXFCO0lBQ3JCLFdBQVc7RUFDYjs7O0VBR0E7SUFDRSxZQUFZO0lBQ1osdUJBQXVCO0lBQ3ZCLGNBQWM7SUFDZCxzQkFBc0I7SUFDdEIsb0JBQW9CO0VBQ3RCOztFQUVBO0lBQ0UseUJBQXlCO0lBQ3pCLFlBQVk7RUFDZDs7RUFFQSx3QkFDNEIsV0FBVztJQUNyQyxnQkFBZ0I7SUFDaEIsUUFBUTtJQUNSLGdCQUFnQjtFQUNsQjs7RUFFQTtJQUNFLFVBQVU7SUFDVixnQkFBZ0I7SUFDaEIsaUJBQWlCO0lBQ2pCLHlCQUF5QjtJQUN6QixxQkFBcUI7SUFDckIsZUFBZTtJQUNmLFlBQVk7SUFDWixvQkFBb0I7SUFDcEIsY0FBYztJQUNkLGtCQUFrQjtJQUNsQixrQkFBa0I7SUFDbEIscUJBQXFCO0lBQ3JCLHlCQUF5QjtJQUN6QixlQUFlO0lBQ2YscUJBQXFCO0VBQ3ZCOztFQUVBO0lBQ0UsdUJBQXVCO0lBQ3ZCLGNBQWM7SUFDZCxzQkFBc0I7SUFDdEIsb0JBQW9CO0VBQ3RCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi50b3BuYXYge1xcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgICBtYXJnaW4tdG9wOiAxNXB4O1xcbiAgICBwYWRkaW5nOiA1cHggMzBweCA1cHggNXB4O1xcbiAgICAvKiBib3JkZXItYm90dG9tIDogM3B4IHNvbGlkICMwMDA7ICovXFxuICAgIGJveC1zaGFkb3c6IDAgNHB4IDJweCAtMXB4IGdyYXk7XFxuICB9XFxuICAudG9wbmF2IC5sb2dvIHtcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgICBmbG9hdDogbGVmdDtcXG4gIH1cXG5cXG5cXG4gIC50b3BuYXYgLmFjY2Vzc2liaWxpdHkge1xcbiAgICBmbG9hdDogcmlnaHQ7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgICBjb2xvcjogI2U2MGUzMztcXG4gICAgb3V0bGluZS1jb2xvcjogI2U2MGUzMztcXG4gICAgb3V0bGluZS1zdHlsZTogc29saWQ7IFxcbiAgfVxcblxcbiAgLnRvcG5hdiAuYWNjZXNzaWJpbGl0eTpob3ZlciB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNlNjBlMzM7XFxuICAgIGNvbG9yOiB3aGl0ZTtcXG4gIH1cXG5cXG4gIC50b3BuYXYge1xcbiAgICBwb3NpdGlvbjogLXdlYmtpdC1zdGlja3k7IC8qIFNhZmFyaSAqL1xcbiAgICBwb3NpdGlvbjogc3RpY2t5O1xcbiAgICB0b3A6IDBweDtcXG4gICAgYmFja2dyb3VuZDp3aGl0ZTtcXG4gIH1cXG5cXG4gIC50b3BuYXYgYSB7XFxuICAgIHdpZHRoOiAxMCU7XFxuICAgIG1hcmdpbi10b3A6IDEwcHg7XFxuICAgIG1hcmdpbi1sZWZ0OiAyNXB4O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTYwZTMzO1xcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgaGVpZ2h0OiA3NXB4O1xcbiAgICBib3JkZXItcmFkaXVzOiAxMDBweDtcXG4gICAgY29sb3I6ICNmMmYyZjI7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgcGFkZGluZzogMjdweCAxNnB4O1xcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XFxuICAgIGZvbnQtc2l6ZTogMjBweDtcXG4gICAgdHJhbnNpdGlvbjogMC4zcyBlYXNlO1xcbiAgfVxcbiAgXFxuICAudG9wbmF2IGE6aG92ZXIge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gICAgY29sb3I6ICNlNjBlMzM7XFxuICAgIG91dGxpbmUtY29sb3I6ICNlNjBlMzM7XFxuICAgIG91dGxpbmUtc3R5bGU6IHNvbGlkO1xcbiAgfVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ubG9jYWxzID0ge1xuXHRcInRvcG5hdlwiOiBcIk5hdmJhcl90b3BuYXZfX3NINzBPXCIsXG5cdFwibG9nb1wiOiBcIk5hdmJhcl9sb2dvX19LbG9rRFwiLFxuXHRcImFjY2Vzc2liaWxpdHlcIjogXCJOYXZiYXJfYWNjZXNzaWJpbGl0eV9fRjdsWFpcIlxufTtcbm1vZHVsZS5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[2].oneOf[4].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[2].oneOf[4].use[2]!./styles/universal/Navbar.module.css\n"));

/***/ }),

/***/ "./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=D%3A%5CFall%202022%5CCSCE%20315%5CProject_3%5Ccode%5CTeam34_Project_3%5Cpos_system%5Cpages%5Cfind%5Cindex.js&page=%2Ffind!":
/*!******************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=D%3A%5CFall%202022%5CCSCE%20315%5CProject_3%5Ccode%5CTeam34_Project_3%5Cpos_system%5Cpages%5Cfind%5Cindex.js&page=%2Ffind! ***!
  \******************************************************************************************************************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/find\",\n      function () {\n        return __webpack_require__(/*! ./pages/find/index.js */ \"./pages/find/index.js\");\n      }\n    ]);\n    if(true) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/find\"])\n      });\n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWNsaWVudC1wYWdlcy1sb2FkZXIuanM/YWJzb2x1dGVQYWdlUGF0aD1EJTNBJTVDRmFsbCUyMDIwMjIlNUNDU0NFJTIwMzE1JTVDUHJvamVjdF8zJTVDY29kZSU1Q1RlYW0zNF9Qcm9qZWN0XzMlNUNwb3Nfc3lzdGVtJTVDcGFnZXMlNUNmaW5kJTVDaW5kZXguanMmcGFnZT0lMkZmaW5kIS5qcyIsIm1hcHBpbmdzIjoiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxtQkFBTyxDQUFDLG9EQUF1QjtBQUM5QztBQUNBO0FBQ0EsT0FBTyxJQUFVO0FBQ2pCLE1BQU0sVUFBVTtBQUNoQjtBQUNBLE9BQU87QUFDUDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8/MDFhZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcbiAgICAod2luZG93Ll9fTkVYVF9QID0gd2luZG93Ll9fTkVYVF9QIHx8IFtdKS5wdXNoKFtcbiAgICAgIFwiL2ZpbmRcIixcbiAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHJlcXVpcmUoXCIuL3BhZ2VzL2ZpbmQvaW5kZXguanNcIik7XG4gICAgICB9XG4gICAgXSk7XG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd2luZG93Ll9fTkVYVF9QLnB1c2goW1wiL2ZpbmRcIl0pXG4gICAgICB9KTtcbiAgICB9XG4gICJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=D%3A%5CFall%202022%5CCSCE%20315%5CProject_3%5Ccode%5CTeam34_Project_3%5Cpos_system%5Cpages%5Cfind%5Cindex.js&page=%2Ffind!\n"));

/***/ }),

/***/ "./assets/navbar-loog.png":
/*!********************************!*\
  !*** ./assets/navbar-loog.png ***!
  \********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\"src\":\"/_next/static/media/navbar-loog.e3fbb69b.png\",\"height\":2160,\"width\":3840,\"blurDataURL\":\"/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fnavbar-loog.e3fbb69b.png&w=8&q=70\",\"blurWidth\":8,\"blurHeight\":5});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9hc3NldHMvbmF2YmFyLWxvb2cucG5nLmpzIiwibWFwcGluZ3MiOiI7QUFBQSwrREFBZSxDQUFDLDRNQUE0TSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9hc3NldHMvbmF2YmFyLWxvb2cucG5nPzM4Y2IiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1wic3JjXCI6XCIvX25leHQvc3RhdGljL21lZGlhL25hdmJhci1sb29nLmUzZmJiNjliLnBuZ1wiLFwiaGVpZ2h0XCI6MjE2MCxcIndpZHRoXCI6Mzg0MCxcImJsdXJEYXRhVVJMXCI6XCIvX25leHQvaW1hZ2U/dXJsPSUyRl9uZXh0JTJGc3RhdGljJTJGbWVkaWElMkZuYXZiYXItbG9vZy5lM2ZiYjY5Yi5wbmcmdz04JnE9NzBcIixcImJsdXJXaWR0aFwiOjgsXCJibHVySGVpZ2h0XCI6NX07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./assets/navbar-loog.png\n"));

/***/ }),

/***/ "./styles/universal/Navbar.module.css":
/*!********************************************!*\
  !*** ./styles/universal/Navbar.module.css ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var api = __webpack_require__(/*! !../../node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js\");\n            var content = __webpack_require__(/*! !!../../node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[2].oneOf[4].use[1]!../../node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[2].oneOf[4].use[2]!./Navbar.module.css */ \"./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[2].oneOf[4].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[2].oneOf[4].use[2]!./styles/universal/Navbar.module.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = function(element) {\n                    // By default, style-loader injects CSS into the bottom\n                    // of <head>. This causes ordering problems between dev\n                    // and prod. To fix this, we render a <noscript> tag as\n                    // an anchor for the styles to be placed before. These\n                    // styles will be applied _before_ <style jsx global>.\n                    // These elements should always exist. If they do not,\n                    // this code should fail.\n                    var anchorElement = document.querySelector(\"#__next_css__DO_NOT_USE__\");\n                    var parentNode = anchorElement.parentNode// Normally <head>\n                    ;\n                    // Each style tag should be placed right before our\n                    // anchor. By inserting before and not after, we do not\n                    // need to track the last inserted element.\n                    parentNode.insertBefore(element, anchorElement);\n                };\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (true) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n    if (!a && b || a && !b) {\n        return false;\n    }\n    let p;\n    for(p in a){\n        if (isNamedExport && p === \"default\") {\n            continue;\n        }\n        if (a[p] !== b[p]) {\n            return false;\n        }\n    }\n    for(p in b){\n        if (isNamedExport && p === \"default\") {\n            continue;\n        }\n        if (!a[p]) {\n            return false;\n        }\n    }\n    return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      /*! !!../../node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[2].oneOf[4].use[1]!../../node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[2].oneOf[4].use[2]!./Navbar.module.css */ \"./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[2].oneOf[4].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[2].oneOf[4].use[2]!./styles/universal/Navbar.module.css\",\n      function () {\n        content = __webpack_require__(/*! !!../../node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[2].oneOf[4].use[1]!../../node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[2].oneOf[4].use[2]!./Navbar.module.css */ \"./node_modules/next/dist/build/webpack/loaders/css-loader/src/index.js??ruleSet[1].rules[2].oneOf[4].use[1]!./node_modules/next/dist/build/webpack/loaders/postcss-loader/src/index.js??ruleSet[1].rules[2].oneOf[4].use[2]!./styles/universal/Navbar.module.css\");\n\n              content = content.__esModule ? content.default : content;\n\n              if (typeof content === 'string') {\n                content = [[module.id, content, '']];\n              }\n\n              if (!isEqualLocals(oldLocals, content.locals)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nmodule.exports = content.locals || {};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zdHlsZXMvdW5pdmVyc2FsL05hdmJhci5tb2R1bGUuY3NzLmpzIiwibWFwcGluZ3MiOiJBQUFBLFVBQVUsbUJBQU8sQ0FBQyx1TkFBMkc7QUFDN0gsMEJBQTBCLG1CQUFPLENBQUMsbWdCQUEyUDs7QUFFN1I7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7OztBQUdBLElBQUksSUFBVTtBQUNkLHlCQUF5QixVQUFVO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJLGlCQUFpQjtBQUNyQixNQUFNLG1nQkFBMlA7QUFDalE7QUFDQSxrQkFBa0IsbUJBQU8sQ0FBQyxtZ0JBQTJQOztBQUVyUjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxnQkFBZ0IsVUFBVTs7QUFFMUI7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxFQUFFLFVBQVU7QUFDWjtBQUNBLEdBQUc7QUFDSDs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zdHlsZXMvdW5pdmVyc2FsL05hdmJhci5tb2R1bGUuY3NzP2RmZTgiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvbmV4dC1zdHlsZS1sb2FkZXIvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL2Nzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLm9uZU9mWzRdLnVzZVsxXSEuLi8uLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0ub25lT2ZbNF0udXNlWzJdIS4vTmF2YmFyLm1vZHVsZS5jc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEJ5IGRlZmF1bHQsIHN0eWxlLWxvYWRlciBpbmplY3RzIENTUyBpbnRvIHRoZSBib3R0b21cbiAgICAgICAgICAgICAgICAgICAgLy8gb2YgPGhlYWQ+LiBUaGlzIGNhdXNlcyBvcmRlcmluZyBwcm9ibGVtcyBiZXR3ZWVuIGRldlxuICAgICAgICAgICAgICAgICAgICAvLyBhbmQgcHJvZC4gVG8gZml4IHRoaXMsIHdlIHJlbmRlciBhIDxub3NjcmlwdD4gdGFnIGFzXG4gICAgICAgICAgICAgICAgICAgIC8vIGFuIGFuY2hvciBmb3IgdGhlIHN0eWxlcyB0byBiZSBwbGFjZWQgYmVmb3JlLiBUaGVzZVxuICAgICAgICAgICAgICAgICAgICAvLyBzdHlsZXMgd2lsbCBiZSBhcHBsaWVkIF9iZWZvcmVfIDxzdHlsZSBqc3ggZ2xvYmFsPi5cbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlc2UgZWxlbWVudHMgc2hvdWxkIGFsd2F5cyBleGlzdC4gSWYgdGhleSBkbyBub3QsXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgY29kZSBzaG91bGQgZmFpbC5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGFuY2hvckVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI19fbmV4dF9jc3NfX0RPX05PVF9VU0VfX1wiKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudE5vZGUgPSBhbmNob3JFbGVtZW50LnBhcmVudE5vZGUvLyBOb3JtYWxseSA8aGVhZD5cbiAgICAgICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgICAgICAgICAvLyBFYWNoIHN0eWxlIHRhZyBzaG91bGQgYmUgcGxhY2VkIHJpZ2h0IGJlZm9yZSBvdXJcbiAgICAgICAgICAgICAgICAgICAgLy8gYW5jaG9yLiBCeSBpbnNlcnRpbmcgYmVmb3JlIGFuZCBub3QgYWZ0ZXIsIHdlIGRvIG5vdFxuICAgICAgICAgICAgICAgICAgICAvLyBuZWVkIHRvIHRyYWNrIHRoZSBsYXN0IGluc2VydGVkIGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGVsZW1lbnQsIGFuY2hvckVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIH07XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cbmlmIChtb2R1bGUuaG90KSB7XG4gIGlmICghY29udGVudC5sb2NhbHMgfHwgbW9kdWxlLmhvdC5pbnZhbGlkYXRlKSB7XG4gICAgdmFyIGlzRXF1YWxMb2NhbHMgPSBmdW5jdGlvbiBpc0VxdWFsTG9jYWxzKGEsIGIsIGlzTmFtZWRFeHBvcnQpIHtcbiAgICBpZiAoIWEgJiYgYiB8fCBhICYmICFiKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgbGV0IHA7XG4gICAgZm9yKHAgaW4gYSl7XG4gICAgICAgIGlmIChpc05hbWVkRXhwb3J0ICYmIHAgPT09IFwiZGVmYXVsdFwiKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYVtwXSAhPT0gYltwXSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvcihwIGluIGIpe1xuICAgICAgICBpZiAoaXNOYW1lZEV4cG9ydCAmJiBwID09PSBcImRlZmF1bHRcIikge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFhW3BdKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59O1xuICAgIHZhciBvbGRMb2NhbHMgPSBjb250ZW50LmxvY2FscztcblxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFxuICAgICAgXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL2Nzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLm9uZU9mWzRdLnVzZVsxXSEuLi8uLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0ub25lT2ZbNF0udXNlWzJdIS4vTmF2YmFyLm1vZHVsZS5jc3NcIixcbiAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL2Nzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdLm9uZU9mWzRdLnVzZVsxXSEuLi8uLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0ub25lT2ZbNF0udXNlWzJdIS4vTmF2YmFyLm1vZHVsZS5jc3NcIik7XG5cbiAgICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICghaXNFcXVhbExvY2FscyhvbGRMb2NhbHMsIGNvbnRlbnQubG9jYWxzKSkge1xuICAgICAgICAgICAgICAgIG1vZHVsZS5ob3QuaW52YWxpZGF0ZSgpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgb2xkTG9jYWxzID0gY29udGVudC5sb2NhbHM7XG5cbiAgICAgICAgICAgICAgdXBkYXRlKGNvbnRlbnQpO1xuICAgICAgfVxuICAgIClcbiAgfVxuXG4gIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHtcbiAgICB1cGRhdGUoKTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./styles/universal/Navbar.module.css\n"));

/***/ }),

/***/ "./components/universal/NavBar.js":
/*!****************************************!*\
  !*** ./components/universal/NavBar.js ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _styles_universal_Navbar_module_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../styles/universal/Navbar.module.css */ \"./styles/universal/Navbar.module.css\");\n/* harmony import */ var _styles_universal_Navbar_module_css__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_styles_universal_Navbar_module_css__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _assets_navbar_loog_png__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../assets/navbar-loog.png */ \"./assets/navbar-loog.png\");\n/* harmony import */ var next_image__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/image */ \"./node_modules/next/image.js\");\n/* harmony import */ var next_image__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_image__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/link */ \"./node_modules/next/link.js\");\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_3__);\nvar _this = undefined;\n\n\n\n\n\nfunction placeCart(isCustomer) {\n    if (isCustomer) return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"a\", {\n        className: (_styles_universal_Navbar_module_css__WEBPACK_IMPORTED_MODULE_4___default().accessibility),\n        children: \"Cart logo\"\n    }, void 0, false, {\n        fileName: \"D:\\\\Fall 2022\\\\CSCE 315\\\\Project_3\\\\code\\\\Team34_Project_3\\\\pos_system\\\\components\\\\universal\\\\NavBar.js\",\n        lineNumber: 9,\n        columnNumber: 16\n    }, this);\n}\nfunction placeLoginButton(isLogged) {\n    if (!isLogged) return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"a\", {\n        className: (_styles_universal_Navbar_module_css__WEBPACK_IMPORTED_MODULE_4___default().accessibility),\n        children: \"Login\"\n    }, void 0, false, {\n        fileName: \"D:\\\\Fall 2022\\\\CSCE 315\\\\Project_3\\\\code\\\\Team34_Project_3\\\\pos_system\\\\components\\\\universal\\\\NavBar.js\",\n        lineNumber: 14,\n        columnNumber: 16\n    }, this);\n}\nvar NavBar = function(props) {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: (_styles_universal_Navbar_module_css__WEBPACK_IMPORTED_MODULE_4___default().topnav),\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: (_styles_universal_Navbar_module_css__WEBPACK_IMPORTED_MODULE_4___default().logo),\n                href: \"/\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_image__WEBPACK_IMPORTED_MODULE_2___default()), {\n                    src: _assets_navbar_loog_png__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n                    width: 170,\n                    height: 100\n                }, void 0, false, {\n                    fileName: \"D:\\\\Fall 2022\\\\CSCE 315\\\\Project_3\\\\code\\\\Team34_Project_3\\\\pos_system\\\\components\\\\universal\\\\NavBar.js\",\n                    lineNumber: 21,\n                    columnNumber: 52\n                }, _this)\n            }, void 0, false, {\n                fileName: \"D:\\\\Fall 2022\\\\CSCE 315\\\\Project_3\\\\code\\\\Team34_Project_3\\\\pos_system\\\\components\\\\universal\\\\NavBar.js\",\n                lineNumber: 21,\n                columnNumber: 13\n            }, _this),\n            props.navItems.map(function(navItem) {\n                // return <a href={navItem.route}>{navItem.navItemName}</a>\n                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_link__WEBPACK_IMPORTED_MODULE_3___default()), {\n                    replace: true,\n                    href: navItem.route,\n                    children: navItem.navItemName\n                }, void 0, false, {\n                    fileName: \"D:\\\\Fall 2022\\\\CSCE 315\\\\Project_3\\\\code\\\\Team34_Project_3\\\\pos_system\\\\components\\\\universal\\\\NavBar.js\",\n                    lineNumber: 24,\n                    columnNumber: 24\n                }, _this);\n            }),\n            placeCart(props.isCustomer),\n            placeLoginButton(false),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"a\", {\n                className: (_styles_universal_Navbar_module_css__WEBPACK_IMPORTED_MODULE_4___default().accessibility),\n                children: \"Color\"\n            }, void 0, false, {\n                fileName: \"D:\\\\Fall 2022\\\\CSCE 315\\\\Project_3\\\\code\\\\Team34_Project_3\\\\pos_system\\\\components\\\\universal\\\\NavBar.js\",\n                lineNumber: 28,\n                columnNumber: 13\n            }, _this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"a\", {\n                className: (_styles_universal_Navbar_module_css__WEBPACK_IMPORTED_MODULE_4___default().accessibility),\n                children: \"Voice\"\n            }, void 0, false, {\n                fileName: \"D:\\\\Fall 2022\\\\CSCE 315\\\\Project_3\\\\code\\\\Team34_Project_3\\\\pos_system\\\\components\\\\universal\\\\NavBar.js\",\n                lineNumber: 29,\n                columnNumber: 13\n            }, _this)\n        ]\n    }, void 0, true, {\n        fileName: \"D:\\\\Fall 2022\\\\CSCE 315\\\\Project_3\\\\code\\\\Team34_Project_3\\\\pos_system\\\\components\\\\universal\\\\NavBar.js\",\n        lineNumber: 19,\n        columnNumber: 9\n    }, _this);\n};\n_c = NavBar;\n/* harmony default export */ __webpack_exports__[\"default\"] = (NavBar);\nvar _c;\n$RefreshReg$(_c, \"NavBar\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL3VuaXZlcnNhbC9OYXZCYXIuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBOztBQUE4RDtBQUNUO0FBQ3RCO0FBRUY7QUFFN0IsU0FBU0ksU0FBUyxDQUFDQyxVQUFVLEVBQUU7SUFDM0IsSUFBSUEsVUFBVSxFQUNWLHFCQUFPLDhEQUFDQyxHQUFDO1FBQUNDLFNBQVMsRUFBRVAsMEZBQW9CO2tCQUFFLFdBQVM7Ozs7O1lBQUk7QUFDaEUsQ0FBQztBQUVELFNBQVNTLGdCQUFnQixDQUFDQyxRQUFRLEVBQUU7SUFDaEMsSUFBSSxDQUFDQSxRQUFRLEVBQ1QscUJBQU8sOERBQUNKLEdBQUM7UUFBQ0MsU0FBUyxFQUFFUCwwRkFBb0I7a0JBQUUsT0FBSzs7Ozs7WUFBSTtBQUM1RCxDQUFDO0FBRUQsSUFBTVcsTUFBTSxHQUFHLFNBQUNDLEtBQUssRUFBSztJQUN0QixxQkFDSSw4REFBQ0MsS0FBRztRQUFDTixTQUFTLEVBQUVQLG1GQUFhOzswQkFFekIsOERBQUNhLEtBQUc7Z0JBQUNOLFNBQVMsRUFBRVAsaUZBQVc7Z0JBQUdnQixJQUFJLEVBQUMsR0FBRzswQkFBQyw0RUFBQ2QsbURBQUs7b0JBQUNlLEdBQUcsRUFBRWhCLCtEQUFTO29CQUFFaUIsS0FBSyxFQUFFLEdBQUc7b0JBQUVDLE1BQU0sRUFBRSxHQUFHOzs7Ozt5QkFBSTs7Ozs7cUJBQU07WUFDOUZQLEtBQUssQ0FBQ1EsUUFBUSxDQUFDQyxHQUFHLENBQUNDLFNBQUFBLE9BQU8sRUFBSTtnQkFDM0IsMkRBQTJEO2dCQUMzRCxxQkFBTyw4REFBQ25CLGtEQUFJO29CQUFDb0IsT0FBTztvQkFBQ1AsSUFBSSxFQUFFTSxPQUFPLENBQUNFLEtBQUs7OEJBQUdGLE9BQU8sQ0FBQ0csV0FBVzs7Ozs7eUJBQVE7WUFDMUUsQ0FBQyxDQUFDO1lBQ0RyQixTQUFTLENBQUNRLEtBQUssQ0FBQ1AsVUFBVSxDQUFDO1lBQzNCSSxnQkFBZ0IsQ0FBQyxLQUFLLENBQUM7MEJBQ3hCLDhEQUFDSCxHQUFDO2dCQUFDQyxTQUFTLEVBQUVQLDBGQUFvQjswQkFBRSxPQUFLOzs7OztxQkFBSTswQkFDN0MsOERBQUNNLEdBQUM7Z0JBQUNDLFNBQVMsRUFBRVAsMEZBQW9COzBCQUFFLE9BQUs7Ozs7O3FCQUFJOzs7Ozs7YUFDM0MsQ0FDUjtBQUNOLENBQUM7QUFmS1csS0FBQUEsTUFBTTtBQWlCWiwrREFBZUEsTUFBTSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2NvbXBvbmVudHMvdW5pdmVyc2FsL05hdkJhci5qcz8wZTgzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdHlsZXMgZnJvbSAnLi4vLi4vc3R5bGVzL3VuaXZlcnNhbC9OYXZiYXIubW9kdWxlLmNzcyc7XG5pbXBvcnQgY2hpY2tmaWxhIGZyb20gJy4uLy4uL2Fzc2V0cy9uYXZiYXItbG9vZy5wbmcnO1xuaW1wb3J0IEltYWdlIGZyb20gJ25leHQvaW1hZ2UnO1xuXG5pbXBvcnQgTGluayBmcm9tICduZXh0L2xpbmsnO1xuXG5mdW5jdGlvbiBwbGFjZUNhcnQoaXNDdXN0b21lcikge1xuICAgIGlmIChpc0N1c3RvbWVyKVxuICAgICAgICByZXR1cm4gPGEgY2xhc3NOYW1lPXtzdHlsZXMuYWNjZXNzaWJpbGl0eX0+Q2FydCBsb2dvPC9hPlxufVxuXG5mdW5jdGlvbiBwbGFjZUxvZ2luQnV0dG9uKGlzTG9nZ2VkKSB7XG4gICAgaWYgKCFpc0xvZ2dlZClcbiAgICAgICAgcmV0dXJuIDxhIGNsYXNzTmFtZT17c3R5bGVzLmFjY2Vzc2liaWxpdHl9PkxvZ2luPC9hPlxufVxuXG5jb25zdCBOYXZCYXIgPSAocHJvcHMpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLnRvcG5hdn0+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMubG9nb30gIGhyZWY9XCIvXCI+PEltYWdlIHNyYz17Y2hpY2tmaWxhfSB3aWR0aD17MTcwfSBoZWlnaHQ9ezEwMH0gLz48L2Rpdj5cbiAgICAgICAgICAgIHtwcm9wcy5uYXZJdGVtcy5tYXAobmF2SXRlbSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gcmV0dXJuIDxhIGhyZWY9e25hdkl0ZW0ucm91dGV9PntuYXZJdGVtLm5hdkl0ZW1OYW1lfTwvYT5cbiAgICAgICAgICAgICAgICByZXR1cm4gPExpbmsgcmVwbGFjZSBocmVmPXtuYXZJdGVtLnJvdXRlfT57bmF2SXRlbS5uYXZJdGVtTmFtZX08L0xpbms+XG4gICAgICAgICAgICB9KX1cbiAgICAgICAgICAgIHtwbGFjZUNhcnQocHJvcHMuaXNDdXN0b21lcil9XG4gICAgICAgICAgICB7cGxhY2VMb2dpbkJ1dHRvbihmYWxzZSl9XG4gICAgICAgICAgICA8YSBjbGFzc05hbWU9e3N0eWxlcy5hY2Nlc3NpYmlsaXR5fT5Db2xvcjwvYT5cbiAgICAgICAgICAgIDxhIGNsYXNzTmFtZT17c3R5bGVzLmFjY2Vzc2liaWxpdHl9PlZvaWNlPC9hPlxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgTmF2QmFyOyJdLCJuYW1lcyI6WyJzdHlsZXMiLCJjaGlja2ZpbGEiLCJJbWFnZSIsIkxpbmsiLCJwbGFjZUNhcnQiLCJpc0N1c3RvbWVyIiwiYSIsImNsYXNzTmFtZSIsImFjY2Vzc2liaWxpdHkiLCJwbGFjZUxvZ2luQnV0dG9uIiwiaXNMb2dnZWQiLCJOYXZCYXIiLCJwcm9wcyIsImRpdiIsInRvcG5hdiIsImxvZ28iLCJocmVmIiwic3JjIiwid2lkdGgiLCJoZWlnaHQiLCJuYXZJdGVtcyIsIm1hcCIsIm5hdkl0ZW0iLCJyZXBsYWNlIiwicm91dGUiLCJuYXZJdGVtTmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/universal/NavBar.js\n"));

/***/ }),

/***/ "./components/universal/mapUI.js":
/*!***************************************!*\
  !*** ./components/universal/mapUI.js ***!
  \***************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _swc_helpers_src_sliced_to_array_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @swc/helpers/src/_sliced_to_array.mjs */ \"./node_modules/@swc/helpers/src/_sliced_to_array.mjs\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _react_google_maps_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @react-google-maps/api */ \"./node_modules/@react-google-maps/api/dist/esm.js\");\n\n\nvar _s = $RefreshSig$();\n\n\n\nvar containerStyle = {\n    width: \"40vw\",\n    height: \"100vh\"\n};\nvar center = {\n    lat: 30,\n    lng: -96\n};\nfunction MyMap() {\n    _s();\n    var isLoaded = (0,_react_google_maps_api__WEBPACK_IMPORTED_MODULE_2__.useJsApiLoader)({\n        id: \"google-map-script\",\n        googleMapsApiKey: \"AIzaSyChYzEyysaBL9fBcAFTxSCBCzyFmpkFfBY\"\n    }).isLoaded;\n    var ref = (0,_swc_helpers_src_sliced_to_array_mjs__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(react__WEBPACK_IMPORTED_MODULE_1___default().useState(null), 2), map = ref[0], setMap = ref[1];\n    var onLoad = react__WEBPACK_IMPORTED_MODULE_1___default().useCallback(function callback(map) {\n        // This is just an example of getting and using the map instance!!! don't just blindly copy!\n        var bounds = new window.google.maps.LatLngBounds(center);\n        map.fitBounds(bounds);\n        setMap(map);\n    }, []);\n    var onUnmount = react__WEBPACK_IMPORTED_MODULE_1___default().useCallback(function callback(map) {\n        setMap(null);\n    }, []);\n    return isLoaded ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_react_google_maps_api__WEBPACK_IMPORTED_MODULE_2__.GoogleMap, {\n        mapContainerStyle: containerStyle,\n        center: center,\n        zoom: 5,\n        onLoad: onLoad,\n        onUnmount: onUnmount,\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {}, void 0, false)\n    }, void 0, false, {\n        fileName: \"D:\\\\Fall 2022\\\\CSCE 315\\\\Project_3\\\\code\\\\Team34_Project_3\\\\pos_system\\\\components\\\\universal\\\\mapUI.js\",\n        lineNumber: 36,\n        columnNumber: 7\n    }, this) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {}, void 0, false);\n}\n_s(MyMap, \"sc/DS85Udqb0HC94DVNruSImuio=\", false, function() {\n    return [\n        _react_google_maps_api__WEBPACK_IMPORTED_MODULE_2__.useJsApiLoader\n    ];\n});\n_c = MyMap;\n/* harmony default export */ __webpack_exports__[\"default\"] = (/*#__PURE__*/_c1 = react__WEBPACK_IMPORTED_MODULE_1___default().memo(MyMap));\nvar _c, _c1;\n$RefreshReg$(_c, \"MyMap\");\n$RefreshReg$(_c1, \"%default%\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL3VuaXZlcnNhbC9tYXBVSS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7OztBQUF5QjtBQUMwQztBQUNOO0FBRTdELElBQU1JLGNBQWMsR0FBRztJQUNyQkMsS0FBSyxFQUFFLE1BQU07SUFDYkMsTUFBTSxFQUFFLE9BQU87Q0FDaEI7QUFFRCxJQUFNQyxNQUFNLEdBQUc7SUFDYkMsR0FBRyxFQUFFLEVBQUU7SUFDUEMsR0FBRyxFQUFFLENBQUMsRUFBRTtDQUNUO0FBRUQsU0FBU0MsS0FBSyxHQUFHOztJQUNmLElBQU0sUUFBVSxHQUFLUixzRUFBYyxDQUFDO1FBQ2xDVSxFQUFFLEVBQUUsbUJBQW1CO1FBQ3ZCQyxnQkFBZ0IsRUFBRSx5Q0FBeUM7S0FDNUQsQ0FBQyxDQUhNRixRQUFRO0lBS2hCLElBQXNCWCxHQUFvQixvRkFBcEJBLHFEQUFjLENBQUMsSUFBSSxDQUFDLE1BQW5DZSxHQUFHLEdBQVlmLEdBQW9CLEdBQWhDLEVBQUVnQixNQUFNLEdBQUloQixHQUFvQixHQUF4QjtJQUVsQixJQUFNaUIsTUFBTSxHQUFHakIsd0RBQWlCLENBQUMsU0FBU21CLFFBQVEsQ0FBQ0osR0FBRyxFQUFFO1FBQ3RELDRGQUE0RjtRQUM1RixJQUFNSyxNQUFNLEdBQUcsSUFBSUMsTUFBTSxDQUFDQyxNQUFNLENBQUNDLElBQUksQ0FBQ0MsWUFBWSxDQUFDakIsTUFBTSxDQUFDO1FBQzFEUSxHQUFHLENBQUNVLFNBQVMsQ0FBQ0wsTUFBTSxDQUFDLENBQUM7UUFFdEJKLE1BQU0sQ0FBQ0QsR0FBRyxDQUFDO0lBQ2IsQ0FBQyxFQUFFLEVBQUUsQ0FBQztJQUVOLElBQU1XLFNBQVMsR0FBRzFCLHdEQUFpQixDQUFDLFNBQVNtQixRQUFRLENBQUNKLEdBQUcsRUFBRTtRQUN6REMsTUFBTSxDQUFDLElBQUksQ0FBQztJQUNkLENBQUMsRUFBRSxFQUFFLENBQUM7SUFFTixPQUFPTCxRQUFRLGlCQUNYLDhEQUFDViw2REFBUztRQUNSMEIsaUJBQWlCLEVBQUV2QixjQUFjO1FBQ2pDRyxNQUFNLEVBQUVBLE1BQU07UUFDZHFCLElBQUksRUFBRSxDQUFDO1FBQ1BYLE1BQU0sRUFBRUEsTUFBTTtRQUNkUyxTQUFTLEVBQUVBLFNBQVM7a0JBR3BCLDJKQUFLOzs7OztZQUNLLGlCQUNaLDZJQUFLO0FBQ1gsQ0FBQztHQWhDUWhCLEtBQUs7O1FBQ1NSLGtFQUFjOzs7QUFENUJRLEtBQUFBLEtBQUs7QUFrQ2QsNEVBQWVWLE1BQUFBLGlEQUFVLENBQUNVLEtBQUssQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9jb21wb25lbnRzL3VuaXZlcnNhbC9tYXBVSS5qcz9hOTE5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IEdvb2dsZU1hcCwgdXNlSnNBcGlMb2FkZXIgfSBmcm9tICdAcmVhY3QtZ29vZ2xlLW1hcHMvYXBpJztcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi4vLi4vc3R5bGVzL3VuaXZlcnNhbC9NYXBVSS5tb2R1bGUuY3NzJztcblxuY29uc3QgY29udGFpbmVyU3R5bGUgPSB7XG4gIHdpZHRoOiAnNDB2dycsXG4gIGhlaWdodDogJzEwMHZoJ1xufTtcblxuY29uc3QgY2VudGVyID0ge1xuICBsYXQ6IDMwLFxuICBsbmc6IC05NlxufTtcblxuZnVuY3Rpb24gTXlNYXAoKSB7XG4gIGNvbnN0IHsgaXNMb2FkZWQgfSA9IHVzZUpzQXBpTG9hZGVyKHtcbiAgICBpZDogJ2dvb2dsZS1tYXAtc2NyaXB0JyxcbiAgICBnb29nbGVNYXBzQXBpS2V5OiAnQUl6YVN5Q2hZekV5eXNhQkw5ZkJjQUZUeFNDQkN6eUZtcGtGZkJZJ1xuICB9KVxuXG4gIGNvbnN0IFttYXAsIHNldE1hcF0gPSBSZWFjdC51c2VTdGF0ZShudWxsKVxuXG4gIGNvbnN0IG9uTG9hZCA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIGNhbGxiYWNrKG1hcCkge1xuICAgIC8vIFRoaXMgaXMganVzdCBhbiBleGFtcGxlIG9mIGdldHRpbmcgYW5kIHVzaW5nIHRoZSBtYXAgaW5zdGFuY2UhISEgZG9uJ3QganVzdCBibGluZGx5IGNvcHkhXG4gICAgY29uc3QgYm91bmRzID0gbmV3IHdpbmRvdy5nb29nbGUubWFwcy5MYXRMbmdCb3VuZHMoY2VudGVyKTtcbiAgICBtYXAuZml0Qm91bmRzKGJvdW5kcyk7XG5cbiAgICBzZXRNYXAobWFwKVxuICB9LCBbXSlcblxuICBjb25zdCBvblVubW91bnQgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiBjYWxsYmFjayhtYXApIHtcbiAgICBzZXRNYXAobnVsbClcbiAgfSwgW10pXG5cbiAgcmV0dXJuIGlzTG9hZGVkID8gKFxuICAgICAgPEdvb2dsZU1hcFxuICAgICAgICBtYXBDb250YWluZXJTdHlsZT17Y29udGFpbmVyU3R5bGV9XG4gICAgICAgIGNlbnRlcj17Y2VudGVyfVxuICAgICAgICB6b29tPXs1fVxuICAgICAgICBvbkxvYWQ9e29uTG9hZH1cbiAgICAgICAgb25Vbm1vdW50PXtvblVubW91bnR9XG4gICAgICA+XG4gICAgICAgIHsgLyogQ2hpbGQgY29tcG9uZW50cywgc3VjaCBhcyBtYXJrZXJzLCBpbmZvIHdpbmRvd3MsIGV0Yy4gKi8gfVxuICAgICAgICA8PjwvPlxuICAgICAgPC9Hb29nbGVNYXA+XG4gICkgOiA8PjwvPlxufVxuXG5leHBvcnQgZGVmYXVsdCBSZWFjdC5tZW1vKE15TWFwKSJdLCJuYW1lcyI6WyJSZWFjdCIsIkdvb2dsZU1hcCIsInVzZUpzQXBpTG9hZGVyIiwic3R5bGVzIiwiY29udGFpbmVyU3R5bGUiLCJ3aWR0aCIsImhlaWdodCIsImNlbnRlciIsImxhdCIsImxuZyIsIk15TWFwIiwiaXNMb2FkZWQiLCJpZCIsImdvb2dsZU1hcHNBcGlLZXkiLCJ1c2VTdGF0ZSIsIm1hcCIsInNldE1hcCIsIm9uTG9hZCIsInVzZUNhbGxiYWNrIiwiY2FsbGJhY2siLCJib3VuZHMiLCJ3aW5kb3ciLCJnb29nbGUiLCJtYXBzIiwiTGF0TG5nQm91bmRzIiwiZml0Qm91bmRzIiwib25Vbm1vdW50IiwibWFwQ29udGFpbmVyU3R5bGUiLCJ6b29tIiwibWVtbyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/universal/mapUI.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/client/get-domain-locale.js":
/*!************************************************************!*\
  !*** ./node_modules/next/dist/client/get-domain-locale.js ***!
  \************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getDomainLocale = getDomainLocale;\nvar basePath =  false || \"\";\nfunction getDomainLocale(path, locale, locales, domainLocales) {\n    if (false) { var finalLocale, proto, domain, target, detectDomainLocale, normalizeLocalePath; } else {\n        return false;\n    }\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=get-domain-locale.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9nZXQtZG9tYWluLWxvY2FsZS5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLEtBQUssRUFBRSxJQUFJO0NBQ2QsRUFBQyxDQUFDO0FBQ0hELHVCQUF1QixHQUFHRSxlQUFlLENBQUM7QUFDMUMsSUFBTUMsUUFBUSxHQUFHQyxNQUFrQyxJQUFJLEVBQUU7QUFDekQsU0FBU0YsZUFBZSxDQUFDSyxJQUFJLEVBQUVDLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxhQUFhLEVBQUU7SUFDM0QsSUFBSU4sS0FBK0IsRUFBRSxvRkFXcEMsTUFBTTtRQUNILE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7QUFDTCxDQUFDO0FBRUQsSUFBSSxDQUFDLE9BQU9KLE9BQU8sQ0FBQ3VCLE9BQU8sS0FBSyxVQUFVLElBQUssT0FBT3ZCLE9BQU8sQ0FBQ3VCLE9BQU8sS0FBSyxRQUFRLElBQUl2QixPQUFPLENBQUN1QixPQUFPLEtBQUssSUFBSSxDQUFDLElBQUssT0FBT3ZCLE9BQU8sQ0FBQ3VCLE9BQU8sQ0FBQ0MsVUFBVSxLQUFLLFdBQVcsRUFBRTtJQUNySzFCLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLENBQUN1QixPQUFPLEVBQUUsWUFBWSxFQUFFO1FBQUV0QixLQUFLLEVBQUUsSUFBSTtLQUFFLENBQUMsQ0FBQztJQUN0RUgsTUFBTSxDQUFDMkIsTUFBTSxDQUFDekIsT0FBTyxDQUFDdUIsT0FBTyxFQUFFdkIsT0FBTyxDQUFDLENBQUM7SUFDeEMwQixNQUFNLENBQUMxQixPQUFPLEdBQUdBLE9BQU8sQ0FBQ3VCLE9BQU8sQ0FBQztBQUNuQyxDQUFDLENBRUQsNkNBQTZDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L2dldC1kb21haW4tbG9jYWxlLmpzPzVjMjciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmdldERvbWFpbkxvY2FsZSA9IGdldERvbWFpbkxvY2FsZTtcbmNvbnN0IGJhc2VQYXRoID0gcHJvY2Vzcy5lbnYuX19ORVhUX1JPVVRFUl9CQVNFUEFUSCB8fCAnJztcbmZ1bmN0aW9uIGdldERvbWFpbkxvY2FsZShwYXRoLCBsb2NhbGUsIGxvY2FsZXMsIGRvbWFpbkxvY2FsZXMpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuX19ORVhUX0kxOE5fU1VQUE9SVCkge1xuICAgICAgICBjb25zdCBub3JtYWxpemVMb2NhbGVQYXRoID0gcmVxdWlyZSgnLi9ub3JtYWxpemUtbG9jYWxlLXBhdGgnKS5ub3JtYWxpemVMb2NhbGVQYXRoO1xuICAgICAgICBjb25zdCBkZXRlY3REb21haW5Mb2NhbGUgPSByZXF1aXJlKCcuL2RldGVjdC1kb21haW4tbG9jYWxlJykuZGV0ZWN0RG9tYWluTG9jYWxlO1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBsb2NhbGUgfHwgbm9ybWFsaXplTG9jYWxlUGF0aChwYXRoLCBsb2NhbGVzKS5kZXRlY3RlZExvY2FsZTtcbiAgICAgICAgY29uc3QgZG9tYWluID0gZGV0ZWN0RG9tYWluTG9jYWxlKGRvbWFpbkxvY2FsZXMsIHVuZGVmaW5lZCwgdGFyZ2V0KTtcbiAgICAgICAgaWYgKGRvbWFpbikge1xuICAgICAgICAgICAgY29uc3QgcHJvdG8gPSBgaHR0cCR7ZG9tYWluLmh0dHAgPyAnJyA6ICdzJ306Ly9gO1xuICAgICAgICAgICAgY29uc3QgZmluYWxMb2NhbGUgPSB0YXJnZXQgPT09IGRvbWFpbi5kZWZhdWx0TG9jYWxlID8gJycgOiBgLyR7dGFyZ2V0fWA7XG4gICAgICAgICAgICByZXR1cm4gYCR7cHJvdG99JHtkb21haW4uZG9tYWlufSR7YmFzZVBhdGh9JHtmaW5hbExvY2FsZX0ke3BhdGh9YDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cblxuaWYgKCh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBleHBvcnRzLmRlZmF1bHQgIT09IG51bGwpKSAmJiB0eXBlb2YgZXhwb3J0cy5kZWZhdWx0Ll9fZXNNb2R1bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLmRlZmF1bHQsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgT2JqZWN0LmFzc2lnbihleHBvcnRzLmRlZmF1bHQsIGV4cG9ydHMpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0LWRvbWFpbi1sb2NhbGUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZ2V0RG9tYWluTG9jYWxlIiwiYmFzZVBhdGgiLCJwcm9jZXNzIiwiZW52IiwiX19ORVhUX1JPVVRFUl9CQVNFUEFUSCIsInBhdGgiLCJsb2NhbGUiLCJsb2NhbGVzIiwiZG9tYWluTG9jYWxlcyIsIl9fTkVYVF9JMThOX1NVUFBPUlQiLCJub3JtYWxpemVMb2NhbGVQYXRoIiwicmVxdWlyZSIsImRldGVjdERvbWFpbkxvY2FsZSIsInRhcmdldCIsImRldGVjdGVkTG9jYWxlIiwiZG9tYWluIiwidW5kZWZpbmVkIiwicHJvdG8iLCJodHRwIiwiZmluYWxMb2NhbGUiLCJkZWZhdWx0TG9jYWxlIiwiZGVmYXVsdCIsIl9fZXNNb2R1bGUiLCJhc3NpZ24iLCJtb2R1bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/get-domain-locale.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/client/link.js":
/*!***********************************************!*\
  !*** ./node_modules/next/dist/client/link.js ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar _slicedToArray = (__webpack_require__(/*! @swc/helpers/lib/_sliced_to_array.js */ \"./node_modules/@swc/helpers/lib/_sliced_to_array.js\")[\"default\"]);\nvar _typeOf = (__webpack_require__(/*! @swc/helpers/lib/_type_of.js */ \"./node_modules/@swc/helpers/lib/_type_of.js\")[\"default\"]);\nvar _s = $RefreshSig$();\n\"client\";\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _interop_require_default = (__webpack_require__(/*! @swc/helpers/lib/_interop_require_default.js */ \"./node_modules/@swc/helpers/lib/_interop_require_default.js\")[\"default\"]);\nvar _object_without_properties_loose = (__webpack_require__(/*! @swc/helpers/lib/_object_without_properties_loose.js */ \"./node_modules/@swc/helpers/lib/_object_without_properties_loose.js\")[\"default\"]);\nvar _react = _interop_require_default(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));\nvar _router = __webpack_require__(/*! ../shared/lib/router/router */ \"./node_modules/next/dist/shared/lib/router/router.js\");\nvar _addLocale = __webpack_require__(/*! ./add-locale */ \"./node_modules/next/dist/client/add-locale.js\");\nvar _routerContext = __webpack_require__(/*! ../shared/lib/router-context */ \"./node_modules/next/dist/shared/lib/router-context.js\");\nvar _appRouterContext = __webpack_require__(/*! ../shared/lib/app-router-context */ \"./node_modules/next/dist/shared/lib/app-router-context.js\");\nvar _useIntersection = __webpack_require__(/*! ./use-intersection */ \"./node_modules/next/dist/client/use-intersection.js\");\nvar _getDomainLocale = __webpack_require__(/*! ./get-domain-locale */ \"./node_modules/next/dist/client/get-domain-locale.js\");\nvar _addBasePath = __webpack_require__(/*! ./add-base-path */ \"./node_modules/next/dist/client/add-base-path.js\");\n\"client\";\nvar prefetched = {};\nfunction prefetch(router, href, as, options) {\n    if ( false || !router) return;\n    if (!(0, _router).isLocalURL(href)) return;\n    // Prefetch the JSON page if asked (only in the client)\n    // We need to handle a prefetch error here since we may be\n    // loading with priority which can reject but we don't\n    // want to force navigation since this is only a prefetch\n    Promise.resolve(router.prefetch(href, as, options)).catch(function(err) {\n        if (true) {\n            // rethrow to show invalid URL errors\n            throw err;\n        }\n    });\n    var curLocale = options && typeof options.locale !== \"undefined\" ? options.locale : router && router.locale;\n    // Join on an invalid URI character\n    prefetched[href + \"%\" + as + (curLocale ? \"%\" + curLocale : \"\")] = true;\n}\nfunction isModifiedEvent(event) {\n    var target = event.currentTarget.target;\n    return target && target !== \"_self\" || event.metaKey || event.ctrlKey || event.shiftKey || event.altKey || event.nativeEvent && event.nativeEvent.which === 2;\n}\nfunction linkClicked(e, router, href, as, replace, shallow, scroll, locale, isAppRouter, prefetchEnabled) {\n    var nodeName = e.currentTarget.nodeName;\n    // anchors inside an svg have a lowercase nodeName\n    var isAnchorNodeName = nodeName.toUpperCase() === \"A\";\n    if (isAnchorNodeName && (isModifiedEvent(e) || !(0, _router).isLocalURL(href))) {\n        // ignore click for browser’s default behavior\n        return;\n    }\n    e.preventDefault();\n    var navigate = function() {\n        // If the router is an NextRouter instance it will have `beforePopState`\n        if (\"beforePopState\" in router) {\n            router[replace ? \"replace\" : \"push\"](href, as, {\n                shallow: shallow,\n                locale: locale,\n                scroll: scroll\n            });\n        } else {\n            // If `beforePopState` doesn't exist on the router it's the AppRouter.\n            var method = replace ? \"replace\" : \"push\";\n            router[method](href, {\n                forceOptimisticNavigation: !prefetchEnabled\n            });\n        }\n    };\n    if (isAppRouter) {\n        // @ts-expect-error startTransition exists.\n        _react.default.startTransition(navigate);\n    } else {\n        navigate();\n    }\n}\nvar Link = /*#__PURE__*/ _s(_react.default.forwardRef(_c = _s(function LinkComponent(props, forwardedRef) {\n    _s();\n    if (true) {\n        var createPropError = function createPropError(args) {\n            return new Error(\"Failed prop type: The prop `\".concat(args.key, \"` expects a \").concat(args.expected, \" in `<Link>`, but got `\").concat(args.actual, \"` instead.\") + ( true ? \"\\nOpen your browser's console to view the Component stack trace.\" : 0));\n        };\n        // TypeScript trick for type-guarding:\n        var requiredPropsGuard = {\n            href: true\n        };\n        var requiredProps = Object.keys(requiredPropsGuard);\n        requiredProps.forEach(function(key) {\n            if (key === \"href\") {\n                if (props[key] == null || typeof props[key] !== \"string\" && typeof props[key] !== \"object\") {\n                    throw createPropError({\n                        key: key,\n                        expected: \"`string` or `object`\",\n                        actual: props[key] === null ? \"null\" : _typeOf(props[key])\n                    });\n                }\n            } else {\n                // TypeScript trick for type-guarding:\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                var _ = key;\n            }\n        });\n        // TypeScript trick for type-guarding:\n        var optionalPropsGuard = {\n            as: true,\n            replace: true,\n            scroll: true,\n            shallow: true,\n            passHref: true,\n            prefetch: true,\n            locale: true,\n            onClick: true,\n            onMouseEnter: true,\n            onTouchStart: true,\n            legacyBehavior: true\n        };\n        var optionalProps = Object.keys(optionalPropsGuard);\n        optionalProps.forEach(function(key) {\n            var valType = _typeOf(props[key]);\n            if (key === \"as\") {\n                if (props[key] && valType !== \"string\" && valType !== \"object\") {\n                    throw createPropError({\n                        key: key,\n                        expected: \"`string` or `object`\",\n                        actual: valType\n                    });\n                }\n            } else if (key === \"locale\") {\n                if (props[key] && valType !== \"string\") {\n                    throw createPropError({\n                        key: key,\n                        expected: \"`string`\",\n                        actual: valType\n                    });\n                }\n            } else if (key === \"onClick\" || key === \"onMouseEnter\" || key === \"onTouchStart\") {\n                if (props[key] && valType !== \"function\") {\n                    throw createPropError({\n                        key: key,\n                        expected: \"`function`\",\n                        actual: valType\n                    });\n                }\n            } else if (key === \"replace\" || key === \"scroll\" || key === \"shallow\" || key === \"passHref\" || key === \"prefetch\" || key === \"legacyBehavior\") {\n                if (props[key] != null && valType !== \"boolean\") {\n                    throw createPropError({\n                        key: key,\n                        expected: \"`boolean`\",\n                        actual: valType\n                    });\n                }\n            } else {\n                // TypeScript trick for type-guarding:\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                var _ = key;\n            }\n        });\n        // This hook is in a conditional but that is ok because `process.env.NODE_ENV` never changes\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        var hasWarned = _react.default.useRef(false);\n        if (props.prefetch && !hasWarned.current) {\n            hasWarned.current = true;\n            console.warn(\"Next.js auto-prefetches automatically based on viewport. The prefetch attribute is no longer needed. More: https://nextjs.org/docs/messages/prefetch-true-deprecated\");\n        }\n    }\n    var children;\n    var hrefProp = props.href, asProp = props.as, childrenProp = props.children, prefetchProp = props.prefetch, passHref = props.passHref, replace = props.replace, shallow = props.shallow, scroll = props.scroll, locale = props.locale, onClick = props.onClick, onMouseEnter = props.onMouseEnter, onTouchStart = props.onTouchStart, _legacyBehavior = props.legacyBehavior, legacyBehavior = _legacyBehavior === void 0 ? Boolean(false) !== true : _legacyBehavior, restProps = _object_without_properties_loose(props, [\n        \"href\",\n        \"as\",\n        \"children\",\n        \"prefetch\",\n        \"passHref\",\n        \"replace\",\n        \"shallow\",\n        \"scroll\",\n        \"locale\",\n        \"onClick\",\n        \"onMouseEnter\",\n        \"onTouchStart\",\n        \"legacyBehavior\"\n    ]);\n    children = childrenProp;\n    if (legacyBehavior && (typeof children === \"string\" || typeof children === \"number\")) {\n        children = /*#__PURE__*/ _react.default.createElement(\"a\", null, children);\n    }\n    var p = prefetchProp !== false;\n    var router = _react.default.useContext(_routerContext.RouterContext);\n    // TODO-APP: type error. Remove `as any`\n    var appRouter = _react.default.useContext(_appRouterContext.AppRouterContext);\n    if (appRouter) {\n        router = appRouter;\n    }\n    var ref = _react.default.useMemo(function() {\n        var ref = _slicedToArray((0, _router).resolveHref(router, hrefProp, true), 2), resolvedHref = ref[0], resolvedAs = ref[1];\n        return {\n            href: resolvedHref,\n            as: asProp ? (0, _router).resolveHref(router, asProp) : resolvedAs || resolvedHref\n        };\n    }, [\n        router,\n        hrefProp,\n        asProp\n    ]), href = ref.href, as = ref.as;\n    var previousHref = _react.default.useRef(href);\n    var previousAs = _react.default.useRef(as);\n    // This will return the first child, if multiple are provided it will throw an error\n    var child;\n    if (legacyBehavior) {\n        if (true) {\n            if (onClick) {\n                console.warn('\"onClick\" was passed to <Link> with `href` of `'.concat(hrefProp, '` but \"legacyBehavior\" was set. The legacy behavior requires onClick be set on the child of next/link'));\n            }\n            if (onMouseEnter) {\n                console.warn('\"onMouseEnter\" was passed to <Link> with `href` of `'.concat(hrefProp, '` but \"legacyBehavior\" was set. The legacy behavior requires onMouseEnter be set on the child of next/link'));\n            }\n            try {\n                child = _react.default.Children.only(children);\n            } catch (err) {\n                if (!children) {\n                    throw new Error(\"No children were passed to <Link> with `href` of `\".concat(hrefProp, \"` but one child is required https://nextjs.org/docs/messages/link-no-children\"));\n                }\n                throw new Error(\"Multiple children were passed to <Link> with `href` of `\".concat(hrefProp, \"` but only one child is supported https://nextjs.org/docs/messages/link-multiple-children\") + ( true ? \" \\nOpen your browser's console to view the Component stack trace.\" : 0));\n            }\n        } else {}\n    }\n    var childRef = legacyBehavior ? child && typeof child === \"object\" && child.ref : forwardedRef;\n    var ref1 = _slicedToArray((0, _useIntersection).useIntersection({\n        rootMargin: \"200px\"\n    }), 3), setIntersectionRef = ref1[0], isVisible = ref1[1], resetVisible = ref1[2];\n    var setRef = _react.default.useCallback(function(el) {\n        // Before the link getting observed, check if visible state need to be reset\n        if (previousAs.current !== as || previousHref.current !== href) {\n            resetVisible();\n            previousAs.current = as;\n            previousHref.current = href;\n        }\n        setIntersectionRef(el);\n        if (childRef) {\n            if (typeof childRef === \"function\") childRef(el);\n            else if (typeof childRef === \"object\") {\n                childRef.current = el;\n            }\n        }\n    }, [\n        as,\n        childRef,\n        href,\n        resetVisible,\n        setIntersectionRef\n    ]);\n    _react.default.useEffect(function() {\n        var shouldPrefetch = isVisible && p && (0, _router).isLocalURL(href);\n        var curLocale = typeof locale !== \"undefined\" ? locale : router && router.locale;\n        var isPrefetched = prefetched[href + \"%\" + as + (curLocale ? \"%\" + curLocale : \"\")];\n        if (shouldPrefetch && !isPrefetched) {\n            prefetch(router, href, as, {\n                locale: curLocale\n            });\n        }\n    }, [\n        as,\n        href,\n        isVisible,\n        locale,\n        p,\n        router\n    ]);\n    var childProps = {\n        ref: setRef,\n        onClick: function(e) {\n            if (true) {\n                if (!e) {\n                    throw new Error('Component rendered inside next/link has to pass click event to \"onClick\" prop.');\n                }\n            }\n            if (!legacyBehavior && typeof onClick === \"function\") {\n                onClick(e);\n            }\n            if (legacyBehavior && child.props && typeof child.props.onClick === \"function\") {\n                child.props.onClick(e);\n            }\n            if (!e.defaultPrevented) {\n                linkClicked(e, router, href, as, replace, shallow, scroll, locale, Boolean(appRouter), p);\n            }\n        },\n        onMouseEnter: function(e) {\n            if (!legacyBehavior && typeof onMouseEnter === \"function\") {\n                onMouseEnter(e);\n            }\n            if (legacyBehavior && child.props && typeof child.props.onMouseEnter === \"function\") {\n                child.props.onMouseEnter(e);\n            }\n            // Check for not prefetch disabled in page using appRouter\n            if (!(!p && appRouter)) {\n                if ((0, _router).isLocalURL(href)) {\n                    prefetch(router, href, as, {\n                        priority: true\n                    });\n                }\n            }\n        },\n        onTouchStart: function(e) {\n            if (!legacyBehavior && typeof onTouchStart === \"function\") {\n                onTouchStart(e);\n            }\n            if (legacyBehavior && child.props && typeof child.props.onTouchStart === \"function\") {\n                child.props.onTouchStart(e);\n            }\n            // Check for not prefetch disabled in page using appRouter\n            if (!(!p && appRouter)) {\n                if ((0, _router).isLocalURL(href)) {\n                    prefetch(router, href, as, {\n                        priority: true\n                    });\n                }\n            }\n        }\n    };\n    // If child is an <a> tag and doesn't have a href attribute, or if the 'passHref' property is\n    // defined, we specify the current 'href', so that repetition is not needed by the user\n    if (!legacyBehavior || passHref || child.type === \"a\" && !(\"href\" in child.props)) {\n        var curLocale = typeof locale !== \"undefined\" ? locale : router && router.locale;\n        // we only render domain locales if we are currently on a domain locale\n        // so that locale links are still visitable in development/preview envs\n        var localeDomain = router && router.isLocaleDomain && (0, _getDomainLocale).getDomainLocale(as, curLocale, router.locales, router.domainLocales);\n        childProps.href = localeDomain || (0, _addBasePath).addBasePath((0, _addLocale).addLocale(as, curLocale, router && router.defaultLocale));\n    }\n    return legacyBehavior ? /*#__PURE__*/ _react.default.cloneElement(child, childProps) : /*#__PURE__*/ _react.default.createElement(\"a\", Object.assign({}, restProps, childProps), children);\n}, \"xuB00qEWT1T+jc4Svm2qUBtJuIg=\")), \"xuB00qEWT1T+jc4Svm2qUBtJuIg=\");\n_c1 = Link;\nvar _default = Link;\nexports[\"default\"] = _default;\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=link.js.map\nvar _c, _c1;\n$RefreshReg$(_c, \"Link$_react.default.forwardRef\");\n$RefreshReg$(_c1, \"Link\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/link.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/shared/lib/app-router-context.js":
/*!*****************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/app-router-context.js ***!
  \*****************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.TemplateContext = exports.GlobalLayoutRouterContext = exports.LayoutRouterContext = exports.AppRouterContext = void 0;\nvar _interop_require_default = (__webpack_require__(/*! @swc/helpers/lib/_interop_require_default.js */ \"./node_modules/@swc/helpers/lib/_interop_require_default.js\")[\"default\"]);\nvar _react = _interop_require_default(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));\nvar AppRouterContext = _react.default.createContext(null);\nexports.AppRouterContext = AppRouterContext;\nvar LayoutRouterContext = _react.default.createContext(null);\nexports.LayoutRouterContext = LayoutRouterContext;\nvar GlobalLayoutRouterContext = _react.default.createContext(null);\nexports.GlobalLayoutRouterContext = GlobalLayoutRouterContext;\nvar TemplateContext = _react.default.createContext(null);\nexports.TemplateContext = TemplateContext;\nif (true) {\n    AppRouterContext.displayName = \"AppRouterContext\";\n    LayoutRouterContext.displayName = \"LayoutRouterContext\";\n    GlobalLayoutRouterContext.displayName = \"GlobalLayoutRouterContext\";\n    TemplateContext.displayName = \"TemplateContext\";\n} //# sourceMappingURL=app-router-context.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvYXBwLXJvdXRlci1jb250ZXh0LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csS0FBSyxFQUFFLElBQUk7Q0FDZCxFQUFDLENBQUM7QUFDSEQsdUJBQXVCLEdBQUdBLGlDQUFpQyxHQUFHQSwyQkFBMkIsR0FBR0Esd0JBQXdCLEdBQUcsS0FBSyxDQUFDLENBQUM7QUFDOUgsSUFBSU0sd0JBQXdCLEdBQUdDLG1KQUErRDtBQUM5RixJQUFJRSxNQUFNLEdBQUdILHdCQUF3QixDQUFDQyxtQkFBTyxDQUFDLDRDQUFPLENBQUMsQ0FBQztBQUN2RCxJQUFNRixnQkFBZ0IsR0FBR0ksTUFBTSxDQUFDRCxPQUFPLENBQUNFLGFBQWEsQ0FBQyxJQUFJLENBQUM7QUFDM0RWLHdCQUF3QixHQUFHSyxnQkFBZ0IsQ0FBQztBQUM1QyxJQUFNRCxtQkFBbUIsR0FBR0ssTUFBTSxDQUFDRCxPQUFPLENBQUNFLGFBQWEsQ0FBQyxJQUFJLENBQUM7QUFDOURWLDJCQUEyQixHQUFHSSxtQkFBbUIsQ0FBQztBQUNsRCxJQUFNRCx5QkFBeUIsR0FBR00sTUFBTSxDQUFDRCxPQUFPLENBQUNFLGFBQWEsQ0FBQyxJQUFJLENBQUM7QUFDcEVWLGlDQUFpQyxHQUFHRyx5QkFBeUIsQ0FBQztBQUM5RCxJQUFNRCxlQUFlLEdBQUdPLE1BQU0sQ0FBQ0QsT0FBTyxDQUFDRSxhQUFhLENBQUMsSUFBSSxDQUFDO0FBQzFEVix1QkFBdUIsR0FBR0UsZUFBZSxDQUFDO0FBQzFDLElBQUlTLElBQXFDLEVBQUU7SUFDdkNOLGdCQUFnQixDQUFDTyxXQUFXLEdBQUcsa0JBQWtCLENBQUM7SUFDbERSLG1CQUFtQixDQUFDUSxXQUFXLEdBQUcscUJBQXFCLENBQUM7SUFDeERULHlCQUF5QixDQUFDUyxXQUFXLEdBQUcsMkJBQTJCLENBQUM7SUFDcEVWLGVBQWUsQ0FBQ1UsV0FBVyxHQUFHLGlCQUFpQixDQUFDO0FBQ3BELENBQUMsQ0FFRCw4Q0FBOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL2FwcC1yb3V0ZXItY29udGV4dC5qcz9kYmRhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5UZW1wbGF0ZUNvbnRleHQgPSBleHBvcnRzLkdsb2JhbExheW91dFJvdXRlckNvbnRleHQgPSBleHBvcnRzLkxheW91dFJvdXRlckNvbnRleHQgPSBleHBvcnRzLkFwcFJvdXRlckNvbnRleHQgPSB2b2lkIDA7XG52YXIgX2ludGVyb3BfcmVxdWlyZV9kZWZhdWx0ID0gcmVxdWlyZShcIkBzd2MvaGVscGVycy9saWIvX2ludGVyb3BfcmVxdWlyZV9kZWZhdWx0LmpzXCIpLmRlZmF1bHQ7XG52YXIgX3JlYWN0ID0gX2ludGVyb3BfcmVxdWlyZV9kZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5jb25zdCBBcHBSb3V0ZXJDb250ZXh0ID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlQ29udGV4dChudWxsKTtcbmV4cG9ydHMuQXBwUm91dGVyQ29udGV4dCA9IEFwcFJvdXRlckNvbnRleHQ7XG5jb25zdCBMYXlvdXRSb3V0ZXJDb250ZXh0ID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlQ29udGV4dChudWxsKTtcbmV4cG9ydHMuTGF5b3V0Um91dGVyQ29udGV4dCA9IExheW91dFJvdXRlckNvbnRleHQ7XG5jb25zdCBHbG9iYWxMYXlvdXRSb3V0ZXJDb250ZXh0ID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlQ29udGV4dChudWxsKTtcbmV4cG9ydHMuR2xvYmFsTGF5b3V0Um91dGVyQ29udGV4dCA9IEdsb2JhbExheW91dFJvdXRlckNvbnRleHQ7XG5jb25zdCBUZW1wbGF0ZUNvbnRleHQgPSBfcmVhY3QuZGVmYXVsdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuZXhwb3J0cy5UZW1wbGF0ZUNvbnRleHQgPSBUZW1wbGF0ZUNvbnRleHQ7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIEFwcFJvdXRlckNvbnRleHQuZGlzcGxheU5hbWUgPSAnQXBwUm91dGVyQ29udGV4dCc7XG4gICAgTGF5b3V0Um91dGVyQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdMYXlvdXRSb3V0ZXJDb250ZXh0JztcbiAgICBHbG9iYWxMYXlvdXRSb3V0ZXJDb250ZXh0LmRpc3BsYXlOYW1lID0gJ0dsb2JhbExheW91dFJvdXRlckNvbnRleHQnO1xuICAgIFRlbXBsYXRlQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdUZW1wbGF0ZUNvbnRleHQnO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGVyLWNvbnRleHQuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiVGVtcGxhdGVDb250ZXh0IiwiR2xvYmFsTGF5b3V0Um91dGVyQ29udGV4dCIsIkxheW91dFJvdXRlckNvbnRleHQiLCJBcHBSb3V0ZXJDb250ZXh0IiwiX2ludGVyb3BfcmVxdWlyZV9kZWZhdWx0IiwicmVxdWlyZSIsImRlZmF1bHQiLCJfcmVhY3QiLCJjcmVhdGVDb250ZXh0IiwicHJvY2VzcyIsImRpc3BsYXlOYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/shared/lib/app-router-context.js\n"));

/***/ }),

/***/ "./pages/find/index.js":
/*!*****************************!*\
  !*** ./pages/find/index.js ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ FindPage; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/head */ \"./node_modules/next/head.js\");\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_head__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_image__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/image */ \"./node_modules/next/image.js\");\n/* harmony import */ var next_image__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_image__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _components_universal_NavBar__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../components/universal/NavBar */ \"./components/universal/NavBar.js\");\n/* harmony import */ var _components_universal_mapUI__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../components/universal/mapUI */ \"./components/universal/mapUI.js\");\n\n\n\n\n\nvar navItems = [\n    {\n        navItemName: \"Home\",\n        route: \"/\"\n    },\n    {\n        navItemName: \"Menu\",\n        route: \"/menu\"\n    },\n    {\n        navItemName: \"Find\",\n        route: \"/find\"\n    }\n];\nfunction FindPage() {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_universal_NavBar__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                navItems: navItems,\n                isCustomer: false\n            }, void 0, false, {\n                fileName: \"D:\\\\Fall 2022\\\\CSCE 315\\\\Project_3\\\\code\\\\Team34_Project_3\\\\pos_system\\\\pages\\\\find\\\\index.js\",\n                lineNumber: 15,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {\n                children: \"Find Nearest Location\"\n            }, void 0, false, {\n                fileName: \"D:\\\\Fall 2022\\\\CSCE 315\\\\Project_3\\\\code\\\\Team34_Project_3\\\\pos_system\\\\pages\\\\find\\\\index.js\",\n                lineNumber: 16,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_universal_mapUI__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {}, void 0, false, {\n                fileName: \"D:\\\\Fall 2022\\\\CSCE 315\\\\Project_3\\\\code\\\\Team34_Project_3\\\\pos_system\\\\pages\\\\find\\\\index.js\",\n                lineNumber: 17,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"D:\\\\Fall 2022\\\\CSCE 315\\\\Project_3\\\\code\\\\Team34_Project_3\\\\pos_system\\\\pages\\\\find\\\\index.js\",\n        lineNumber: 14,\n        columnNumber: 5\n    }, this);\n}\n_c = FindPage;\nvar _c;\n$RefreshReg$(_c, \"FindPage\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWdlcy9maW5kL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBO0FBQTRCO0FBQ0U7QUFDd0I7QUFDSjtBQUVsRCxJQUFNSSxRQUFRLEdBQUc7SUFDZjtRQUFFQyxXQUFXLEVBQUUsTUFBTTtRQUFFQyxLQUFLLEVBQUUsR0FBRztLQUFFO0lBQ25DO1FBQUVELFdBQVcsRUFBRSxNQUFNO1FBQUVDLEtBQUssRUFBRSxPQUFPO0tBQUU7SUFDdkM7UUFBRUQsV0FBVyxFQUFFLE1BQU07UUFBRUMsS0FBSyxFQUFFLE9BQU87S0FBRTtDQUN4QztBQUVjLFNBQVNDLFFBQVEsR0FBRztJQUNqQyxxQkFDRSw4REFBQ0MsS0FBRzs7MEJBQ0YsOERBQUNOLG9FQUFNO2dCQUFDRSxRQUFRLEVBQUVBLFFBQVE7Z0JBQUVLLFVBQVUsRUFBRSxLQUFLOzs7OztvQkFBSTswQkFDakQsOERBQUNDLElBQUU7MEJBQUMsdUJBQXFCOzs7OztvQkFBSzswQkFDOUIsOERBQUNQLG1FQUFHOzs7O29CQUFPOzs7Ozs7WUFDUCxDQUNOO0FBQ0osQ0FBQztBQVJ1QkksS0FBQUEsUUFBUSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9wYWdlcy9maW5kL2luZGV4LmpzPzQzZDciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEhlYWQgZnJvbSAnbmV4dC9oZWFkJ1xuaW1wb3J0IEltYWdlIGZyb20gJ25leHQvaW1hZ2UnXG5pbXBvcnQgTmF2QmFyIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvdW5pdmVyc2FsL05hdkJhcidcbmltcG9ydCBNYXAgZnJvbSAnLi4vLi4vY29tcG9uZW50cy91bml2ZXJzYWwvbWFwVUknXG5cbmNvbnN0IG5hdkl0ZW1zID0gW1xuICB7IG5hdkl0ZW1OYW1lOiBcIkhvbWVcIiwgcm91dGU6IFwiL1wiIH0sXG4gIHsgbmF2SXRlbU5hbWU6IFwiTWVudVwiLCByb3V0ZTogXCIvbWVudVwiIH0sXG4gIHsgbmF2SXRlbU5hbWU6IFwiRmluZFwiLCByb3V0ZTogXCIvZmluZFwiIH1cbl07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEZpbmRQYWdlKCkge1xuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8TmF2QmFyIG5hdkl0ZW1zPXtuYXZJdGVtc30gaXNDdXN0b21lcj17ZmFsc2V9IC8+XG4gICAgICA8aDE+RmluZCBOZWFyZXN0IExvY2F0aW9uPC9oMT5cbiAgICAgIDxNYXA+PC9NYXA+XG4gICAgPC9kaXY+XG4gICk7XG59OyJdLCJuYW1lcyI6WyJIZWFkIiwiSW1hZ2UiLCJOYXZCYXIiLCJNYXAiLCJuYXZJdGVtcyIsIm5hdkl0ZW1OYW1lIiwicm91dGUiLCJGaW5kUGFnZSIsImRpdiIsImlzQ3VzdG9tZXIiLCJoMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./pages/find/index.js\n"));

/***/ }),

/***/ "./node_modules/next/head.js":
/*!***********************************!*\
  !*** ./node_modules/next/head.js ***!
  \***********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("module.exports = __webpack_require__(/*! ./dist/shared/lib/head */ \"./node_modules/next/dist/shared/lib/head.js\")\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9oZWFkLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBLGlIQUFrRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9oZWFkLmpzPzg4NDkiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Rpc3Qvc2hhcmVkL2xpYi9oZWFkJylcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/head.js\n"));

/***/ }),

/***/ "./node_modules/next/link.js":
/*!***********************************!*\
  !*** ./node_modules/next/link.js ***!
  \***********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("module.exports = __webpack_require__(/*! ./dist/client/link */ \"./node_modules/next/dist/client/link.js\")\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9saW5rLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHlHQUE4QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9saW5rLmpzPzc1YjMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Rpc3QvY2xpZW50L2xpbmsnKVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/link.js\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["pages/_app","main"], function() { return __webpack_exec__("./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=D%3A%5CFall%202022%5CCSCE%20315%5CProject_3%5Ccode%5CTeam34_Project_3%5Cpos_system%5Cpages%5Cfind%5Cindex.js&page=%2Ffind!"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);